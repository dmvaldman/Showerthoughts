{"number": 23, "problem": "<p>A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of $28$ would be $1 + 2 + 4 + 7 + 14 = 28$, which means that $28$ is a perfect number.</p>\n<p>A number $n$ is called deficient if the sum of its proper divisors is less than $n$ and it is called abundant if this sum exceeds $n$.</p>\n\n<p>As $12$ is the smallest abundant number, $1 + 2 + 3 + 4 + 6 = 16$, the smallest number that can be written as the sum of two abundant numbers is $24$. By mathematical analysis, it can be shown that all integers greater than $28123$ can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.</p>\n<p>Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.</p>\n\n", "solution": "#\n# Solution to Project Euler problem 23\n# Copyright (c) Project Nayuki. All rights reserved.\n#\n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n#\n\n\ndef compute():\n\tLIMIT = 28124\n\tdivisorsum = [0] * LIMIT\n\tfor i in range(1, LIMIT):\n\t\tfor j in range(i * 2, LIMIT, i):\n\t\t\tdivisorsum[j] += i\n\tabundantnums = [i for (i, x) in enumerate(divisorsum) if x > i]\n\n\texpressible = [False] * LIMIT\n\tfor i in abundantnums:\n\t\tfor j in abundantnums:\n\t\t\tif i + j < LIMIT:\n\t\t\t\texpressible[i + j] = True\n\t\t\telse:\n\t\t\t\tbreak\n\n\tans = sum(i for (i, x) in enumerate(expressible) if not x)\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "4179871"}
{"number": 72, "problem": "<p>Consider the fraction, $\\dfrac n d$, where $n$ and $d$ are positive integers. If $n \\lt d$ and $\\operatorname{HCF}(n,d)=1$, it is called a reduced proper fraction.</p>\n<p>If we list the set of reduced proper fractions for $d \\le 8$ in ascending order of size, we get:\n$$\\frac 1 8, \\frac 1 7, \\frac 1 6, \\frac 1 5, \\frac 1 4, \\frac 2 7, \\frac 1 3, \\frac 3 8, \\frac 2 5, \\frac 3 7, \\frac 1 2, \\frac 4 7, \\frac 3 5, \\frac 5 8, \\frac 2 3, \\frac 5 7, \\frac 3 4, \\frac 4 5, \\frac 5 6, \\frac 6 7, \\frac 7 8$$</p>\n<p>It can be seen that there are $21$ elements in this set.</p>\n<p>How many elements would be contained in the set of reduced proper fractions for $d \\le 1\\,000\\,000$?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 72\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, itertools\n\n\ndef compute():\n\ttotients = eulerlib.list_totients(10**6)\n\tans = sum(itertools.islice(totients, 2, None))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "303963552391"}
{"number": 132, "problem": "<p>A number consisting entirely of ones is called a repunit. We shall define $R(k)$ to be a repunit of length $k$.</p>\n<p>For example, $R(10) = 1111111111 = 11 \\times 41 \\times 271 \\times 9091$, and the sum of these prime factors is $9414$.</p>\n<p>Find the sum of the first forty prime factors of $R(10^9)$.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 132\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, itertools\n\n\ndef compute():\n\t# Among the integers starting from 2, take the sum of\n\t# the first 40 integers satisfying the filter condition\n\tcond = lambda i: eulerlib.is_prime(i) and repunit_mod(10**9, i) == 0\n\tans = sum(itertools.islice(filter(cond, itertools.count(2)), 40))\n\treturn str(ans)\n\n\ndef repunit_mod(k, m):\n\treturn (pow(10, k, m * 9) - 1) // 9\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "843296"}
{"number": 250, "problem": "<p>Find the number of non-empty subsets of $\\{1^1, 2^2, 3^3,\\dots, 250250^{250250}\\}$, the sum of whose elements is divisible by $250$. Enter the rightmost $16$ digits as your answer.</p>\n", "solution": "# \n# Solution to Project Euler problem 250\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\t# Use dynamic programming\n\tMOD = 10**16\n\tsubsets = [0] * 250  # subsets[i] is {the number of subsets with sum equal to i mod 250} mod 10^16\n\tsubsets[0] = 1\n\t\n\tfor i in range(1, 250250 + 1):\n\t\toffset = pow(i, i, 250)\n\t\tsubsets = [(val + subsets[(j - offset) % 250]) % MOD\n\t\t\tfor (j, val) in enumerate(subsets)]\n\t\n\tans = (subsets[0] - 1) % MOD\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1425480602091519"}
{"number": 106, "problem": "<p>Let $S(A)$ represent the sum of elements in set $A$ of size $n$. We shall call it a special sum set if for any two non-empty disjoint subsets, $B$ and $C$, the following properties are true:</p>\n<ol><li>$S(B) \\ne S(C)$; that is, sums of subsets cannot be equal.</li>\n<li>If $B$ contains more elements than $C$ then $S(B) \\gt S(C)$.</li>\n</ol><p>For this problem we shall assume that a given set contains $n$ strictly increasing elements and it already satisfies the second rule.</p>\n<p>Surprisingly, out of the $25$ possible subset pairs that can be obtained from a set for which $n = 4$, only $1$ of these pairs need to be tested for equality (first rule). Similarly, when $n = 7$, only $70$ out of the $966$ subset pairs need to be tested.</p>\n<p>For $n = 12$, how many of the $261625$ subset pairs that can be obtained need to be tested for equality?</p>\n<p class=\"smaller\">NOTE: This problem is related to <a href=\"problem=103\">Problem 103</a> and <a href=\"problem=105\">Problem 105</a>.</p>\n", "solution": "# \n# Solution to Project Euler problem 106\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\n# Lemma to confirm denominator:\n#   For each natural number n >= 2, any set of size n has exactly\n#   (3^n + 1) / 2 - 2^n unordered pairs of non-empty disjoint subsets.\n# Proof:\n#   0. Let A be an arbitrary set of size n. We want to count its subset pairs.\n#   1. Suppose we can label each element of A with a letter from the set {B, C, N}.\n#      A label is defined as an n-tuple of letters from the set {B, C, N}.\n#      For example, the set {a,b,c,d} can be labeled as (B,B,C,N) or (N,C,N,N).\n#   2. Let L be the set of all possible labels on A. We know that |L| = 3^n.\n#   3. If a label doesn't contain any B's, then it is equivalent to saying that the\n#      label is composed of any number of C's and N's, so there are 2^n of them.\n#   4. If a label doesn't contain any C's, then it is equivalent to saying that the\n#      label is composed of any number of B's and N's, so there are 2^n of them.\n#   5. If a label doesn't contain any B's or C's, then it is the singleton of all N's.\n#   6. How many labels contain at least one B and at least one C?\n#      Using the inclusion-exclusion principle, we have:\n#      |Have B and Have C| = |All labels| - |Lacks B or Lacks C|\n#          = |All labels| - (|Lacks B| + |Lacks C| - |Lacks B and Lacks C|)\n#          = |All labels| - |Lacks B| - |Lacks C| + |Lacks B and Lacks C|\n#          = 3^n - 2^n - 2^n + 1.\n#   7. For an arbitrary label that has at least one B and at least one C,\n#      what actually matters is which elements of A are put into one subset\n#      and which elements of A are put into the other disjoint subset, but\n#      the names of these subsets as B and C are interchangeable. Hence we\n#      divide by 2 to remove this degree of freedom, giving us a final count\n#      of (3^n - 2^n - 2^n + 1) / 2 = (3^n + 1) / 2 - 2^n.\n# Corollary:\n#   This confirms some values mentioned in the problem statement:\n#   - Set size n = 7 has 966 subset pairs.\n#   - Set size n = 12 has 261625 subset pairs.\n# \n# \n# Main theorem:\n#   Let A be an arbitrary set such that all of the following hold:\n#   - Its size is n.\n#   - It consists only of positive integers.\n#   - It satisfies the property (ii) given in the problem statement.\n#   - a0 < a1 < ... < a_{n-1} are all the elements of A listed in ascending order.\n#   To verify property (i), we would need to test some number of unordered pairs\n#   of non-empty disjoint subsets of A to see that the subsets have unequal sums\n#   Then we claim that exactly this many pairs need to be tested for equality:\n#   The summation of (n choose 2k) * [(2k choose k) / 2 - (2k choose k) / (k + 1)]\n#   for k from 2 to floor(n / 2) (inclusive).\n# \n# Proof:\n#   We begin by arguing about what subset pairs don't need to be tested,\n#   then progress to counting which subset pairs do and don't need to be tested.\n#   \n#   Let B and C be an arbitrary pair of non-empty disjoint subsets of A.\n#   Furthermore, restrict the pair  (and prevent duplicate counting) so that\n#   the smallest element of B is smaller than the smallest element of C.\n#   Assume that for each element of B and C, we know what index of A\n#   it comes from, but we don't look at the actual element's value.\n#   \n#   If sets B and C have different sizes, then property (ii) implies that\n#   either S(B) < S(C) or S(B) > S(C), which in both cases imply S(B) != S(C).\n#   Hence we only care about the cases where |B| = |C|.\n#   \n#   If |B| = |C| = 1, then we know by disjointness that S(B) != S(C).\n#   (Namely because each set has a different singleton element.)\n#   \n#   For the interesting case, we have |B| = |C| >= 2. If we can match each\n#   element of B to a unique larger element in C, then we know for sure that\n#   S(B) < S(C), which further implies that S(B) != S(C). When we find such\n#   a matching, the ordering of the elements of A already implies inequality,\n#   without the need to examine the actual element values.\n#   \n#   To illustrate with a concrete example, suppose B = {a0,a1} and C = {a2,a3}\n#   are subsets of some set A. For each element of the set B or C, we are\n#   assumed to know what index of A the element came from. Because we know\n#   a0 < a2 and a1 < a3, we add these inequalities to get S(B) = a0 + a1\n#   < a2 + a3 = S(C), implying S(B) != S(C). Similarly, with B = {a0,a2} and\n#   C = {a1,a3}, we have a0 < a1 and a2 < a3, leading to a0 + a2 < a1 + a3.\n#   But in the case of B = {a0,a3} and C = {a1,a2}, we cannot conclude\n#   whether S(B) equals S(C) without examining the actual element values.\n#   \n#   Let's imagine scanning the elements of A in ascending order. When we\n#   encounter an element a_i that is:\n#   - In B, then we push it onto a stack, remembering that we need to\n#     pair it with a later (and thus larger) element that is in C.\n#   - In C, then we consult the stack. If the stack is empty, then this\n#     element cannot be paired with an earlier (and thus smaller) element that\n#     is in B, so no match exists. Otherwise we pop one element from the stack.\n#   - Not in B or C, then we ignore it because it plays no role in the sums.\n#   \n#   Suppose we lay out the elements of A as a sequence, and label each element\n#   according to the subsets B and C in a particular way. If element a_i is in B,\n#   then label it as ( (left parenthesis). If element a_i is in C, then label it\n#   as ) (right parenthesis). Otherwise label it as nothing/space.\n#   \n#   To illustrate, suppose A has size 5, B = {a0,a1}, and C = {a2,a3}.\n#   Then this pair of subsets corresponds with the label \"(( ))\" on A.\n#   \n#   We can see that a pair of subsets doesn't need to be tested if\n#   its label corresponds to a string of balanced parentheses. This is\n#   a well-known combinatorics problem (which I won't try to prove):\n#   The Catalan number C_k = (2k choose k) / (k + 1) represents the\n#   number of ways that k pairs of parentheses can be arranged in a\n#   sequence to produce a proper expression (i.e. no prefix contains\n#   more right parentheses than left parentheses).\n#   \n#   There are (n choose 2k) ways to choose elements from A that will\n#   then be split among the subsets B and C. Focus on one arbitrary choice.\n#   \n#   Subsequently, there are (2k choose k) / 2 ways to put k of those\n#   elements into B and k of those elements into C, but without\n#   regards to the ordering of B and C.\n#   \n#   However, C_k = (2k choose k) / (k + 1) of those choices of subset\n#   pairs will necessarily have unequal sums due to the ordering of\n#   elements, hence they don't need to be tested.\n#   \n#   This means that for a given k >= 2, we need to test (n choose 2k)\n#   * ((2k choose k) / 2 - (2k choose k) / (k + 1)) subset pairs.\n#   \n#   Finally, we sum this term for k = 2, 3, 4, ... as long as 2k <= n,\n#   so that we consider all the sizes of k where we can take a pair\n#   of k-sized disjoint subsets of A.\n#   \n# Corollary:\n#   Although the derivation/justification is long, the amount of\n#   arithmetic is small enough to be doable by hand calculation.\ndef compute():\n\tSET_SIZE = 12\n\t\n\tdef catalan(n):\n\t\treturn math.comb(n * 2, n) // (n + 1)\n\t\n\tans = sum(math.comb(SET_SIZE, i * 2) * (math.comb(i * 2, i) // 2 - catalan(i))\n\t\tfor i in range(2, SET_SIZE // 2 + 1))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "21384"}
{"number": 46, "problem": "<p>It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.</p>\n\\begin{align}\n9 = 7 + 2 \\times 1^2\\\\\n15 = 7 + 2 \\times 2^2\\\\\n21 = 3 + 2 \\times 3^2\\\\\n25 = 7 + 2 \\times 3^2\\\\\n27 = 19 + 2 \\times 2^2\\\\\n33 = 31 + 2 \\times 1^2\n\\end{align}\n<p>It turns out that the conjecture was false.</p>\n<p>What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 46\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, itertools\n\n\ndef compute():\n\tans = next(itertools.filterfalse(test_goldbach, itertools.count(9, 2)))\n\treturn str(ans)\n\n\ndef test_goldbach(n):\n\tif n % 2 == 0 or eulerlib.is_prime(n):\n\t\treturn True\n\tfor i in itertools.count(1):\n\t\tk = n - 2 * i * i\n\t\tif k <= 0:\n\t\t\treturn False\n\t\telif eulerlib.is_prime(k):\n\t\t\treturn True\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "5777"}
{"number": 17, "problem": "<p>If the numbers $1$ to $5$ are written out in words: one, two, three, four, five, then there are $3 + 3 + 5 + 4 + 4 = 19$ letters used in total.</p>\n<p>If all the numbers from $1$ to $1000$ (one thousand) inclusive were written out in words, how many letters would be used? </p>\n<br><p class=\"note\"><b>NOTE:</b> Do not count spaces or hyphens. For example, $342$ (three hundred and forty-two) contains $23$ letters and $115$ (one hundred and fifteen) contains $20$ letters. The use of \"and\" when writing out numbers is in compliance with British usage.</p>\n", "solution": "# \n# Solution to Project Euler problem 17\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# - For the numbers 0 to 19, we write the single word:\n#   {zero, one, two, three, four, five, six, seven, eight, nine,\n#   ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen}.\n# - For the numbers 20 to 99, we write the word for the tens place:\n#   {twenty, thirty, forty, fifty, sixty, seventy, eighty, ninety}.\n#   Subsequently if the last digit is not 0, then we write the word for the ones place (one to nine).\n# - For the numbers 100 to 999, we write the ones word for the hundreds place followed by \"hundred\":\n#   {one hundred, two hundred, three hundred, ..., eight hundred, nine hundred}.\n#   Subsequently if the last two digits are not 00, then we write the word \"and\"\n#   followed by the phrase for the last two digits (from 01 to 99).\n# - For the numbers 1000 to 999999, we write the word for the three digits starting at the\n#   thousands place and going leftward, followed by \"thousand\". Subsequently if the last three\n#   digits are not 000, then we write the phrase for the last three digits (from 001 to 999).\ndef compute():\n\tans = sum(len(to_english(i)) for i in range(1, 1001))\n\treturn str(ans)\n\n\ndef to_english(n):\n\tif 0 <= n < 20:\n\t\treturn ONES[n]\n\telif 20 <= n < 100:\n\t\treturn TENS[n // 10] + (ONES[n % 10] if (n % 10 != 0) else \"\")\n\telif 100 <= n < 1000:\n\t\treturn ONES[n // 100] + \"hundred\" + ((\"and\" + to_english(n % 100)) if (n % 100 != 0) else \"\")\n\telif 1000 <= n < 1000000:\n\t\treturn to_english(n // 1000) + \"thousand\" + (to_english(n % 1000) if (n % 1000 != 0) else \"\")\n\telse:\n\t\traise ValueError()\n\n\nONES = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\",\n        \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"]\nTENS = [\"\", \"\", \"twenty\", \"thirty\", \"forty\", \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"]\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "21124"}
{"number": 225, "problem": "<p>\nThe sequence $1, 1, 1, 3, 5, 9, 17, 31, 57, 105, 193, 355, 653, 1201, \\dots$<br>\nis defined by $T_1 = T_2 = T_3 = 1$ and $T_n = T_{n - 1} + T_{n - 2} + T_{n - 3}$.\n</p>\n<p>\nIt can be shown that $27$ does not divide any terms of this sequence.<br>In fact, $27$ is the first odd number with this property.</p>\n<p>\nFind the $124$<sup>th</sup> odd number that does not divide any terms of the above sequence.</p>\n", "solution": "# \n# Solution to Project Euler problem 225\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\ndef compute():\n\tINDEX = 124  # 1-based\n\tstream = (i for i in itertools.count(1, 2) if not has_tribonacci_multiple(i))\n\tans = next(itertools.islice(stream, INDEX - 1, None))\n\treturn str(ans)\n\n\ndef has_tribonacci_multiple(i):\n\tseen = set()\n\ta, b, c = 1, 1, 1\n\twhile True:\n\t\tkey = (a, b, c)\n\t\tif key in seen:\n\t\t\treturn False\n\t\tseen.add(key)\n\t\tif a % i == 0:\n\t\t\treturn True\n\t\ta, b, c = b, c, (a + b + c) % i\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "2009"}
{"number": 7, "problem": "<p>By listing the first six prime numbers: $2, 3, 5, 7, 11$, and $13$, we can see that the $6$th prime is $13$.</p>\n<p>What is the $10\\,001$st prime number?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 7\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, itertools\n\n\n# Computers are fast, so we can implement this solution by testing each number\n# individually for primeness, instead of using the more efficient sieve of Eratosthenes.\n# \n# The algorithm starts with an infinite stream of incrementing integers starting at 2,\n# filters them to keep only the prime numbers, drops the first 10000 items,\n# and finally returns the first item thereafter.\ndef compute():\n\tans = next(itertools.islice(filter(eulerlib.is_prime, itertools.count(2)), 10000, None))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "104743"}
{"number": 56, "problem": "<p>A googol ($10^{100}$) is a massive number: one followed by one-hundred zeros; $100^{100}$ is almost unimaginably large: one followed by two-hundred zeros. Despite their size, the sum of the digits in each number is only $1$.</p>\n<p>Considering natural numbers of the form, $a^b$, where $a, b \\lt 100$, what is the maximum digital sum?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 56\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tans = max(sum(int(c) for c in str(a**b))\n\t\tfor a in range(100) for b in range(100))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "972"}
{"number": 116, "problem": "<p>A row of five grey square tiles is to have a number of its tiles replaced with coloured oblong tiles chosen from red (length two), green (length three), or blue (length four).</p>\n<p>If red tiles are chosen there are exactly seven ways this can be done.</p>\n\n<div class=\"center\">\n<img src=\"resources/images/0116_1.png?1678992052\" alt=\"png116_1.png\">\n</div>\n\n<p>If green tiles are chosen there are three ways.</p>\n\n<div class=\"center\">\n<img src=\"resources/images/0116_2.png?1678992052\" alt=\"png116_2.png\">\n</div>\n\n<p>And if blue tiles are chosen there are two ways.</p>\n\n<div class=\"center\">\n<img src=\"resources/images/0116_3.png?1678992052\" alt=\"png116_3.png\">\n</div>\n\n<p>Assuming that colours cannot be mixed there are $7 + 3 + 2 = 12$ ways of replacing the grey tiles in a row measuring five units in length.</p>\n<p>How many different ways can the grey tiles in a row measuring fifty units in length be replaced if colours cannot be mixed and at least one coloured tile must be used?</p>\n<p class=\"note\">NOTE: This is related to <a href=\"problem=117\">Problem 117</a>.</p>\n", "solution": "# \n# Solution to Project Euler problem 116\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tLENGTH = 50\n\treturn str(sum(count_ways(LENGTH, i) for i in range(2, 5)))\n\n\n# How many ways can a row n units long be filled with grey squares 1 unit long\n# and colored tiles m units long? Denote this quantity as ways[n].\n# Compute n = 0 manually as a base case.\n# \n# Now assume n >= 1. Look at the leftmost item and sum up the possibilities.\n# - If the item is a grey square, then the rest of the row\n#   is allowed to be anything of length n-1. Add ways[n-1].\n# - If the item is a colored tile of length m where m <= n, then the\n#   rest of the row can be anything of length n-m. Add ways[n-m].\n# \n# At the end, return ways[length]-1 to exclude the case where the row is all grey squares.\ndef count_ways(length, m):\n\t# Dynamic programming\n\tways = [1] + [0] * length\n\tfor n in range(1, len(ways)):\n\t\tways[n] += ways[n - 1]\n\t\tif n >= m:\n\t\t\tways[n] += ways[n - m]\n\treturn ways[-1] - 1\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "20492570929"}
{"number": 287, "problem": "<p>The quadtree encoding allows us to describe a $2^N \\times 2^N$  black and white image as a sequence of bits (0 and 1). Those sequences are to be read from left to right like this:\n</p><ul><li>the first bit deals with the complete $2^N \\times 2^N$ region;</li>\n<li>\"0\" denotes a split:\n<br>the current $2^n \\times 2^n$ region is divided into $4$ sub-regions of dimension $2^{n - 1} \\times 2^{n - 1}$,<br>\nthe next bits contains the description of the top left, top right, bottom left and bottom right sub-regions - in that order;</li>\n<li>\"10\" indicates that the current region contains only black pixels;</li>\n<li>\"11\" indicates that the current region contains only white pixels.</li></ul><p>Consider the following $4 \\times 4$ image (colored marks denote places where a split can occur):</p>\n\n<div class=\"center\"><img src=\"resources/images/0287_quadtree.gif?1678992056\" class=\"dark_img\" alt=\"0287_quadtree.gif\"></div>\n\n<p>This image can be described by several sequences, for example :\n\"<span class=\"red strong\">0</span><span class=\"blue strong\">0</span>10101010<span class=\"green strong\">0</span>1011111011<span class=\"orange strong\">0</span>10101010\", of length $30$, or<br>\n\"<span class=\"red strong\">0</span>10<span class=\"green strong\"><b>0</b></span>101111101110\", of length $16$, which is the minimal sequence for this image.</p>\n\n<p>For a positive integer $N$, define $D_N$ as the $2^N \\times 2^N$ image with the following coloring scheme:\n</p><ul><li>the pixel with coordinates $x = 0, y = 0$ corresponds to the bottom left pixel,</li>\n<li>if $(x - 2^{N - 1})^2 + (y - 2^{N - 1})^2 \\le 2^{2N - 2}$ then the pixel is black,</li>\n<li>otherwise the pixel is white.</li></ul><p>What is the length of the minimal sequence describing $D_{24}$?</p>\n", "solution": "# \n# Solution to Project Euler problem 287\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# Let R = 2^(N-1) denote the radius of the circle (filled disk) being drawn.\n# \n# First, we can simplify the problem by translating (shifting) the coordinate system.\n# Instead of x and y each in [0, 2^N) for the formula [x - 2^(N-1)]^2 + [y - 2^(N-1)]^2 <= R^2,\n# we shall consider x and y each in [-(2^(N-1)), 2^(N-1)) for the formula x^2 + y^2 <= R^2.\n# \n# Suppose we are given a square 2D region with endpoints [xstart, xend) and [ystart, yend).\n# If the region is entirely white or entirely black, then it takes 2 bits to encode the region.\n# Otherwise the region must have both white and black pixels, so we use 1 bit\n# to encode the split, recurse on the 4 sub-squares, and sum their code lengths.\n# \n# Within the region, what are the possible values of the left side of the formula, x^2 + y^2?\n# To minimize or maximize x^2 + y^2, we can min/maximize each of x^2 and y^2 independently.\n# - To minimize x^2, we minimize |x|. If 0 is in [xstart, xend),\n#   then the minimum |x| is 0, and thus the minimum x^2 is 0.\n#   Otherwise, either all possible x values are negative or all\n#   are positive, so the minimum |x| is min(|xstart|, |xend-1|).\n# - To maximize x^2, we maximize |x|. This simply equals max(|xstart|, |xend-1|).\n# - The same arguments apply to minimizing/maximizing y^2.\n# \n# Now evaluate minR^2 = minX^2 + minY^2, and maxR^2 = maxX^2 + maxY^2.\n# - If maxR^2 <= R^2, then all points in the region satisfy\n#   x^2 + y^2 <= R^2, hence the entire region is black.\n# - Similarly, if minR^2 > R^2, then all points in the region\n#   satisfy x^2 + y^2 > R^2, hence the entire region is white.\n# - Otherwise, the region must contain both black and white points,\n#   so we split into 4 subregions and recurse.\n# \n# One further optimization: If the region [xstart, xend) * [ystart, yend) lies\n# entirely within a quadrant, then calculating minR and maxR becomes trivial.\n# In fact, only the root call to compressed_length() spans both positive\n# and negative coordinates; all deeper calls are entirely within a quadrant.\n# For a region with [xstart, xend) where xstart < xend <= 0, compressed_length()\n# yields the same result when the range is replaced with [-xend + 1, -xstart + 1).\n# Hence by symmetry, we can only consider cases where 0 <= xstart < xend,\n# and not deal with negative ranges. This optimized bit length algorithm can\n# no longer be adapted to encode the actual compressed bit stream, however.\ndef compute():\n\tN = 24\n\tRADIUS_SQUARED = 2**(2 * N - 2)\n\t\n\t# Returns the exact minimum number of bits required to encode\n\t# the circle image's region of [xstart, end) * [ystart, yend),\n\t# requiring 0 <= xstart < xend and 0 <= ystart < yend.\n\tdef compressed_length(xstart, xend, ystart, yend):\n\t\tif xstart * xstart + ystart * ystart > RADIUS_SQUARED:  # All white\n\t\t\treturn 2\n\t\telif (xend - 1) * (xend - 1) + (yend - 1) * (yend - 1) <= RADIUS_SQUARED:  # All black\n\t\t\treturn 2\n\t\telse:  # Subdivide and recurse\n\t\t\txmid = (xstart + xend) >> 1\n\t\t\tymid = (ystart + yend) >> 1\n\t\t\treturn (1 +\n\t\t\t\tcompressed_length(xstart, xmid, ymid  , yend) +  # Top left\n\t\t\t\tcompressed_length(xmid  , xend, ymid  , yend) +  # Top right\n\t\t\t\tcompressed_length(xstart, xmid, ystart, ymid) +  # Bottom left\n\t\t\t\tcompressed_length(xmid  , xend, ystart, ymid))   # Bottom right\n\t\n\ttemp = 2**(N - 1)\n\treturn str(1 +\n\t\tcompressed_length(0, temp, 0, temp) +\n\t\tcompressed_length(0, temp, 1, temp + 1) +\n\t\tcompressed_length(1, temp + 1, 0, temp) +\n\t\tcompressed_length(1, temp + 1, 1, temp + 1))\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "313135496"}
{"number": 211, "problem": "<p>For a positive integer $n$, let $\\sigma_2(n)$ be the sum of the squares of its divisors. For example,\n$$\\sigma_2(10) = 1 + 4 + 25 + 100 = 130.$$</p>\n<p>Find the sum of all $n$, $0 \\lt n \\lt 64\\,000\\,000$ such that $\\sigma_2(n)$ is a perfect square.</p>\n", "solution": "# \n# Solution to Project Euler problem 211\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport array, eulerlib, math\n\n\ndef compute():\n\tLIMIT = 64000000\n\t\n\t# Can be any number >= 1, but it's most beneficial to use a product of unique small primes excluding 2\n\tRESIDUE_TEST = 3 * 5 * 7 * 11 * 13\n\t\n\tisresidue = [False] * RESIDUE_TEST\n\tfor i in range(RESIDUE_TEST):\n\t\tisresidue[i * i % RESIDUE_TEST] = True\n\t\n\tdef is_perfect_square(x):\n\t\t# Optional optimization: Check if x is a quadratic residue modulo some number.\n\t\t# The modulus was chosen to be a product of k primes; in this case, k = 5.\n\t\t# If x is a square, then it must be a quadratic residue modulo each prime.\n\t\t# For each prime p, there is an approximately half chance that an arbitrary number\n\t\t# is a residue mod p. Thus with 5 primes, only about 1/32 of candidates remain.\n\t\t# Note that the prime 2 tells us nothing about whether x is a square, so we exclude it.\n\t\treturn isresidue[x % RESIDUE_TEST] and eulerlib.is_square(x)\n\t\n\t\n\t# Requires at least 640 MB of memory\n\tsigma2 = list_sigma2(LIMIT - 1)\n\tans = sum(i for i in range(1, LIMIT) if is_perfect_square(sigma2[i]))\n\treturn str(ans)\n\n\ndef list_sigma2(n):\n\t# If i has a prime factor p <= sqrt, then quasiprimefactor[i] = p.\n\t# Otherwise i > sqrt must be prime, and quasiprimefactor[i] = 0 because i may overflow an int16.\n\tsqrt = math.isqrt(n)\n\tquasiprimefactor = array.array(\"H\", (0 for _ in range(n + 1)))\n\t\n\t# Richer version of the sieve of Eratosthenes\n\tfor i in range(2, sqrt + 1):\n\t\tif quasiprimefactor[i] == 0:\n\t\t\tquasiprimefactor[i] = i\n\t\t\tfor j in range(i * i, n + 1, i):\n\t\t\t\tif quasiprimefactor[j] == 0:\n\t\t\t\t\tquasiprimefactor[j] = i\n\t\n\tsigma2 = array.array(\"Q\", (0 for _ in range(n + 1)))\n\tsigma2[1] = 1\n\tfor i in range(2, len(sigma2)):\n\t\tp = quasiprimefactor[i]\n\t\tif p == 0:\n\t\t\tp = i\n\t\tsum = 1\n\t\tj = i\n\t\tp2 = p * p\n\t\tk = p2\n\t\twhile j % p == 0:\n\t\t\tsum += k\n\t\t\tj //= p\n\t\t\tk *= p2\n\t\tsigma2[i] = sum * sigma2[j]\n\treturn sigma2\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1922364685"}
{"number": 91, "problem": "<p>The points $P(x_1, y_1)$ and $Q(x_2, y_2)$ are plotted at integer co-ordinates and are joined to the origin, $O(0,0)$, to form $\\triangle OPQ$.</p>\n\n<div class=\"center\">\n<img src=\"resources/images/0091_1.png?1678992052\" class=\"dark_img\" alt=\"\"><br></div>\n\n<p>There are exactly fourteen triangles containing a right angle that can be formed when each co-ordinate lies between $0$ and $2$ inclusive; that is, $0 \\le x_1, y_1, x_2, y_2 \\le 2$.</p>\n\n<div class=\"center\">\n<img src=\"resources/images/0091_2.png?1678992052\" alt=\"\"><br></div>\n\n<p>Given that $0 \\le x_1, y_1, x_2, y_2 \\le 50$, how many right triangles can be formed?</p>\n", "solution": "# \n# Solution to Project Euler problem 91\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tLIMIT = 51\n\tans = sum(1\n\t\tfor x1 in range(LIMIT)\n\t\tfor y1 in range(LIMIT)\n\t\tfor x2 in range(LIMIT)\n\t\tfor y2 in range(LIMIT)\n\t\t# For uniqueness, ensure that (x1,y1) has a larger angle than (x2,y2)\n\t\tif y2 * x1 < y1 * x2 and is_right_triangle(x1, y1, x2, y2))\n\treturn str(ans)\n\n\n# Tests whether the three points {(0,0), (x1,y1), (x2,y2)} form a right triangle.\ndef is_right_triangle(x1, y1, x2, y2):\n\ta = x1**2 + y1**2\n\tb = x2**2 + y2**2\n\tc = (x2 - x1)**2 + (y2 - y1)**2\n\treturn (a + b == c) or (b + c == a) or (c + a == b)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "14234"}
{"number": 122, "problem": "<p>The most naive way of computing $n^{15}$ requires fourteen multiplications:\n$$n \\times n \\times \\cdots \\times n = n^{15}.$$</p>\n<p>But using a \"binary\" method you can compute it in six multiplications:</p>\n\\begin{align}\nn \\times n &amp;= n^2\\\\\nn^2 \\times n^2 &amp;= n^4\\\\\nn^4 \\times n^4 &amp;= n^8\\\\\nn^8 \\times n^4 &amp;= n^{12}\\\\\nn^{12} \\times n^2 &amp;= n^{14}\\\\\nn^{14} \\times n &amp;= n^{15}\n\\end{align}\n<p>However it is yet possible to compute it in only five multiplications:</p>\n\\begin{align}\nn \\times n &amp;= n^2\\\\\nn^2 \\times n &amp;= n^3\\\\\nn^3 \\times n^3 &amp;= n^6\\\\\nn^6 \\times n^6 &amp;= n^{12}\\\\\nn^{12} \\times n^3 &amp;= n^{15}\n\\end{align}\n<p>We shall define $m(k)$ to be the minimum number of multiplications to compute $n^k$; for example $m(15) = 5$.</p>\n<p>Find $\\sum\\limits_{k = 1}^{200} m(k)$.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 122\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\n# This problem uses the concepts of https://en.wikipedia.org/wiki/Addition_chain\n# and https://en.wikipedia.org/wiki/Addition-chain_exponentiation .\n# \n# Definition: An addition chain is a finite sequence of integers {a_i} such that:\n# - a_0 = 1 (i.e. the head element is 1).\n# - For each index i (with 0 < i < length), there exists indices j and k such that 0 <= j <= k < i\n#   and a_i = a_j + a_k (i.e. each subsequent element is the sum of some two elements that come before it).\n# - The number of operations in an addition chain is equal to the length of the chain minus one.\n# \n# Example: {1, 2, 3, 6, 9, 11} is an addition chain because\n# 2 = 1 + 1, 3 = 1 + 2, 6 = 3 + 3, 9 = 3 + 6, 11 = 2 + 9.\n# This chain has length 6, and uses 5 addition operations.\n# \n# Note: A star chain or Brauer chain is an addition chain with the stronger condition that for each i > 0,\n# there exists an index j such that 0 <= j < i and a_i = a_{i-1} + a_j. However, a minimum-length star chain\n# might be longer than the minimum-length general addition chain. A counterexample is known for 12509;\n# the shortest addition chain that produces 12509 is shorter than the shortest star chain that produces it.\n# This is unfortunate because searching star chains is much faster than searching general addition chains.\n# \n# The overall strategy of this solution is to explore all addition chains by brute force using depth-first search.\n# We start with the base chain of {1}, progressively add elements that are the sum of some two earlier elements,\n# and backtrack at each stage. No memoization or breadth-first search is performed because the search space is large.\n# \n# An important detail is that we perform depth-limited search of the full search space, with depth = 1, 2, 3, etc.\n# This gives us the benefit of breadth-first search without its high memory usage - namely, the first time\n# we visit a sum of n, we can be sure that it has been reached with the smallest possible chain length.\n# \n# A crucial algorithmic optimization is that we only consider addition chains that are strictly increasing.\n# Clearly there is no benefit to producing a certain term twice within the same sequence (e.g. 2 + 2 = 4 and 1 + 3 = 4).\n# As for the increasing order, we argue that for every addition chain that isn't strictly increasing, it can be\n# reordered to one that is strictly increasing. For example, the chain {1, 2, 4, 3} can be reordered to {1, 2, 3, 4}.\n# This is because if a_i > a_{i+1}, then a_{i+1} can't possibly use a_i as an addend (which are all positive),\n# and it must have used two terms that are strictly in front of index i. Therefore, exploring only strictly increasing\n# addition chains will still give us full coverage of the search space.\ndef compute():\n\t# Set up initial array of known/unknown minimum operation counts\n\tLIMIT = 200\n\tminoperations = [0, 0] + [None] * (LIMIT - 1)\n\tnumunknown = [LIMIT - 1]  # Use list instead of scalar to work around Python 2's broken scoping\n\t\n\t# Recursively builds up chains and compares them to chain lengths already found.\n\tdef explore_chains(chain, maxops):\n\t\t# Depth-based termination or early exit\n\t\tif len(chain) > maxops or numunknown[0] == 0:\n\t\t\treturn\n\t\t\n\t\t# Try all unordered pairs of values in the current chain\n\t\tmax = chain[-1]  # Peek at top\n\t\tfor i in reversed(range(len(chain))):\n\t\t\tfor j in reversed(range(i + 1)):\n\t\t\t\tx = chain[i] + chain[j]\n\t\t\t\tif x <= max:\n\t\t\t\t\tbreak  # Early exit due to ascending order\n\t\t\t\tif x <= LIMIT:\n\t\t\t\t\t# Append x to the current chain and recurse\n\t\t\t\t\tchain.append(x)\n\t\t\t\t\tif minoperations[x] is None:\n\t\t\t\t\t\t# For each unique value of x, we set minoperations[x] only once\n\t\t\t\t\t\t# because we do progressive deepening in the depth-first search\n\t\t\t\t\t\tminoperations[x] = len(chain) - 1\n\t\t\t\t\t\tnumunknown[0] -= 1\n\t\t\t\t\texplore_chains(chain, maxops)\n\t\t\t\t\tchain.pop()\n\t\n\t\n\t# Perform bounded depth-first search with incrementing depth\n\tfor ops in itertools.count(1):\n\t\tif numunknown[0] == 0:\n\t\t\t# Add up the results\n\t\t\treturn str(sum(minoperations))\n\t\texplore_chains([1], ops)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1582"}
{"number": 62, "problem": "<p>The cube, $41063625$ ($345^3$), can be permuted to produce two other cubes: $56623104$ ($384^3$) and $66430125$ ($405^3$). In fact, $41063625$ is the smallest cube which has exactly three permutations of its digits which are also cube.</p>\n<p>Find the smallest cube for which exactly five permutations of its digits are cube.</p>\n\n", "solution": "#\n# Solution to Project Euler problem 62\n# Copyright (c) Project Nayuki. All rights reserved.\n#\n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n#\n\nimport itertools\n\n\ndef compute():\n\tnumdigits = 0\n\tdata = {}  # str numclass -> (int lowest, int count)\n\tfor i in itertools.count():\n\t\tdigits = [int(c) for c in str(i**3)]\n\t\tdigits.sort()\n\t\tnumclass = \"\".join(str(d) for d in digits)\n\n\t\tif len(numclass) > numdigits:\n\t\t\t# Process and flush data for smaller number of digits\n\t\t\tcandidates = [lowest for (lowest, count) in data.values() if count == 5]\n\t\t\tif len(candidates) > 0:\n\t\t\t\treturn str(min(candidates)**3)\n\t\t\tdata = {}\n\t\t\tnumdigits = len(numclass)\n\n\t\tlowest, count = data.get(numclass, (i, 0))\n\t\tdata[numclass] = (lowest, count + 1)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "127035954683"}
{"number": 173, "problem": "<p>We shall define a square lamina to be a square outline with a square \"hole\" so that the shape possesses vertical and horizontal symmetry. For example, using exactly thirty-two square tiles we can form two different square laminae:</p>\n<div class=\"center\">\n<img src=\"resources/images/0173_square_laminas.gif?1678992055\" alt=\"\"></div>\n<p>With one-hundred tiles, and not necessarily using all of the tiles at one time, it is possible to form forty-one different square laminae.</p>\n<p>Using up to one million tiles how many different square laminae can be formed?</p>\n", "solution": "# \n# Solution to Project Euler problem 173\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tTILES = 10**6\n\tans = 0\n\tfor n in range(3, TILES // 4 + 2):  # Outer square length\n\t\tfor k in range(n - 2, 0, -2):  # Inner square length\n\t\t\tif n * n - k * k > TILES:\n\t\t\t\tbreak\n\t\t\tans += 1\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1572729"}
{"number": 33, "problem": "<p>The fraction $49/98$ is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly believe that $49/98 = 4/8$, which is correct, is obtained by cancelling the $9$s.</p>\n<p>We shall consider fractions like, $30/50 = 3/5$, to be trivial examples.</p>\n<p>There are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits in the numerator and denominator.</p>\n<p>If the product of these four fractions is given in its lowest common terms, find the value of the denominator.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 33\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\ndef compute():\n\t# Consider an arbitrary fraction n/d:\n\t#   Let n = 10 * n1 + n0 be the numerator.\n\t#   Let d = 10 * d1 + d0 be the denominator.\n\t# As stated in the problem, we need 10 <= n < d < 100.\n\t# We must disregard trivial simplifications where n0 = d0 = 0.\n\t# \n\t# Now, a simplification with n0 = d0 is impossible because:\n\t#   n1 / d1 = n / d = (10*n1 + n0) / (10*d1 + n0).\n\t#   n1 * (10*d1 + n0) = d1 * (10*n1 + n0).\n\t#   10*n1*d1 + n1*n0 = 10*d1*n1 + d1*n0.\n\t#   n1*n0 = d1*n0.\n\t#   n1 = d1.\n\t#   This implies n = d, which contradicts the fact that n < d.\n\t# Similarly, we cannot have a simplification with n1 = d1 for the same reason.\n\t# \n\t# Therefore we only need to consider the cases where n0 = d1 or n1 = d0.\n\t# In the first case, check that n1/d0 = n/d;\n\t# in the second case, check that n0/d1 = n/d.\n\tnumer = 1\n\tdenom = 1\n\tfor d in range(10, 100):\n\t\tfor n in range(10, d):\n\t\t\tn0 = n % 10\n\t\t\tn1 = n // 10\n\t\t\td0 = d % 10\n\t\t\td1 = d // 10\n\t\t\tif (n1 == d0 and n0 * d == n * d1) or (n0 == d1 and n1 * d == n * d0):\n\t\t\t\tnumer *= n\n\t\t\t\tdenom *= d\n\treturn str(denom // math.gcd(numer, denom))\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "100"}
{"number": 231, "problem": "<p>The binomial coefficient $\\displaystyle \\binom {10} 3 = 120$.<br>\n$120 = 2^3 \\times 3 \\times 5 = 2 \\times 2 \\times 2 \\times 3 \\times 5$, and $2 + 2 + 2 + 3 + 5 = 14$.<br>\nSo the sum of the terms in the prime factorisation of $\\displaystyle \\binom {10} 3$ is $14$.\n<br><br>\nFind the sum of the terms in the prime factorisation of $\\displaystyle \\binom {20\\,000\\,000} {15\\,000\\,000}$.\n</p>\n", "solution": "# \n# Solution to Project Euler problem 231\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\ndef compute():\n\tN = 20000000\n\tK = 15000000\n\tsmallestprimefactor = eulerlib.list_smallest_prime_factors(N)\n\t\n\tdef factorial_prime_factor_sum(n):\n\t\tresult = 0\n\t\tfor i in range(n + 1):\n\t\t\tj = i\n\t\t\twhile j > 1:\n\t\t\t\tp = smallestprimefactor[j]\n\t\t\t\tresult += p\n\t\t\t\tj //= p\n\t\treturn result\n\t\n\tans = factorial_prime_factor_sum(N) - factorial_prime_factor_sum(K) - factorial_prime_factor_sum(N - K)\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "7526965179680"}
{"number": 76, "problem": "<p>It is possible to write five as a sum in exactly six different ways:</p>\n\\begin{align}\n&amp;4 + 1\\\\\n&amp;3 + 2\\\\\n&amp;3 + 1 + 1\\\\\n&amp;2 + 2 + 1\\\\\n&amp;2 + 1 + 1 + 1\\\\\n&amp;1 + 1 + 1 + 1 + 1\n\\end{align}\n<p>How many different ways can one hundred be written as a sum of at least two positive integers?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 76\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tLIMIT = 100\n\tpartitions = []\n\tfor i in range(LIMIT + 1):\n\t\tpartitions.append([None] * (LIMIT + 1))\n\t\tfor j in reversed(range(LIMIT + 1)):\n\t\t\tif j == i:\n\t\t\t\tval = 1\n\t\t\telif j > i:\n\t\t\t\tval = 0\n\t\t\telif j == 0:\n\t\t\t\tval = partitions[i][j + 1]\n\t\t\telse:\n\t\t\t\tval = partitions[i][j + 1] + partitions[i - j][j]\n\t\t\tpartitions[i][j] = val\n\t\n\tans = partitions[LIMIT][1] - 1\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "190569291"}
{"number": 27, "problem": "<p>Euler discovered the remarkable quadratic formula:</p>\n<p class=\"center\">$n^2 + n + 41$</p>\n<p>It turns out that the formula will produce $40$ primes for the consecutive integer values $0 \\le n \\le 39$. However, when $n = 40, 40^2 + 40 + 41 = 40(40 + 1) + 41$ is divisible by $41$, and certainly when $n = 41, 41^2 + 41 + 41$ is clearly divisible by $41$.</p>\n<p>The incredible formula $n^2 - 79n + 1601$ was discovered, which produces $80$ primes for the consecutive values $0 \\le n \\le 79$. The product of the coefficients, $-79$ and $1601$, is $-126479$.</p>\n<p>Considering quadratics of the form:</p>\n<blockquote>\n$n^2 + an + b$, where $|a| &lt; 1000$ and $|b| \\le 1000$<br><br><div>where $|n|$ is the modulus/absolute value of $n$<br>e.g. $|11| = 11$ and $|-4| = 4$</div>\n</blockquote>\n<p>Find the product of the coefficients, $a$ and $b$, for the quadratic expression that produces the maximum number of primes for consecutive values of $n$, starting with $n = 0$.</p>\n", "solution": "# \n# Solution to Project Euler problem 27\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, itertools\n\n\ndef compute():\n\tans = max(((a, b) for a in range(-999, 1000) for b in range(2, 1000)),\n\t\tkey=count_consecutive_primes)\n\treturn str(ans[0] * ans[1])\n\n\ndef count_consecutive_primes(ab):\n\ta, b = ab\n\tfor i in itertools.count():\n\t\tn = i * i + i * a + b\n\t\tif not is_prime(n):\n\t\t\treturn i\n\n\nisprimecache = eulerlib.list_primality(1000)\n\ndef is_prime(n):\n\tif n < 0:\n\t\treturn False\n\telif n < len(isprimecache):\n\t\treturn isprimecache[n]\n\telse:\n\t\treturn eulerlib.is_prime(n)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "-59231"}
{"number": 345, "problem": "<p>We define the <dfn>Matrix Sum</dfn> of a matrix as the maximum possible sum of matrix elements such that none of the selected elements share the same row or column.</p>\n\n<p>For example, the Matrix Sum of the matrix below equals 3315 ( = 863 + 383 + 343 + 959 + 767):</p>\n\n<p style=\"text-align:center;font-family:'courier new';\">\n\u00a0\u00a07 \u00a053 183 439 <span style=\"color:#00ff00;font-family:'courier new';\"><b>863</b></span><br />\n497 <span style=\"color:#00ff00;font-family:'courier new';\"><b>383</b></span> 563 \u00a079 973<br />\n287 \u00a063 <span style=\"color:#00ff00;font-family:'courier new';\"><b>343</b></span> 169 583<br />\n627 343 773 <span style=\"color:#00ff00;font-family:'courier new';\"><b>959</b></span> 943<br /><span style=\"color:#00ff00;font-family:'courier new';\"><b>767</b></span> 473 103 699 303<br /></p>\n\n<p>\nFind the Matrix Sum of:<br /></p>\n<p style=\"text-align:center;font-family:'courier new';\">\n\u00a0\u00a07 \u00a053 183 439 863 497 383 563 \u00a079 973 287 \u00a063 343 169 583<br />\n627 343 773 959 943 767 473 103 699 303 957 703 583 639 913<br />\n447 283 463 \u00a029 \u00a023 487 463 993 119 883 327 493 423 159 743<br />\n217 623 \u00a0\u00a03 399 853 407 103 983 \u00a089 463 290 516 212 462 350<br />\n960 376 682 962 300 780 486 502 912 800 250 346 172 812 350<br />\n870 456 192 162 593 473 915 \u00a045 989 873 823 965 425 329 803<br />\n973 965 905 919 133 673 665 235 509 613 673 815 165 992 326<br />\n322 148 972 962 286 255 941 541 265 323 925 281 601 \u00a095 973<br />\n445 721 \u00a011 525 473 \u00a065 511 164 138 672 \u00a018 428 154 448 848<br />\n414 456 310 312 798 104 566 520 302 248 694 976 430 392 198<br />\n184 829 373 181 631 101 969 613 840 740 778 458 284 760 390<br />\n821 461 843 513 \u00a017 901 711 993 293 157 274 \u00a094 192 156 574<br />\n\u00a034 124 \u00a0\u00a04 878 450 476 712 914 838 669 875 299 823 329 699<br />\n815 559 813 459 522 788 168 586 966 232 308 833 251 631 107<br />\n813 883 451 509 615 \u00a077 281 613 459 205 380 274 302 \u00a035 805<br /></p>\n", "solution": "# \n# Solution to Project Euler problem 345\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\ndef compute():\n\t# Memoization\n\tmaxsum = [[None] * (2**COLUMNS) for _ in range(ROWS)]\n\t\n\t# Returns the maximum sum when considering the submatrix from row 'startrow' until the bottom,\n\t# with the bit set 'setofcols' indicating which column indexes are still free to be used.\n\tdef find_maximum_sum(startrow, setofcols):\n\t\tif startrow == ROWS:\n\t\t\tassert eulerlib.popcount(setofcols) == COLUMNS - ROWS\n\t\t\treturn 0\n\t\tif maxsum[startrow][setofcols] is None:\n\t\t\tresult = 0\n\t\t\tcol = 0\n\t\t\tbit = 1\n\t\t\twhile True:\n\t\t\t\tif bit > setofcols:\n\t\t\t\t\tbreak\n\t\t\t\tif setofcols & bit != 0:\n\t\t\t\t\tresult = max(MATRIX[startrow][col] + find_maximum_sum(startrow + 1, setofcols ^ bit), result)\n\t\t\t\tcol += 1\n\t\t\t\tbit <<= 1\n\t\t\tmaxsum[startrow][setofcols] = result\n\t\treturn maxsum[startrow][setofcols]\n\t\n\tans = find_maximum_sum(0, 2**COLUMNS - 1)\n\treturn str(ans)\n\n\nMATRIX = (\n\t(  7,  53, 183, 439, 863, 497, 383, 563,  79, 973, 287,  63, 343, 169, 583),\n\t(627, 343, 773, 959, 943, 767, 473, 103, 699, 303, 957, 703, 583, 639, 913),\n\t(447, 283, 463,  29,  23, 487, 463, 993, 119, 883, 327, 493, 423, 159, 743),\n\t(217, 623,   3, 399, 853, 407, 103, 983,  89, 463, 290, 516, 212, 462, 350),\n\t(960, 376, 682, 962, 300, 780, 486, 502, 912, 800, 250, 346, 172, 812, 350),\n\t(870, 456, 192, 162, 593, 473, 915,  45, 989, 873, 823, 965, 425, 329, 803),\n\t(973, 965, 905, 919, 133, 673, 665, 235, 509, 613, 673, 815, 165, 992, 326),\n\t(322, 148, 972, 962, 286, 255, 941, 541, 265, 323, 925, 281, 601,  95, 973),\n\t(445, 721,  11, 525, 473,  65, 511, 164, 138, 672,  18, 428, 154, 448, 848),\n\t(414, 456, 310, 312, 798, 104, 566, 520, 302, 248, 694, 976, 430, 392, 198),\n\t(184, 829, 373, 181, 631, 101, 969, 613, 840, 740, 778, 458, 284, 760, 390),\n\t(821, 461, 843, 513,  17, 901, 711, 993, 293, 157, 274,  94, 192, 156, 574),\n\t( 34, 124,   4, 878, 450, 476, 712, 914, 838, 669, 875, 299, 823, 329, 699),\n\t(815, 559, 813, 459, 522, 788, 168, 586, 966, 232, 308, 833, 251, 631, 107),\n\t(813, 883, 451, 509, 615,  77, 281, 613, 459, 205, 380, 274, 302,  35, 805),\n)\n\nROWS = len(MATRIX)\nCOLUMNS = len(MATRIX[0])\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "13938"}
{"number": 205, "problem": "<p>Peter has nine four-sided (pyramidal) dice, each with faces numbered $1, 2, 3, 4$.<br>\nColin has six six-sided (cubic) dice, each with faces numbered $1, 2, 3, 4, 5, 6$.</p>\n\n<p>Peter and Colin roll their dice and compare totals: the highest total wins. The result is a draw if the totals are equal.</p>\n\n<p>What is the probability that Pyramidal Peter beats Cubic Colin? Give your answer rounded to seven decimal places in the form 0.abcdefg.</p>\n", "solution": "# \n# Solution to Project Euler problem 205\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tnine_pyramidal_pdf = [1]\n\tPYRAMIDAL_DIE_PDF = [0, 1, 1, 1, 1]\n\tfor i in range(9):\n\t\tnine_pyramidal_pdf = convolve(nine_pyramidal_pdf, PYRAMIDAL_DIE_PDF)\n\t\n\tsix_cubic_pdf = [1]\n\tCUBIC_DIE_PDF = [0, 1, 1, 1, 1, 1, 1]\n\tfor i in range(6):\n\t\tsix_cubic_pdf = convolve(six_cubic_pdf, CUBIC_DIE_PDF)\n\t\n\tans = 0\n\tfor i in range(len(nine_pyramidal_pdf)):\n\t\tans += nine_pyramidal_pdf[i] * sum(six_cubic_pdf[ : i])\n\tans = float(ans) / (sum(nine_pyramidal_pdf) * sum(six_cubic_pdf))\n\treturn f\"{ans:.7f}\"\n\n\ndef convolve(a, b):\n\tc = [0] * (len(a) + len(b) - 1)\n\tfor i in range(len(a)):\n\t\tfor j in range(len(b)):\n\t\t\tc[i + j] += a[i] * b[j]\n\treturn c\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "0.5731441"}
{"number": 85, "problem": "<p>By counting carefully it can be seen that a rectangular grid measuring $3$ by $2$ contains eighteen rectangles:</p>\n<div class=\"center\">\n<img src=\"resources/images/0085.png?1678992052\" class=\"dark_img\" alt=\"\"></div>\n<p>Although there exists no rectangular grid that contains exactly two million rectangles, find the area of the grid with the nearest solution.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 85\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\ndef compute():\n\tTARGET = 2000000\n\tend = math.isqrt(TARGET) + 1\n\tgen = ((w, h) for w in range(1, end) for h in range(1, end))\n\tfunc = lambda wh: abs(num_rectangles(*wh) - TARGET)\n\tans = min(gen, key=func)\n\treturn str(ans[0] * ans[1])\n\n\ndef num_rectangles(m, n):\n\treturn (m + 1) * m * (n + 1) * n // 4  # A bit more than m^2 n^2 / 4\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "2772"}
{"number": 304, "problem": "<p>\nFor any positive integer $n$ the function $\\operatorname{next\\_prime}(n)$ returns the smallest prime $p$ such that $p \\gt n$.\n</p>\n<p>\nThe sequence $a(n)$ is defined by:<br>\n$a(1)=\\operatorname{next\\_prime}(10^{14})$ and $a(n)=\\operatorname{next\\_prime}(a(n-1))$ for $n \\gt 1$.\n</p>\n<p>\nThe Fibonacci sequence $f(n)$ is defined by:\n$f(0)=0$, $f(1)=1$ and $f(n)=f(n-1)+f(n-2)$ for $n \\gt 1$.\n</p>\n<p>\nThe sequence $b(n)$ is defined as $f(a(n))$.\n</p>\n<p>\nFind $\\sum b(n)$ for $1 \\le n \\le 100\\,000$. \nGive your answer mod $1234567891011$. \n</p>\n", "solution": "# \n# Solution to Project Euler problem 304\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, math\n\n\ndef compute():\n\tBASE = 10**14\n\tSEARCH_RANGE = 10000000  # Number of candidates starting from BASE to search for primes. Hopefully there are 100 000 primes among here.\n\tMODULUS = 1234567891011\n\t\n\t\n\t# iscomposite[i] pertains to the number BASE + i\n\t# Sieve of Eratosthenes, but starting at BASE\n\tiscomposite = [False] * SEARCH_RANGE\n\tprimes = eulerlib.list_primes(math.isqrt(BASE + SEARCH_RANGE))\n\tfor p in primes:\n\t\tfor i in range((BASE + p - 1) // p * p - BASE, len(iscomposite), p):\n\t\t\tiscomposite[i] = True\n\t\n\t# Returns p - BASE, where p is the next prime after n + BASE\n\tdef next_prime(n):\n\t\twhile True:\n\t\t\tn += 1\n\t\t\tif n >= len(iscomposite):\n\t\t\t\traise AssertionError(\"Search range exhausted\")\n\t\t\tif not iscomposite[n]:\n\t\t\t\treturn n\n\t\n\t\n\tans = 0\n\tp = 0\n\tfor i in range(100000):\n\t\tp = next_prime(p)\n\t\tans = (ans + fibonacci_mod(BASE + p, MODULUS)) % MODULUS\n\treturn str(ans)\n\n\ndef fibonacci_mod(n, mod):\n\ta, b = 0, 1\n\tbinary = bin(n)[2 : ]\n\tfor bit in binary:\n\t\ta, b = a * (b * 2 - a), a * a + b * b\n\t\tif bit == \"1\":\n\t\t\ta, b = b, a + b\n\t\ta %= mod\n\t\tb %= mod\n\treturn a\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "283988410192"}
{"number": 95, "problem": "<p>The proper divisors of a number are all the divisors excluding the number itself. For example, the proper divisors of $28$ are $1$, $2$, $4$, $7$, and $14$. As the sum of these divisors is equal to $28$, we call it a perfect number.</p>\n<p>Interestingly the sum of the proper divisors of $220$ is $284$ and the sum of the proper divisors of $284$ is $220$, forming a chain of two numbers. For this reason, $220$ and $284$ are called an amicable pair.</p>\n<p>Perhaps less well known are longer chains. For example, starting with $12496$, we form a chain of five numbers:\n$$12496 \\to 14288 \\to 15472 \\to 14536 \\to 14264 (\\to 12496 \\to \\cdots)$$</p>\n<p>Since this chain returns to its starting point, it is called an amicable chain.</p>\n<p>Find the smallest member of the longest amicable chain with no element exceeding one million.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 95\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\ndef compute():\n\tLIMIT = 10**6\n\t\n\t# divisorsum[n] is the sum of all the proper divisors of n\n\tdivisorsum = [0] * (LIMIT + 1)\n\tfor i in range(1, LIMIT + 1):\n\t\tfor j in range(i * 2, LIMIT + 1, i):\n\t\t\tdivisorsum[j] += i\n\t\n\t# Analyze the amicable chain length for each number in ascending order\n\tmaxchainlen = 0\n\tans = -1\n\tfor i in range(LIMIT + 1):\n\t\tvisited = set()\n\t\tcur = i\n\t\tfor count in itertools.count(1):\n\t\t\t# 'count' is the length of the this amicable chain\n\t\t\tvisited.add(cur)\n\t\t\tnext = divisorsum[cur]\n\t\t\tif next == i:\n\t\t\t\tif count > maxchainlen:\n\t\t\t\t\tans = i\n\t\t\t\t\tmaxchainlen = count\n\t\t\t\tbreak\n\t\t\t# Exceeds limit or not a chain (a rho shape instead)\n\t\t\telif next > LIMIT or next in visited:\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tcur = next\n\t\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "14316"}
{"number": 215, "problem": "<p>Consider the problem of building a wall out of $2 \\times 1$ and $3 \\times 1$ bricks ($\\text{horizontal} \\times \\text{vertical}$ dimensions) such that, for extra strength, the gaps between horizontally-adjacent bricks never line up in consecutive layers, i.e. never form a \"running crack\".</p>\n\n<p>For example, the following $9 \\times 3$ wall is not acceptable due to the running crack shown in red:</p>\n\n<div class=\"center\">\n<img src=\"resources/images/0215_crackfree.gif?1678992055\" class=\"dark_img\" alt=\"\"></div>\n\n<p>There are eight ways of forming a crack-free $9 \\times 3$ wall, written $W(9,3) = 8$.</p>\n\n<p>Calculate $W(32,10)$.</p>\n\n\n\n\n", "solution": "# \n# Solution to Project Euler problem 215\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tWIDTH = 32\n\tHEIGHT = 10\n\tcrackpositions = []\n\t\n\tdef get_crack_positions(cracks, position):\n\t\tif position < 0:\n\t\t\traise ValueError()\n\t\telif position < WIDTH:\n\t\t\tfor i in (2, 3):\n\t\t\t\tcracks.append(position + i)\n\t\t\t\tget_crack_positions(cracks, position + i)\n\t\t\t\tcracks.pop()\n\t\telif position == WIDTH:\n\t\t\tcrackpositions.append(frozenset(cracks[ : -1]))\n\t\telse:  # position > WIDTH\n\t\t\treturn\n\t\n\tget_crack_positions([], 0)\n\t\n\tnoncrackindices = [\n\t\t[i for (i, cp1) in enumerate(crackpositions) if cp0.isdisjoint(cp1)]\n\t\tfor cp0 in crackpositions]\n\t\n\tways = [1] * len(crackpositions)\n\tfor i in range(1, HEIGHT):\n\t\tnewways = [sum(ways[k] for k in nci) for nci in noncrackindices]\n\t\tways = newways\n\t\n\tans = sum(ways)\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "806844323190414"}
{"number": 37, "problem": "<p>The number $3797$ has an interesting property. Being prime itself, it is possible to continuously remove digits from left to right, and remain prime at each stage: $3797$, $797$, $97$, and $7$. Similarly we can work from right to left: $3797$, $379$, $37$, and $3$.</p>\n<p>Find the sum of the only eleven primes that are both truncatable from left to right and right to left.</p>\n<p class=\"smaller\">NOTE: $2$, $3$, $5$, and $7$ are not considered to be truncatable primes.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 37\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, itertools\n\n\ndef compute():\n\tans = sum(itertools.islice(filter(is_truncatable_prime, itertools.count(10)), 11))\n\treturn str(ans)\n\n\ndef is_truncatable_prime(n):\n\t# Test if left-truncatable\n\ti = 10\n\twhile i <= n:\n\t\tif not eulerlib.is_prime(n % i):\n\t\t\treturn False\n\t\ti *= 10\n\t\n\t# Test if right-truncatable\n\twhile n > 0:\n\t\tif not eulerlib.is_prime(n):\n\t\t\treturn False\n\t\tn //= 10\n\treturn True\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "748317"}
{"number": 66, "problem": "<p>Consider quadratic Diophantine equations of the form:\n$$x^2 - Dy^2 = 1$$</p>\n<p>For example, when $D=13$, the minimal solution in $x$ is $649^2 - 13 \\times 180^2 = 1$.</p>\n<p>It can be assumed that there are no solutions in positive integers when $D$ is square.</p>\n<p>By finding minimal solutions in $x$ for $D = \\{2, 3, 5, 6, 7\\}$, we obtain the following:</p>\n\\begin{align}\n3^2 - 2 \\times 2^2 &amp;= 1\\\\\n2^2 - 3 \\times 1^2 &amp;= 1\\\\\n{\\color{red}{\\mathbf 9}}^2 - 5 \\times 4^2 &amp;= 1\\\\\n5^2 - 6 \\times 2^2 &amp;= 1\\\\\n8^2 - 7 \\times 3^2 &amp;= 1\n\\end{align}\n<p>Hence, by considering minimal solutions in $x$ for $D \\le 7$, the largest $x$ is obtained when $D=5$.</p>\n<p>Find the value of $D \\le 1000$ in minimal solutions of $x$ for which the largest value of $x$ is obtained.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 66\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, fractions, math\n\n\n# Based on this insane theorem: Suppose D > 1 is an integer, non-perfect-square.\n# \n# Express sqrt(D) as the continued fraction (a0, a1, ..., a_{n-1}, (b0, b1, ..., b_{m-1})),\n# where the sequence of b's is the periodic part.\n# \n# Let p/q (in lowest terms) = (a0, a1, ..., a_{n-1}, b0, b1, ..., b_{m-2}).\n# (This is a truncation of the continued fraction with only one period minus the last term.)\n# \n# Then the minimum solution (x, y) for Pell's equation is given by:\n# - (p, q) if m is even\n# - (p^2 + D q^2, 2pq) if m is odd\ndef compute():\n\tans = max((n for n in range(2, 1001) if (not eulerlib.is_square(n))),\n\t\tkey=smallest_solution_x)\n\treturn str(ans)\n\n\n# Returns the smallest x such that x > 0 and there exists some y such that x^2 - n y^2 = 1.\n# Requires n to not be a perfect square.\ndef smallest_solution_x(n):\n\tcontfrac = sqrt_to_continued_fraction(n)\n\ttemp = contfrac[0] + contfrac[1][ : -1]\n\t\n\tval = fractions.Fraction(temp[-1], 1)\n\tfor term in reversed(temp[ : -1]):\n\t\tval = 1 / val + term\n\t\n\tif len(contfrac[1]) % 2 == 0:\n\t\treturn val.numerator\n\telse:\n\t\treturn val.numerator**2 + val.denominator**2 * n\n\n\n# Returns the periodic continued fraction of sqrt(n). Requires n to not be a perfect square.\n# result[0] is the minimal non-periodic prefix, and result[1] is the minimal periodic tail.\ndef sqrt_to_continued_fraction(n):\n\tterms = []\n\tseen = {}\n\tval = QuadraticSurd(0, 1, 1, n)\n\twhile True:\n\t\tseen[val] = len(seen)\n\t\tflr = val.floor()\n\t\tterms.append(flr)\n\t\tval = (val - QuadraticSurd(flr, 0, 1, val.d)).reciprocal()\n\t\tif val in seen:\n\t\t\tbreak\n\tsplit = seen[val]\n\treturn (terms[ : split], terms[split : ])\n\n\n\n# Represents (a + b * sqrt(d)) / c. d must not be a perfect square.\nclass QuadraticSurd:\n\t\n\tdef __init__(self, a, b, c, d):\n\t\tif c == 0:\n\t\t\traise ValueError()\n\t\t\n\t\t# Simplify\n\t\tif c < 0:\n\t\t\ta = -a\n\t\t\tb = -b\n\t\t\tc = -c\n\t\tgcd = math.gcd(a, b, c)\n\t\tif gcd != 1:\n\t\t\ta //= gcd\n\t\t\tb //= gcd\n\t\t\tc //= gcd\n\t\t\n\t\tself.a = a\n\t\tself.b = b\n\t\tself.c = c\n\t\tself.d = d\n\t\n\t\n\tdef __sub__(self, other):\n\t\tif self.d != other.d:\n\t\t\traise ValueError()\n\t\treturn QuadraticSurd(\n\t\t\tself.a * other.c - other.a * self.c,\n\t\t\tself.b * other.c - other.b * self.c,\n\t\t\tself.c * other.c,\n\t\t\tself.d)\n\t\n\t\n\tdef reciprocal(self):\n\t\treturn QuadraticSurd(\n\t\t\t-self.a * self.c,\n\t\t\tself.b * self.c,\n\t\t\tself.b * self.b * self.d - self.a * self.a,\n\t\t\tself.d)\n\t\n\t\n\tdef floor(self):\n\t\ttemp = math.isqrt(self.b * self.b * self.d)\n\t\tif self.b < 0:\n\t\t\ttemp = -(temp + 1)\n\t\ttemp += self.a\n\t\tif temp < 0:\n\t\t\ttemp -= self.c - 1\n\t\treturn temp // self.c\n\t\n\t\n\tdef __eq__(self, other):\n\t\treturn self.a == other.a and self.b == other.b \\\n\t\t   and self.c == other.c and self.d == other.d\n\t\n\tdef __ne__(self, other):\n\t\treturn not (self == other)\n\t\n\t\n\tdef __hash__(self):\n\t\treturn hash(self.a) + hash(self.b) + hash(self.c) + hash(self.d)\n\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "661"}
{"number": 52, "problem": "<p>It can be seen that the number, $125874$, and its double, $251748$, contain exactly the same digits, but in a different order.</p>\n<p>Find the smallest positive integer, $x$, such that $2x$, $3x$, $4x$, $5x$, and $6x$, contain the same digits.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 52\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\ndef compute():\n\tcond = lambda i: all(sorted(str(i)) == sorted(str(j * i)) for j in range(2, 7))\n\tans = next(i for i in itertools.count(1) if cond(i))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "142857"}
{"number": 112, "problem": "<p>Working from left-to-right if no digit is exceeded by the digit to its left it is called an increasing number; for example, $134468$.</p>\n<p>Similarly if no digit is exceeded by the digit to its right it is called a decreasing number; for example, $66420$.</p>\n<p>We shall call a positive integer that is neither increasing nor decreasing a \"bouncy\" number; for example, $155349$.</p>\n<p>Clearly there cannot be any bouncy numbers below one-hundred, but just over half of the numbers below one-thousand ($525$) are bouncy. In fact, the least number for which the proportion of bouncy numbers first reaches $50\\%$ is $538$.</p>\n<p>Surprisingly, bouncy numbers become more and more common and by the time we reach $21780$ the proportion of bouncy numbers is equal to $90\\%$.</p>\n<p>Find the least number for which the proportion of bouncy numbers is exactly $99\\%$.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 112\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\ndef compute():\n\tcount = 0\n\tfor i in itertools.count(1):\n\t\ts = str(i)\n\t\tt = \"\".join(sorted(s))\n\t\tif s != t and s[ : : -1] != t:\n\t\t\tcount += 1  # i is bouncy\n\t\tif count * 100 == 99 * i:\n\t\t\treturn str(i)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1587000"}
{"number": 3, "problem": "<p>The prime factors of $13195$ are $5, 7, 13$ and $29$.</p>\n<p>What is the largest prime factor of the number $600851475143$?</p>\n\n\n", "solution": "# \n# Solution to Project Euler problem 3\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\n# By the fundamental theorem of arithmetic, every integer n > 1 has a unique factorization as a product of prime numbers.\n# In other words, the theorem says that n = p_0 * p_1 * ... * p_{m-1}, where each p_i > 1 is prime but not necessarily unique.\n# Now if we take the number n and repeatedly divide out its smallest factor (which must also be prime), then the last\n# factor that we divide out must be the largest prime factor of n. For reference, 600851475143 = 71 * 839 * 1471 * 6857.\ndef compute():\n\tn = 600851475143\n\twhile True:\n\t\tp = smallest_prime_factor(n)\n\t\tif p < n:\n\t\t\tn //= p\n\t\telse:\n\t\t\treturn str(n)\n\n\n# Returns the smallest factor of n, which is in the range [2, n]. The result is always prime.\ndef smallest_prime_factor(n):\n\tassert n >= 2\n\tfor i in range(2, math.isqrt(n) + 1):\n\t\tif n % i == 0:\n\t\t\treturn i\n\treturn n  # n itself is prime\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "6857"}
{"number": 12, "problem": "<p>The sequence of triangle numbers is generated by adding the natural numbers. So the $7$<sup>th</sup> triangle number would be $1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$. The first ten terms would be:\n$$1, 3, 6, 10, 15, 21, 28, 36, 45, 55, \\dots$$</p>\n<p>Let us list the factors of the first seven triangle numbers:</p>\n\\begin{align}\n\\mathbf 1 &amp;\\colon 1\\\\\n\\mathbf 3 &amp;\\colon 1,3\\\\\n\\mathbf 6 &amp;\\colon 1,2,3,6\\\\\n\\mathbf{10} &amp;\\colon 1,2,5,10\\\\\n\\mathbf{15} &amp;\\colon 1,3,5,15\\\\\n\\mathbf{21} &amp;\\colon 1,3,7,21\\\\\n\\mathbf{28} &amp;\\colon 1,2,4,7,14,28\n\\end{align}\n<p>We can see that $28$ is the first triangle number to have over five divisors.</p>\n<p>What is the value of the first triangle number to have over five hundred divisors?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 12\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools, math\n\n\ndef compute():\n\ttriangle = 0\n\tfor i in itertools.count(1):\n\t\ttriangle += i  # This is the ith triangle number, i.e. num = 1 + 2 + ... + i = i * (i + 1) / 2\n\t\tif num_divisors(triangle) > 500:\n\t\t\treturn str(triangle)\n\n\n# Returns the number of integers in the range [1, n] that divide n.\ndef num_divisors(n):\n\tend = math.isqrt(n)\n\tresult = sum(2\n\t\tfor i in range(1, end + 1)\n\t\tif n % i == 0)\n\tif end**2 == n:\n\t\tresult -= 1\n\treturn result\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "76576500"}
{"number": 103, "problem": "<p>Let $S(A)$ represent the sum of elements in set $A$ of size $n$. We shall call it a special sum set if for any two non-empty disjoint subsets, $B$ and $C$, the following properties are true:</p>\n<ol><li>$S(B) \\ne S(C)$; that is, sums of subsets cannot be equal.</li>\n<li>If $B$ contains more elements than $C$ then $S(B) \\gt S(C)$.</li>\n</ol><p>If $S(A)$ is minimised for a given $n$, we shall call it an optimum special sum set. The first five optimum special sum sets are given below.</p>\n<ul style=\"list-style-type:none;\">\n<li>$n = 1$: $\\{1\\}$</li>\n<li>$n = 2$: $\\{1, 2\\}$</li>\n<li>$n = 3$: $\\{2, 3, 4\\}$</li>\n<li>$n = 4$: $\\{3, 5, 6, 7\\}$</li>\n<li>$n = 5$: $\\{6, 9, 11, 12, 13\\}$</li></ul>\n<p>It <i>seems</i> that for a given optimum set, $A = \\{a_1, a_2, \\dots, a_n\\}$, the next optimum set is of the form $B = \\{b, a_1 + b, a_2 + b, \\dots, a_n + b\\}$, where $b$ is the \"middle\" element on the previous row.</p>\n<p>By applying this \"rule\" we would expect the optimum set for $n = 6$ to be $A = \\{11, 17, 20, 22, 23, 24\\}$, with $S(A) = 117$. However, this is not the optimum set, as we have merely applied an algorithm to provide a near optimum set. The optimum set for $n = 6$ is $A = \\{11, 18, 19, 20, 22, 25\\}$, with $S(A) = 115$ and corresponding set string: 111819202225.</p>\n<p>Given that $A$ is an optimum special sum set for $n = 7$, find its set string.</p>\n<p class=\"smaller\"></p>\n", "solution": "# \n# Solution to Project Euler problem 103\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# We start with three pedantic lemmas to constrain the nature of possible solutions.\n# \n# No-zero lemma:\n#   A special sum set (SSS) should not contain the value 0. The problem statement\n#   doesn't say this explicitly, but it is implied in the numerical examples.\n# Proof:\n#   - For size n = 0, {} technically qualifies as an SSS, and is trivially optimum.\n#     But the problem statement does not mention the n = 0 case at all.\n#   - For size n = 1, {0} has sum 0, which is better than the SSS {1} given in the\n#     problem statement, yet this violates no properties. Even though the subsets\n#     {} and {0} have the same sum of 0, the properties only apply to non-empty subsets.\n#   - For size n = 2, {0,1} has sum 1, which is better than the SSS {1,2} given in\n#     the problem statement, yet this still violates no properties. There is exactly\n#     one possible pair of non-empty disjoint subsets, namely {0} vs. {1}, and\n#     this pair satisfies both properties.\n#   - For sizes n >= 3, having 0 in the set would violate property (ii) for the pair of\n# \tsubsets {0,a} and {b}, where 0 and a and b are distinct elements of the set and a < b.\n#   Hence for 0 <= n <= 2, allowing 0 would produce a more optimum solution than the\n#   examples given in the problem statement, and for n >= 3 an SSS can never contain 0.\n# \n# As for negative numbers, the intent of the problem statement readily suggests that elements\n# are never negative. Furthermore, having negative numbers in a set would either affect the\n# sum by only a small amount or violate property (ii), making the problem uninteresting.\n# \n# Upper bound lemma:\n#   For each natural number n >= 0, there exists a special sum set\n#   whose size is n and whose sum is (n + 1) * 2^n - 1.\n# Proof:\n#   - For each index i (counting from 0), let element i equal 2^n + 2^i.\n#   - The sum of all the elements is (2^n + 2^0) + (2^n + 2^1) + ... + (2^n + 2^(n-1))\n#     = n * 2^n + (2^0 + 2^1 + ... + 2^(n-1)) = n * 2^n + 2^n - 1 = (n + 1) * 2^n - 1.\n#   - For example with n = 4, the elements expressed in binary are {10001,\n#     10010, 10100, 11000}. Their sum is 1001111 (binary) = 79 (decimal).\n#   - Notice that when summing a subset of (distinct) elements, the bottom n bits\n#     never produce a carry. This means the bottom n bits behave like a set union,\n#     and the activity in the bottom n bits never affect the 2^n term or above.\n#   - Property (i) is satisfied because for any subset B, the bottommost n bits of S(B)\n#     encode which elements are present. Thus any two unequal subsets will have unequal sums.\n#   - Property (ii) is satisfied because for any subset B, the value floor(S(B) / 2^n)\n#     (i.e. dropping the bottommost n bits) encodes the size of B.\n# Corollaries:\n#   - For any given upper bound, there are a finite number of {{sets of positive integers}\n#     whose sum doesn't exceed the upper bound}. Thus once we find an SSS with a certain sum,\n#     we can argue by finite search that there must exist an optimum SSS whose sum is\n#     less than or equal to the aforementioned sum.\n#   - For size 7, we know there exists an SSS of sum exactly (7 + 1) * 2^7 - 1 = 1023.\n#     Hence we don't need to search any larger sums.\n# \n# Lower bound lemma:\n#   For each n >= 3, each special sum set of size n must have sum at least 2^n.\n# Proof:\n#   - A set of size n has exactly 2^n - 1 non-empty subsets\n#     (the kind relevant to the problem statement).\n#   - Because all elements are positive integers, the lowest possible\n#     subset sum is 1, and the highest sum is the sum of all elements.\n#   - To satisfy property (i) and give each non-empty subset a unique sum, the\n#     set of sums with the smallest maximum value is {1, 2, 3, ..., 2^n - 1}.\n#   - To achieve the aforementioned set of subset sums using positive elements,\n#     the one and only solution is the set {1, 2, 4, 8, ..., 2^(n-1)}.\n#   - But for n >= 3, the pair of subsets {1,2} and {4} violates property (ii).\n#   - Hence the set cannot have sum 2^n - 1. It must have a sum of at least 2^n.\n# Corollary:\n#   We can begin searching for an optimum SSS with the initial maximum sum set to 2^n.\ndef compute():\n\tTARGET_SIZE = 7\n\t\n\t# At the top level, we try larger and smaller values of s until we find the smallest value\n\t# of s such that there exists a special sum set with sum at most s. As long as no solution\n\t# exists when the sum is at most s - 1, it means that the optimum set's sum is exactly s.\n\t\n\t# First we try maxsum = 1, 2, 4, 8, ..., doubling the maximum sum until we find a solution.\n\tmaxsum = 1\n\twhile SpecialSumSet.make_set(TARGET_SIZE, maxsum) is None:\n\t\tmaxsum *= 2\n\t# Now we know that there must be a special sum set whose sum is at most\n\t# maxsum, and also that no solution exists for maxsum / 2.\n\t\n\t# Perform a kind of binary search to decrease maxsum to the optimal value.\n\t# For example, if maxsum = 256, then we know that a solution exists for\n\t# maxsum = 256 but no solution exists for maxsum = 128. We don't know if\n\t# maxsum = 129, 130, ..., 255 will yield solutions. We first try maxsum\n\t# = 256 - 64, and depending on whether a solution exists, we eliminate\n\t# either the bottom half of the search range or the top half. Then we\n\t# try smaller steps, and stop after handling a step size of 1.\n\ti = maxsum // 4\n\twhile i > 0:\n\t\tmaxsum -= i\n\t\tif SpecialSumSet.make_set(TARGET_SIZE, maxsum) is None:\n\t\t\tmaxsum += i\n\t\ti //= 2\n\t\n\tset = SpecialSumSet.make_set(TARGET_SIZE, maxsum)  # Must be not None\n\treturn \"\".join(map(str, set.values))\n\n\n\n# This helper class represents a finite sequence of distinct positive integers\n# that satisfies properties (i) and (ii) given in the problem statement.\n# Objects of the class are immutable. Objects also keep track of extra data to\n# make it easier to check if adding a new element would violate the properties,\n# without explicitly checking every non-empty disjoint subset pair by brute force.\nclass SpecialSumSet:\n\t\n\t# Returns the lexicographically lowest special sum set with the given size\n\t# and with a sum of at most maximumsum, or None if no such set exists.\n\t@staticmethod\n\tdef make_set(targetsize, maximumsum):\n\t\treturn SpecialSumSet._make_set(SpecialSumSet([], [True], [0], [0]), targetsize, maximumsum, 1)\n\t\n\t\n\t# Returns the lexicographically lowest special sum set by adding exactly sizeremain elements\n\t# to the given set, such that the sum of the additional elements is at most sumremain,\n\t# and the next element to be added is at least startval. Returns None if no such set exists.\n\t@staticmethod\n\tdef _make_set(set, sizeremain, sumremain, startval):\n\t\t# In summary, this procedure takes a partial answer (prefix) and some parameters,\n\t\t# and tries to extend the answer by performing depth-first search through recursion.\n\t\t\n\t\tif sizeremain == 0:  # Base case - success\n\t\t\treturn set\n\t\t\n\t\t# Optimization: If we still need to add at least 2 elements, then the next element\n\t\t# will be at least startval, the one after will be at least startval + 1,\n\t\t# thereafter is at least startval + 2, et cetera. The sum of the elements\n\t\t# to be added is strictly greater than startval * sizeremain, which we can\n\t\t# check against sumremain and bail out early if a solution is impossible.\n\t\tif sizeremain >= 2 and startval * sizeremain >= sumremain:\n\t\t\treturn None\n\t\t\n\t\tendval = sumremain\n\t\t# Optimization: If the partial set has at least two elements a and b, then by the\n\t\t# property (ii), S({a, b}) = a + b must be greater than any single element of the set.\n\t\t# We use the foremost two elements, which have the smallest values - this makes\n\t\t# endval as small and restrictive as possible compared to other choices of elements.\n\t\tif len(set.values) >= 2:\n\t\t\tendval = min(set.values[0] + set.values[1] - 1, endval)\n\t\t\n\t\t# Consider each possible value for the next element\n\t\tfor val in range(startval, endval + 1):\n\t\t\t# Try adding the value and see if any property is violated\n\t\t\ttemp = set.add(val)\n\t\t\tif temp is None:\n\t\t\t\tcontinue\n\t\t\t\n\t\t\t# Recurse and see if a solution is found down the call tree\n\t\t\ttemp = SpecialSumSet._make_set(temp, sizeremain - 1, sumremain - val, val + 1)\n\t\t\tif temp is not None:\n\t\t\t\treturn temp\n\t\treturn None  # No solution for the given current state\n\t\n\t\n\t# Internal constructor. The contents of the given list objects must not change.\n\tdef __init__(self, vals, sumposb, minsum, maxsum):\n\t\t# Note: All fields are conceptually immutable\n\t\t\n\t\t# Positive numbers in strict ascending order. Length 0 or more.\n\t\tself.values = vals\n\t\t\n\t\t# For indexes i from 0 to sum(values) inclusive, sumpossible[i]\n\t\t# is true iff there exists a subset of 'values' whose sum is i.\n\t\tself.sumpossible = sumposb\n\t\t\n\t\t# For i from 0 to len(values) (inclusive), minimumsum[i] is the minimum sum\n\t\t# among all possible subsets of 'values' of size i, and likewise for maximumsum[i].\n\t\tself.minimumsum = minsum\n\t\tself.maximumsum = maxsum\n\t\n\t\n\t# Attempts to add the given value to this set, returning a new set\n\t# if successful. Otherwise returns None if any property is violated.\n\tdef add(self, val):\n\t\t# Simple checks on the value\n\t\tif val <= 0:\n\t\t\traise ValueError(\"Value must be positive\")\n\t\tsize = len(self.values)\n\t\tif size >= 1 and val <= self.values[-1]:\n\t\t\traise ValueError(\"Must add values in ascending order\")\n\t\t\n\t\t# Check if adding val to any subset of this set would create a duplicate sum\n\t\tposb = self.sumpossible\n\t\tif any((posb[i] and posb[i - val]) for i in range(val, len(posb))):\n\t\t\treturn None\n\t\t\n\t\t# Compute minimum and maximum sums for each subset size, with help from old data.\n\t\t# The idea is that by introducing the new value val, each subset of the new set\n\t\t# either contains val or doesn't. All old subsets are still possible, so we copy\n\t\t# the old tables of minima and maxima. Each new subset contains val plus an old subset\n\t\t# (possibly empty). Hence we look at the existing minima and maxima, add val to the sum,\n\t\t# add 1 to the size, and merge the values into the table of minima and maxima.\n\t\tnewsize = size + 1\n\t\tminsum = self.minimumsum\n\t\tmaxsum = self.maximumsum\n\t\tnewmin = [0] + [min(minsum[i], minsum[i - 1] + val) for i in range(1, newsize)] + [minsum[size] + val]\n\t\tnewmax = [0] + [max(maxsum[i], maxsum[i - 1] + val) for i in range(1, newsize)] + [maxsum[size] + val]\n\t\t\n\t\t# Check iff property (ii) '|B| > |C| implies S(B) > S(C)' is violated\n\t\tif any((newmax[i] >= newmin[i + 1]) for i in range(newsize)):\n\t\t\treturn None\n\t\t\n\t\t# Compute all possible new subset sums, with help from old data. This is the\n\t\t# classic table-based algorithm for solving the subset sum or knapsack problem.\n\t\tnewposb = posb + [False] * val\n\t\tfor i in reversed(range(val, len(newposb))):\n\t\t\tnewposb[i] |= newposb[i - val]\n\t\t\n\t\t# Append given value to the new set\n\t\treturn SpecialSumSet(self.values + [val], newposb, newmin, newmax)\n\t\n\t# An illustrative example for SpecialSumSet and add():\n\t# \n\t# Suppose our current set is {3, 5, 6}. All its subsets and their sums are:\n\t# - S({}) = 0.\n\t# - S({3}) = 3.\n\t# - S({5}) = 5.\n\t# - S({6}) = 6.\n\t# - S({3, 5}) = 8.\n\t# - S({3, 6}) = 9.\n\t# - S({5, 6}) = 11.\n\t# - S({3, 5, 6}) = 14.\n\t# \n\t# Therefore, the data arrays have the following values:\n\t# - sumpossible = [T, F, F, T, F, T, T, F, T, T,  F,  T,  F,  F,  T].\n\t#   (Sum legend:   0  1  2  3  4  5  6  7  8  9  10  11  12  13  14)\n\t# - minimumsums = [0, 3,  8, 14].\n\t# - maximumsums = [0, 6, 11, 14].\n\t# - (Size legend:  0  1   2   3)\n\t# \n\t# Now suppose we want to add the value 7 to the set. Here is what happens:\n\t# - First we check that in sumpossible, no pair of 'true' elements are\n\t#   separated by a distance of 7. This ensures that if we take any particular\n\t#   subset and add 7 to it, its sum won't equal another existing subset sum.\n\t# - Let the new set S' = S union {7} = {3, 5, 6, 7}. What are\n\t#   the minimum and maximum subset sums for each subset size k?\n\t#   - If k = 0, the min and max are both clearly 0.\n\t#   - If k = |S| = 4, then min and max are the sum of all elements, thus 21.\n\t#   - Otherwise with k > 0, consider an arbitrary subset A of S' where |A| = k.\n\t#     - If A does not contain 7, then A is a subset of S, so A's\n\t#       minimum sum is minimumsums[k] and A's maximum sum is maximumsums[k].\n\t#     - Otherwise split A = {7} union B, where B does not contain 7.\n\t#       B is a subset of S, and |B| = k - 1. So A's minimum sum is\n\t#       7 + minimumsums[k - 1], and A's maximum sum is 7 + maximumsums[k - 1].\n\t#     Hence newminimumsums[k] = min(minimumsums[k], 7 + minimumsums[k - 1]),\n\t#     and newmaximumsums[k] = max(maximumsums[k], 7 + maximumsums[k - 1]).\n\t#   For each size k that is not out of bounds, if maximumsums[k] >= minimumsums[k + 1],\n\t#   then there exists some set of size k with some set of size k + 1 fails property (ii).\n\t#   Otherwise property (ii) is upheld in all subset pairs (including empty subsets).\n\t# - Finally, we compute the new sumpossible table (which is guaranteed to\n\t#   have no conflicts), and finish creating the new set with the added element.\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "20313839404245"}
{"number": 43, "problem": "<p>The number, $1406357289$, is a $0$ to $9$ pandigital number because it is made up of each of the digits $0$ to $9$ in some order, but it also has a rather interesting sub-string divisibility property.</p>\n<p>Let $d_1$ be the $1$<sup>st</sup> digit, $d_2$ be the $2$<sup>nd</sup> digit, and so on. In this way, we note the following:</p>\n<ul><li>$d_2d_3d_4=406$ is divisible by $2$</li>\n<li>$d_3d_4d_5=063$ is divisible by $3$</li>\n<li>$d_4d_5d_6=635$ is divisible by $5$</li>\n<li>$d_5d_6d_7=357$ is divisible by $7$</li>\n<li>$d_6d_7d_8=572$ is divisible by $11$</li>\n<li>$d_7d_8d_9=728$ is divisible by $13$</li>\n<li>$d_8d_9d_{10}=289$ is divisible by $17$</li>\n</ul><p>Find the sum of all $0$ to $9$ pandigital numbers with this property.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 43\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\ndef compute():\n\tans = sum(int(\"\".join(map(str, num)))\n\t\tfor num in itertools.permutations(list(range(10)))\n\t\tif is_substring_divisible(num))\n\treturn str(ans)\n\n\nDIVISIBILITY_TESTS = [2, 3, 5, 7, 11, 13, 17]\n\ndef is_substring_divisible(num):\n\treturn all((num[i + 1] * 100 + num[i + 2] * 10 + num[i + 3]) % p == 0\n\t\tfor (i, p) in enumerate(DIVISIBILITY_TESTS))\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "16695334890"}
{"number": 77, "problem": "<p>It is possible to write ten as the sum of primes in exactly five different ways:</p>\n\\begin{align}\n&amp;7 + 3\\\\\n&amp;5 + 5\\\\\n&amp;5 + 3 + 2\\\\\n&amp;3 + 3 + 2 + 2\\\\\n&amp;2 + 2 + 2 + 2 + 2\n\\end{align}\n<p>What is the first value which can be written as the sum of primes in over five thousand different ways?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 77\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, itertools\n\n\ndef compute():\n\tcond = lambda n: num_prime_sum_ways(n) > 5000\n\tans = next(filter(cond, itertools.count(2)))\n\treturn str(ans)\n\n\nprimes = [2]\n\ndef num_prime_sum_ways(n):\n\tfor i in range(primes[-1] + 1, n + 1):\n\t\tif eulerlib.is_prime(i):\n\t\t\tprimes.append(i)\n\t\n\tways = [1] + [0] * n\n\tfor p in primes:\n\t\tfor i in range(n + 1 - p):\n\t\t\tways[i + p] += ways[i]\n\treturn ways[n]\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "71"}
{"number": 26, "problem": "<p>A unit fraction contains $1$ in the numerator. The decimal representation of the unit fractions with denominators $2$ to $10$ are given:</p>\n\\begin{align}\n1/2 &amp;= 0.5\\\\\n1/3 &amp;=0.(3)\\\\\n1/4 &amp;=0.25\\\\\n1/5 &amp;= 0.2\\\\\n1/6 &amp;= 0.1(6)\\\\\n1/7 &amp;= 0.(142857)\\\\\n1/8 &amp;= 0.125\\\\\n1/9 &amp;= 0.(1)\\\\\n1/10 &amp;= 0.1\n\\end{align}\n<p>Where $0.1(6)$ means $0.166666\\cdots$, and has a $1$-digit recurring cycle. It can be seen that $1/7$ has a $6$-digit recurring cycle.</p>\n<p>Find the value of $d \\lt 1000$ for which $1/d$ contains the longest recurring cycle in its decimal fraction part.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 26\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\ndef compute():\n\tans = max(range(1, 1000), key=reciprocal_cycle_len)\n\treturn str(ans)\n\n\ndef reciprocal_cycle_len(n):\n\tseen = {}\n\tx = 1\n\tfor i in itertools.count():\n\t\tif x in seen:\n\t\t\treturn i - seen[x]\n\t\telse:\n\t\t\tseen[x] = i\n\t\t\tx = x * 10 % n\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "983"}
{"number": 166, "problem": "<p>A $4 \\times 4$ grid is filled with digits $d$, $0 \\le d \\le 9$.</p>\n\n<p>It can be seen that in the grid\n\\begin{matrix}\n6 &amp; 3 &amp; 3 &amp; 0\\\\\n5 &amp; 0 &amp; 4 &amp; 3\\\\\n0 &amp; 7 &amp; 1 &amp; 4\\\\\n1 &amp; 2 &amp; 4 &amp; 5\n\\end{matrix}\nthe sum of each row and each column has the value $12$. Moreover the sum of each diagonal is also $12$.</p>\n\n<p>In how many ways can you fill a $4 \\times 4$ grid with the digits $d$, $0 \\le d \\le 9$ so that each row, each column, and both diagonals have the same sum?</p>\n", "solution": "# \n# Solution to Project Euler problem 166\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# Give variables to the grid cells like this:\n#   [ a b c d ]\n#   [ e f g h ]\n#   [ i j k l ]\n#   [ m n o p ]\n# There are 10 four-element lines in the grid. Assume each line has a sum of s.\n# We write 9 equations to equate the first row's sum with each other line's sum:\n#   a + b + c + d  =  e + f + g + h.  (1st row = 2nd row)\n#   a + b + c + d  =  i + j + k + l.  (1st row = 3rd row)\n#   a + b + c + d  =  m + n + o + p.  (1st row = 4th row)\n#   a + b + c + d  =  a + e + i + m.  (1st row = 1st column)\n#   a + b + c + d  =  b + f + j + n.  (1st row = 2nd column)\n#   a + b + c + d  =  c + g + k + o.  (1st row = 3rd column)\n#   a + b + c + d  =  d + h + l + p.  (1st row = 4th column)\n#   a + b + c + d  =  a + f + k + p.  (1st row = diagonal)\n#   a + b + c + d  =  d + g + j + m.  (1st row = antidiagonal)\n# Actually only 8 of these equations are linearly independent.\n# So with 16 variables and 8 equations, we have 8 free variables.\n# Suppose we know the values of {a,b,c,d,e,g,i,k}. We perform some algebra:\n#   m = b + c + d - e - i.  (based on 1st column)\n#   o = a + b + d - g - k.  (based on 3rd column)\n#   j = a + b + c - g - m.  (based on antidiagonal)\n#   l = a + b + c + d - i - j - k.  (based on 3rd row)\n# Now comes a difficult step. We need to solve a full system of linear equations to get the rest of the values.\n# Here I state the result for f and show its correctness, but not explain how the solution was found:\n#   - 1 (a + b + c + d)     - 1 (m + n + o + p)\n#   + 2 (a + b + c + d)     + 2 (a + e + i + m)\n#   + 1 (a + b + c + d)  =  + 1 (b + f + j + n)  .\n#   + 1 (a + b + c + d)     + 1 (c + g + k + o)\n#   + 1 (a + b + c + d)     + 1 (a + f + k + p)\n#   - 1 (a + b + c + d)     - 1 (d + g + j + m)\n# Adding up all terms on the left side and on the right side, and simplifying, we get:\n#   3(a + b + c + d) = 3a + 2e + 2i + b + 2f + c + 2k - d.\n#   f = b + c + 2d - e - i - k.\n# The rest of the way is smooth sailing:\n#   h = a + b + c + d - e - f - g.  (based on 2nd row)\n#   n = a + c + d - f - j.  (based on 2nd column)\n#   p = a + b + c - h - l.  (based on 4th column)\ndef compute():\n\tans = 0\n\tdigits = tuple(range(10))\n\tfor b in digits:\n\t\tfor c in digits:\n\t\t\tfor d in digits:\n\t\t\t\tfor e in digits:\n\t\t\t\t\tfor i in digits:\n\t\t\t\t\t\tm = b + c + d - e - i\n\t\t\t\t\t\tif m < 0 or m > 9: continue\n\t\t\t\t\t\tfor k in digits:\n\t\t\t\t\t\t\tf = b + c + d*2 - e - i - k\n\t\t\t\t\t\t\tif f < 0 or f > 9: continue\n\t\t\t\t\t\t\tfor a in digits:\n\t\t\t\t\t\t\t\tfor g in digits:\n\t\t\t\t\t\t\t\t\to = a + b + d - g - k\n\t\t\t\t\t\t\t\t\tif o < 0 or o > 9: continue\n\t\t\t\t\t\t\t\t\tj = a + b + c - g - m\n\t\t\t\t\t\t\t\t\tif j < 0 or j > 9: continue\n\t\t\t\t\t\t\t\t\tl = a + b + c + d - i - j - k\n\t\t\t\t\t\t\t\t\tif l < 0 or l > 9: continue\n\t\t\t\t\t\t\t\t\th = a + b + c + d - e - f - g\n\t\t\t\t\t\t\t\t\tif h < 0 or h > 9: continue\n\t\t\t\t\t\t\t\t\tn = a + c + d - f - j\n\t\t\t\t\t\t\t\t\tif n < 0 or n > 9: continue\n\t\t\t\t\t\t\t\t\tp = a + b + c - h - l\n\t\t\t\t\t\t\t\t\tif p < 0 or p > 9: continue\n\t\t\t\t\t\t\t\t\tans += 1\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "7130034"}
{"number": 204, "problem": "<p>A Hamming number is a positive number which has no prime factor larger than $5$.<br>\nSo the first few Hamming numbers are $1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15$.<br>\nThere are $1105$ Hamming numbers not exceeding $10^8$.</p>\n\n<p>We will call a positive number a generalised Hamming number of type $n$, if it has no prime factor larger than $n$.<br>\nHence the Hamming numbers are the generalised Hamming numbers of type $5$.</p>\n\n<p>How many generalised Hamming numbers of type $100$ are there which don't exceed $10^9$?</p>\n", "solution": "# \n# Solution to Project Euler problem 204\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\ndef compute():\n\tLIMIT = 10**9\n\tprimes = eulerlib.list_primes(100)\n\t\n\tdef count(primeindex, product):\n\t\tif primeindex == len(primes):\n\t\t\treturn 1 if product <= LIMIT else 0\n\t\telse:\n\t\t\tresult = 0\n\t\t\twhile product <= LIMIT:\n\t\t\t\tresult += count(primeindex + 1, product)\n\t\t\t\tproduct *= primes[primeindex]\n\t\t\treturn result\n\t\n\treturn str(count(0, 1))\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "2944730"}
{"number": 315, "problem": "<p></p><div align=\"center\"><img src=\"resources/images/0315_clocks.gif?1678992056\" alt=\"0315_clocks.gif\"></div>\n\n<p>Sam and Max are asked to transform two digital clocks into two \"digital root\" clocks.<br>\nA digital root clock is a digital clock that calculates digital roots step by step.</p>\n\n<p>When a clock is fed a number, it will show it and then it will start the calculation, showing all the intermediate values until it gets to the result.<br>\nFor example, if the clock is fed the number 137, it will show: \"<b>137</b>\" \u2192 \"<b>11</b>\" \u2192 \"<b>2</b>\" and then it will go black, waiting for the next number.</p>\n\n<p>Every digital number consists of some light segments: three horizontal (top, middle, bottom) and four vertical (top-left, top-right, bottom-left, bottom-right).<br>\nNumber \"<b>1</b>\" is made of vertical top-right and bottom-right, number \"<b>4</b>\" is made by middle horizontal and vertical top-left, top-right and bottom-right. Number \"<b>8</b>\" lights them all.</p>\n\n<p>The clocks consume energy only when segments are turned on/off.<br>\nTo turn on a \"<b>2</b>\" will cost 5 transitions, while a \"<b>7</b>\" will cost only 4 transitions.</p>\n\n<p>Sam and Max built two different clocks.</p>\n\n<p>Sam's clock is fed e.g. number 137: the clock shows \"<b>137</b>\", then the panel is turned off, then the next number (\"<b>11</b>\") is turned on, then the panel is turned off again and finally the last number (\"<b>2</b>\") is turned on and, after some time, off.<br>\nFor the example, with number 137, Sam's clock requires:<br></p><table><tr><td>\"<b>137</b>\"</td>\n<td>:</td>\n<td>(2 + 5 + 4) \u00d7 2 = 22 transitions (\"<b>137</b>\" on/off).</td>\n</tr><tr><td>\"<b>11</b>\"</td>\n<td>:</td>\n<td>(2 + 2) \u00d7 2 = 8 transitions (\"<b>11</b>\" on/off).</td>\n</tr><tr><td>\"<b>2</b>\"</td>\n<td>:</td>\n<td>(5) \u00d7 2 = 10 transitions (\"<b>2</b>\" on/off).</td>\n</tr></table>\nFor a grand total of 40 transitions.\n\n<p>Max's clock works differently. Instead of turning off the whole panel, it is smart enough to turn off only those segments that won't be needed for the next number.<br>\nFor number 137, Max's clock requires:<br></p><table><tr><td>\"<b>137</b>\"<br><br></td>\n<td>:<br><br></td>\n<td>2 + 5 + 4 = 11 transitions (\"<b>137</b>\" on)<br>\n7 transitions (to turn off the segments that are not needed for number \"<b>11</b>\").</td>\n</tr><tr><td>\"<b>11</b>\"<br><br><br></td>\n<td>:<br><br><br></td>\n<td>0 transitions (number \"<b>11</b>\" is already turned on correctly)<br>\n3 transitions (to turn off the first \"<b>1</b>\" and the bottom part of the second \"<b>1</b>\"; <br>\nthe top part is common with number \"<b>2</b>\").</td>\n</tr><tr><td>\"<b>2</b>\"<br><br></td>\n<td>:<br><br></td>\n<td>4 transitions (to turn on the remaining segments in order to get a \"<b>2</b>\")<br>\n5 transitions (to turn off number \"<b>2</b>\").</td>\n</tr></table>\nFor a grand total of 30 transitions.\n\n<p>Of course, Max's clock consumes less power than Sam's one.<br>\nThe two clocks are fed all the prime numbers between A = 10<sup>7</sup> and B = 2\u00d710<sup>7</sup>. <br>\nFind the difference between the total number of transitions needed by Sam's clock and that needed by Max's one.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 315\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\ndef compute():\n\tisprime = eulerlib.list_primality(20000000)\n\tans = sum(sam_transitions_minus_max_transitions(i)\n\t\tfor (i, p) in enumerate(isprime)\n\t\tif i >= 10000000 and p)\n\treturn str(ans)\n\n\ndef sam_transitions_minus_max_transitions(n):\n\tsamtrans = 0\n\tmaxtrans = 0\n\tsegmentstate = 0\n\twhile True:\n\t\tnewstate = number_to_segments(n)\n\t\tif newstate == segmentstate:\n\t\t\tbreak\n\t\tmaxtrans += eulerlib.popcount(newstate ^ segmentstate)\n\t\tsegmentstate = newstate\n\t\tsamtrans += 2 * eulerlib.popcount(newstate)\n\t\tn = digit_sum(n)\n\tmaxtrans += eulerlib.popcount(segmentstate)\n\treturn samtrans - maxtrans\n\n\ndef number_to_segments(n):\n\tif n < 0:\n\t\traise ValueError()\n\tresult = 0\n\ti = 0\n\twhile True:\n\t\tresult |= DECIMAL_DIGIT_TO_SEGMENT[n % 10] << (i * 7)\n\t\tn //= 10\n\t\ti += 1\n\t\tif n == 0:\n\t\t\treturn result\n\n\n# Also known as digital root.\ndef digit_sum(n):\n\tif n < 0:\n\t\traise ValueError()\n\tresult = 0\n\twhile n != 0:\n\t\tresult += n % 10\n\t\tn //= 10\n\treturn result\n\n\n# Mapping of [0, 10) -> [0x00, 0x7F); each output fits in 7 bits.\nDECIMAL_DIGIT_TO_SEGMENT = [0b1110111, 0b0010010, 0b1011101, 0b1011011, 0b0111010, 0b1101011, 0b1101111, 0b1110010, 0b1111111, 0b1111011]\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "13625242"}
{"number": 84, "problem": "<p>In the game, <strong>Monopoly</strong>, the standard board is set up in the following way:</p>\n<div class=\"center\">\n<img src=\"resources/images/0084_monopoly_board.png?1678992052\" alt=\"0084_monopoly_board.png\">\n</div>\n<p>A player starts on the GO square and adds the scores on two 6-sided dice to determine the number of squares they advance in a clockwise direction. Without any further rules we would expect to visit each square with equal probability: 2.5%. However, landing on G2J (Go To Jail), CC (community chest), and CH (chance) changes this distribution.</p>\n<p>In addition to G2J, and one card from each of CC and CH, that orders the player to go directly to jail, if a player rolls three consecutive doubles, they do not advance the result of their 3rd roll. Instead they proceed directly to jail.</p>\n<p>At the beginning of the game, the CC and CH cards are shuffled. When a player lands on CC or CH they take a card from the top of the respective pile and, after following the instructions, it is returned to the bottom of the pile. There are sixteen cards in each pile, but for the purpose of this problem we are only concerned with cards that order a movement; any instruction not concerned with movement will be ignored and the player will remain on the CC/CH square.</p>\n<ul><li>Community Chest (2/16 cards):\n<ol><li>Advance to GO</li>\n<li>Go to JAIL</li>\n</ol></li>\n<li>Chance (10/16 cards):\n<ol><li>Advance to GO</li>\n<li>Go to JAIL</li>\n<li>Go to C1</li>\n<li>Go to E3</li>\n<li>Go to H2</li>\n<li>Go to R1</li>\n<li>Go to next R (railway company)</li>\n<li>Go to next R</li>\n<li>Go to next U (utility company)</li>\n<li>Go back 3 squares.</li>\n</ol></li>\n</ul><p>The heart of this problem concerns the likelihood of visiting a particular square. That is, the probability of finishing at that square after a roll. For this reason it should be clear that, with the exception of G2J for which the probability of finishing on it is zero, the CH squares will have the lowest probabilities, as 5/8 request a movement to another square, and it is the final square that the player finishes at on each roll that we are interested in. We shall make no distinction between \"Just Visiting\" and being sent to JAIL, and we shall also ignore the rule about requiring a double to \"get out of jail\", assuming that they pay to get out on their next turn.</p>\n<p>By starting at GO and numbering the squares sequentially from 00 to 39 we can concatenate these two-digit numbers to produce strings that correspond with sets of squares.</p>\n<p>Statistically it can be shown that the three most popular squares, in order, are JAIL (6.24%) = Square 10, E3 (3.18%) = Square 24, and GO (3.09%) = Square 00. So these three most popular squares can be listed with the six-digit modal string: 102400.</p>\n<p>If, instead of using two 6-sided dice, two 4-sided dice are used, find the six-digit modal string.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 84\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport random\n\n\n# This is a statistical sampling approximation algorithm that simply simulates the game for a fixed number of dice rolls.\n# An exact algorithm would involve calculating the eigenvector of the largest eigenvalue of the transition matrix (which is practical),\n# but averaging over all possible permutations of both the Chance and Community Chest decks (which is computationally infeasible).\ndef compute():\n\tTRIALS = 10**7\n\t\n\tvisitcounts = [0] * 40\n\t\n\tchance = CardDeck(16)\n\tcommunitychest = CardDeck(16)\n\tconsecutivedoubles = 0\n\tlocation = 0\n\t\n\tfor i in range(TRIALS):\n\t\t# Roll tetrahedral dice\n\t\tdie0 = random.randint(1, 4)\n\t\tdie1 = random.randint(1, 4)\n\t\tconsecutivedoubles = (consecutivedoubles + 1) if (die0 == die1) else 0\n\t\tif consecutivedoubles < 3:\n\t\t\tlocation = (location + die0 + die1) % 40\n\t\telse:\n\t\t\tlocation = 30\n\t\t\tconsecutivedoubles = 0\n\t\t\n\t\t# Process actions for some locations\n\t\tif location in (7, 22, 36):  # Chance\n\t\t\tcard = chance.next_card()\n\t\t\tif   card == 0:  location =  0\n\t\t\telif card == 1:  location = 10\n\t\t\telif card == 2:  location = 11\n\t\t\telif card == 3:  location = 24\n\t\t\telif card == 4:  location = 39\n\t\t\telif card == 5:  location =  5\n\t\t\telif card in (6, 7):  # Next railway\n\t\t\t\tlocation = (location + 5) // 10 % 4 * 10 + 5\n\t\t\telif card == 8:  # Next utility\n\t\t\t\tlocation = 28 if (12 < location < 28) else 12\n\t\t\telif card == 9:\n\t\t\t\tlocation -= 3\n\t\t\telse:\n\t\t\t\tpass\n\t\telif location == 30:  # Go to jail\n\t\t\tlocation = 10\n\t\telse:\n\t\t\tpass\n\t\t\n\t\tif location in (2, 17, 33):  # Community chest\n\t\t\tcard = communitychest.next_card()\n\t\t\tif   card == 0:  location =  0\n\t\t\telif card == 1:  location = 10\n\t\t\n\t\tvisitcounts[location] += 1\n\t\n\ttemp = sorted(enumerate(visitcounts), key=(lambda ic: -ic[1]))\n\tans = \"\".join(f\"{i:02}\" for (i, c) in temp[ : 3])\n\treturn str(ans)\n\n\n\nclass CardDeck:\n\n\tdef __init__(self, size):\n\t\tself.cards = list(range(size))\n\t\tself.index = size\n\t\n\tdef next_card(self):\n\t\tif self.index == len(self.cards):\n\t\t\trandom.shuffle(self.cards)\n\t\t\tself.index = 0\n\t\tresult = self.cards[self.index]\n\t\tself.index += 1\n\t\treturn result\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "101524"}
{"number": 94, "problem": "<p>It is easily proved that no equilateral triangle exists with integral length sides and integral area. However, the <dfn>almost equilateral triangle</dfn> $5$-$5$-$6$ has an area of $12$ square units.</p>\n<p>We shall define an <dfn>almost equilateral triangle</dfn> to be a triangle for which two sides are equal and the third differs by no more than one unit.</p>\n<p>Find the sum of the perimeters of all <dfn>almost equilateral triangles</dfn> with integral side lengths and area and whose perimeters do not exceed one billion ($1\\,000\\,000\\,000$).</p>\n\n", "solution": "# \n# Solution to Project Euler problem 94\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math, itertools\n\n\n# Consider an arbitrary almost equilateral triangle with side lengths (c, c, c +/- 1).\n# Split it down the middle to get a right triangle, and label the new sides.\n#     /\\               /|\n#  c /  \\ c         c / | b\n#   /    \\    -->    /  |\n#  --------         -----\n#   c +/- 1           a\n# Note that a = (c +/- 1) / 2, and a^2 + b^2 = c^2 (Pythagorean theorem).\n# \n# We know that c is an integer. The area of the original triangle is a*b,\n# which is an integer by definition from the problem statement.\n# - If a is an integer, then b is an integer (so that a*b is an integer),\n#   thus (a,b,c) is a Pythagorean triple.\n# - Otherwise a is an integer plus a half, then b must be even,\n#   but a^2 + b^2 is not an integer, which contradicts c being an integer.\n# \n# Conversely, consider an arbitrary Pythagorean triple (a,b,c).\n# If 2a = c +/- 1, then we can form an almost equilateral triangle:\n#     /|\\\n#  c / | \\ c\n#   /  |  \\\n#  ---------\n#      2a\n# For this to happen, the Pythagorean triple must be primitive. Because if not,\n# then a = 0 mod k and c = 0 mod k for some k > 1, which means 2a = 0 mod k which\n# cannot equal c +/- 1 = +/- 1 mod k. So we only need to generate primitive triples.\n# \n# Pythagorean triples theorem:\n#   Every primitive Pythagorean triple with a odd and b even can be expressed as\n#   a = st, b = (s^2-t^2)/2, c = (s^2+t^2)/2, where s > t > 0 are coprime odd integers.\ndef compute():\n\tLIMIT = 10**9\n\tans = 0\n\t# What search range do we need?\n\t# c = (s^2+t^2)/2. Perimeter = p = 3c +/- 1 = 3/2 (s^2+t^2) +/- 1 <= LIMIT.\n\t# We need to keep the smaller perimeter within limit for\n\t# the search to be meaningful, so 3/2 (s^2+t^2) - 1 <= LIMIT.\n\t# With t < s, we have that s^2+t^2 < 2s^2, so 3/2 (s^2+t^2) - 1 < 3s^2 - 1.\n\t# Therefore it is sufficient to ensure that 3s^2 - 1 <= LIMIT, i.e. s^2 <= (LIMIT+1)/3.\n\tfor s in itertools.count(1, 2):\n\t\tif s * s > (LIMIT + 1) // 3:\n\t\t\tbreak\n\t\tfor t in range(s - 2, 0, -2):\n\t\t\tif math.gcd(s, t) == 1:\n\t\t\t\ta = s * t\n\t\t\t\tb = (s * s - t * t) // 2\n\t\t\t\tc = (s * s + t * t) // 2\n\t\t\t\tif a * 2 == c - 1:\n\t\t\t\t\tp = c * 3 - 1\n\t\t\t\t\tif p <= LIMIT:\n\t\t\t\t\t\tans += p\n\t\t\t\tif a * 2 == c + 1:\n\t\t\t\t\tp = c * 3 + 1\n\t\t\t\t\tif p <= LIMIT:\n\t\t\t\t\t\tans += p\n\t\t\t\t# Swap the roles of a and b and try the same tests\n\t\t\t\t# Note that a != b, since otherwise c = a * sqrt(2) would be irrational\n\t\t\t\tif b * 2 == c - 1:\n\t\t\t\t\tp = c * 3 - 1\n\t\t\t\t\tif p <= LIMIT:\n\t\t\t\t\t\tans += p\n\t\t\t\tif b * 2 == c + 1:\n\t\t\t\t\tp = c * 3 + 1\n\t\t\t\t\tif p <= LIMIT:\n\t\t\t\t\t\tans += p\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "518408346"}
{"number": 214, "problem": "<p>Let $\\phi$ be Euler's totient function, i.e. for a natural number $n$,\n$\\phi(n)$ is the number of $k$, $1 \\le k \\le n$, for which $\\gcd(k, n) = 1$.</p>\n\n<p>By iterating $\\phi$, each positive integer generates a decreasing chain of numbers ending in $1$.<br>\nE.g. if we start with $5$ the sequence $5,4,2,1$ is generated.<br>\nHere is a listing of all chains with length $4$:</p>\n\n\\begin{align}\n5,4,2,1&amp;\\\\\n7,6,2,1&amp;\\\\\n8,4,2,1&amp;\\\\\n9,6,2,1&amp;\\\\\n10,4,2,1&amp;\\\\\n12,4,2,1&amp;\\\\\n14,6,2,1&amp;\\\\\n18,6,2,1\n\\end{align}\n\n<p>Only two of these chains start with a prime, their sum is $12$.</p>\n\n<p>What is the sum of all primes less than $40000000$ which generate a chain of length $25$?</p>\n", "solution": "# \n# Solution to Project Euler problem 214\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport array\n\n\n# Requires about 400 MB of memory\ndef compute():\n\tLIMIT = 40000000\n\ttotient = list_totients(LIMIT - 1)\n\ttotientchainlen = array.array(\"L\", [0, 1])\n\tans = 0\n\t# Fill table in ascending order because totient chains are strictly decreasing\n\tfor i in range(len(totientchainlen), len(totient)):\n\t\tchainlen = totientchainlen[totient[i]] + 1\n\t\ttotientchainlen.append(chainlen)\n\t\tif chainlen == 25 and totient[i] == i - 1:  # i is prime iff totient(i) = i-1\n\t\t\tans += i\n\treturn str(ans)\n\n\ndef list_totients(n):\n\tassert n < (1 << 32)\n\tresult = array.array(\"L\", range(n + 1))\n\tfor i in range(2, n + 1):\n\t\tif result[i] == i:  # i is prime\n\t\t\tfor j in range(i, n + 1, i):\n\t\t\t\tresult[j] = result[j] // i * (i - 1)\n\treturn result\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1677366278943"}
{"number": 36, "problem": "<p>The decimal number, $585 = 1001001001_2$ (binary), is palindromic in both bases.</p>\n<p>Find the sum of all numbers, less than one million, which are palindromic in base $10$ and base $2$.</p>\n<p class=\"smaller\">(Please note that the palindromic number, in either base, may not include leading zeros.)</p>\n\n", "solution": "# \n# Solution to Project Euler problem 36\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tans = sum(i for i in range(1000000) if is_decimal_binary_palindrome(i))\n\treturn str(ans)\n\n\ndef is_decimal_binary_palindrome(n):\n\ts = str(n)\n\tif s != s[ : : -1]:\n\t\treturn False\n\tt = bin(n)[2 : ]\n\treturn t == t[ : : -1]\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "872187"}
{"number": 127, "problem": "<p>The radical of $n$, $\\operatorname{rad}(n)$, is the product of distinct prime factors of $n$. For example, $504 = 2^3 \\times 3^2 \\times 7$, so $\\operatorname{rad}(504) = 2 \\times 3 \\times 7 = 42$.</p>\n<p>We shall define the triplet of positive integers $(a, b, c)$ to be an abc-hit if:</p>\n<ol><li>$\\gcd(a, b) = \\gcd(a, c) = \\gcd(b, c) = 1$</li>\n<li>$a \\lt b$</li>\n<li>$a + b = c$</li>\n<li>$\\operatorname{rad}(abc) \\lt c$</li>\n</ol><p>For example, $(5, 27, 32)$ is an abc-hit, because:</p>\n<ol><li>$\\gcd(5, 27) = \\gcd(5, 32) = \\gcd(27, 32) = 1$</li>\n<li>$5 \\lt 27$</li>\n<li>$5 + 27 = 32$</li>\n<li>$\\operatorname{rad}(4320) = 30 \\lt 32$</li>\n</ol><p>It turns out that abc-hits are quite rare and there are only thirty-one abc-hits for $c \\lt 1000$, with $\\sum c = 12523$.</p>\n<p>Find $\\sum c$ for $c \\lt 120000$.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 127\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\n# A straightforward solution would look like this:\n#   for c in range(2, LIMIT):\n#      for a in range(1, c):\n#        b = c - a\n#        if is_abc_hit(a, b, c):\n#          ans += c\n# \n# Here are some observations that lead to optimizations:\n# - For each integer n >= 2, we have 2 <= rad(n) <= n.\n# - By Euclid's GCD algorithm, gcd(c,b) = gcd(a+b,b) = gcd(a,b) = gcd(a,a+b) = gcd(a,c).\n#   Hence gcd(a,b) = 1 if and only if gcd(a,c) = 1 and gcd(b,c) = 1.\n#   We only need to compute and check one of these three GCDs.\n# - Since {a, b, c} are mutually coprime, we have rad(a * b * c) = rad(a) * rad(b) * rad(c).\n# - Instead of trying all 'a' values in the range [1, c), we only try promising 'a' values such that rad(a) * rad(c) < c.\n#   If we try 'a' values in ascending order of rad(a), then we can stop the search early and not examine many values of 'a'.\ndef compute():\n\tLIMIT = 120000\n\t\n\t# Modification of the sieve of Eratosthenes\n\trads = [0] + [1] * (LIMIT - 1)\n\tfor i in range(2, len(rads)):\n\t\tif rads[i] == 1:\n\t\t\tfor j in range(i, len(rads), i):\n\t\t\t\trads[j] *= i\n\t\n\tsortedrads = sorted((rad, n) for (n, rad) in enumerate(rads))\n\tsortedrads = sortedrads[1 : ]  # Get rid of the (0, 0) entry\n\t\n\tans = 0\n\tfor c in range(2, LIMIT):\n\t\tfor (rad, a) in sortedrads:\n\t\t\trad *= rads[c]\n\t\t\tif rad >= c:\n\t\t\t\tbreak\n\t\t\tb = c - a\n\t\t\tif a < b and rad * rads[b] < c and math.gcd(a, b) == 1:\n\t\t\t\tans += c\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "18407904"}
{"number": 271, "problem": "<p>\nFor a positive number $n$, define $S(n)$ as the sum of the integers $x$, for which $1 \\lt x \\lt n$ and<br>$x^3 \\equiv 1 \\bmod n$.\n</p>\n<p>\nWhen $n=91$, there are $8$ possible values for $x$, namely: $9, 16, 22, 29, 53, 74, 79, 81$.<br>\nThus, $S(91)=9+16+22+29+53+74+79+81=363$.</p>\n<p>\nFind $S(13082761331670030)$.\n</p>\n\n", "solution": "# \n# Solution to Project Euler problem 271\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# First we observe that the modulus 13082761331670030 can be factorized as\n# 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43,\n# which happens to be the product of the first 14 prime numbers.\n# \n# Due to the laws of modular arithmetic, if x^3 = 1 mod (n*k),\n# then it is also true that x^3 = 1 mod n and x^3 = 1 mod k.\n# Hence the problem statement is equivalent to finding all x in the range (1, n) such that\n# (x^3 = 1 mod 2) and (x^3 = 1 mod 3) and (x^3 = 1 mod 5) and ... and (x^3 = 1 mod 43).\n# \n# When the main congruence of x^3 = 1 mod 13082761331670030 is broken up into a set of sub-congruences,\n# because the sub-congruences have tiny moduli they are easy to solve by brute force. That is to say,\n# for x^3 = 1 mod n, we can find all the solutions for x in the range [1, k) just by testing all possibilities.\n# For example:\n# - x^3 = 1 mod  2 has the solutions (for 1 <= x <  2) of {1}.\n# - x^3 = 1 mod  7 has the solutions (for 1 <= x <  7) of {1, 2, 4}.\n# - x^3 = 1 mod 11 has the solutions (for 1 <= x < 11) of {1}.\n# - x^3 = 1 mod 43 has the solutions (for 1 <= x < 43) of {1, 6, 36}.\n# \n# By the Chinese remainder theorem, the set of solutions for x^3 = 1 mod (n*k) has a bijection with\n# the set of ordered pairs of solutions for (x^3 = 1 mod n, x^3 = 1 mod k). Furthermore, if we know\n# all solutions of (x^3 = 1 mod n) and (x^3 = 1 mod k), then we can apply the CRT on these numbers to\n# compute all the solutions of x^3 = 1 mod (n*k). Using this fact, we build up the full set of solutions\n# from the smallest factor to the largest factor.\ndef compute():\n\tFACTORS = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)\n\tfactorsols = [\n\t\t[j for j in range(fact) if pow(j, 3, fact) == 1]\n\t\tfor fact in FACTORS]\n\t\n\tdef build_and_sum_solutions(i, x, mod):\n\t\tif i == len(FACTORS):\n\t\t\treturn x\n\t\telse:\n\t\t\tfact = FACTORS[i]\n\t\t\treturn sum(\n\t\t\t\tbuild_and_sum_solutions(i + 1, chinese_remainder_theorem(x, mod, sol, fact), mod * fact)\n\t\t\t\tfor sol in factorsols[i])\n\t\n\t# Note: The recursive algorithm generates all solutions, but the problem statement excludes 1\n\tans = build_and_sum_solutions(0, 0, 1) - 1\n\treturn str(ans)\n\n\n# Assuming that p and q are coprime, 0 <= a < p, and 0 <= b < q, this returns the unique\n# integer x in the range [0, p*q) such that x satisfies (x = a mod p) and (x = b mod q).\ndef chinese_remainder_theorem(a, p, b, q):\n\treturn (a + (b - a) * pow(p, -1, q) * p) % (p * q)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "4617456485273129588"}
{"number": 53, "problem": "<p>There are exactly ten ways of selecting three from five, 12345:</p>\n<p class=\"center\">123, 124, 125, 134, 135, 145, 234, 235, 245, and 345</p>\n<p>In combinatorics, we use the notation, $\\displaystyle \\binom 5 3 = 10$.</p>\n<p>In general, $\\displaystyle \\binom n r = \\dfrac{n!}{r!(n-r)!}$, where $r \\le n$, $n! = n \\times (n-1) \\times ... \\times 3 \\times 2 \\times 1$, and $0! = 1$.\n</p>\n<p>It is not until $n = 23$, that a value exceeds one-million: $\\displaystyle \\binom {23} {10} = 1144066$.</p>\n<p>How many, not necessarily distinct, values of $\\displaystyle \\binom n r$ for $1 \\le n \\le 100$, are greater than one-million?</p>\n", "solution": "# \n# Solution to Project Euler problem 53\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\ndef compute():\n\tans = sum(1\n\t\tfor n in range(1, 101)\n\t\tfor k in range(0, n + 1)\n\t\tif math.comb(n, k) > 1000000)\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "4075"}
{"number": 113, "problem": "<p>Working from left-to-right if no digit is exceeded by the digit to its left it is called an increasing number; for example, $134468$.</p>\n<p>Similarly if no digit is exceeded by the digit to its right it is called a decreasing number; for example, $66420$.</p>\n<p>We shall call a positive integer that is neither increasing nor decreasing a \"bouncy\" number; for example, $155349$.</p>\n<p>As $n$ increases, the proportion of bouncy numbers below $n$ increases such that there are only $12951$ numbers below one-million that are not bouncy and only $277032$ non-bouncy numbers below $10^{10}$.</p>\n<p>How many numbers below a googol ($10^{100}$) are not bouncy?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 113\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\n# Let n be the number of digits. To count the number of increasing or decreasing numbers using combinatorics,\n# let's view each number as a sequence of digit readout slots and operations. For example, suppose n=5 and\n# we examine the increasing number 23667. We can express it as the sequence \"+ + # + # + + + # # + # + +\",\n# where # is a digit and + means increment. This way of thinking will be useful, as we will see.\n# \n# For the set of increasing numbers, each number has n readout slots and 9 increments, positioned arbitrarily.\n# Using this construction, the number is guaranteed to be increasing. Note that leading zeros can be produced.\n# Conversely, for each increasing number, we can generate a (unique) sequence of slots and increments that represents it\n# (putting all unused increments after the rightmost digit). Hence there are n+9 objects to arrange in sequence,\n# so there are binomial(n + 9, 9) ways to arrange them. Finally we subtract 1 because 0 can be formed with this scheme,\n# which must be excluded from the set of increasing numbers.\n# \n# For the set of decreasing numbers, each number has n readout slots and 10 operations. Of the 10 operations,\n# the leading one must be \"increment to 9\", and the rest must be decrements. Similar to the increasing case,\n# each sequence of slots and decrements produces a decreasing number, and conversely each decreasing number\n# corresponds to a unique sequence of slots and decrements. However, 0 can be formed in n+1 ways, by concentrating\n# all 10 operations between some pair of slots, e.g. \"+9 -9 # # # #\", \"# +9 -9 # # #\", ..., \"# # # # +9 -9\".\n# \n# There are 9n \"flat\" numbers, for example: 1, 2, ..., 9; 11, 22, ..., 99; 111, 222, ..., 999; ... (note that 0 is excluded).\n# Since they are double-counted in the increasing and decreasing numbers, we subtract the size of this set.\n# \n# In conclusion, the number of non-bouncy numbers is (binomial(n+9,9) - 1) + (binomial(n+10,10) - (n+1)) - 9n.\n# \n# (Technically, in the problem statement and this solution, \"increasing\" actually means \"nondecreasing\" and \"decreasing\" means \"nonincreasing\".)\ndef compute():\n\tDIGITS = 100\n\tincreasing = math.comb(DIGITS + 9, 9) - 1\n\tdecreasing = math.comb(DIGITS + 10, 10) - (DIGITS + 1)\n\tflat = DIGITS * 9\n\tans = increasing + decreasing - flat\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "51161058134250"}
{"number": 2, "problem": "<p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with $1$ and $2$, the first $10$ terms will be:\n$$1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \\dots$$</p>\n<p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 2\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# Computers are fast, so we can implement this solution directly without any clever math.\ndef compute():\n\tans = 0\n\tx = 1  # Represents the current Fibonacci number being processed\n\ty = 2  # Represents the next Fibonacci number in the sequence\n\twhile x <= 4000000:\n\t\tif x % 2 == 0:\n\t\t\tans += x\n\t\tx, y = y, x + y\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "4613732"}
{"number": 142, "problem": "<p>Find the smallest $x + y + z$ with integers $x \\gt y \\gt z \\gt 0$ such that $x + y$, $x - y$, $x + z$, $x - z$, $y + z$, $y - z$ are all perfect squares.</p>\n", "solution": "# \n# Solution to Project Euler problem 142\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools, math\n\n\ndef compute():\n\t# Finds any sum s = x+y+z such that s < limit, 0 < z < y < x, and these are\n\t# perfect squares: x+y, x-y, x+z, x-z, y+z, y-z. Returns -1 if none is found.\n\t# \n\t# Suppose we let x + y = a^2 and x - y = b^2, so that they are always square.\n\t# Then x = (a^2 + b^2) / 2 and y = (a^2 - b^2) / 2. By ensuring a > b > 0, we have x > y > 0.\n\t# Now z < y and z < limit - x - y. Let y + z = c^2, then explicitly check\n\t# if x+z, x-z, and y-z are square.\n\tdef find_sum(limit):\n\t\tfor a in itertools.count(1):\n\t\t\tif a * a >= limit:\n\t\t\t\tbreak\n\t\t\tfor b in reversed(range(1, a)):\n\t\t\t\tif (a + b) % 2 != 0:  # Need them to be both odd or both even so that we get integers for x and y\n\t\t\t\t\tcontinue\n\t\t\t\tx = (a * a + b * b) // 2\n\t\t\t\ty = (a * a - b * b) // 2\n\t\t\t\tif x + y + 1 >= limit:  # Because z >= 1\n\t\t\t\t\tcontinue\n\t\t\t\t\n\t\t\t\tzlimit = min(y, limit - x - y)\n\t\t\t\tfor c in itertools.count(math.isqrt(y) + 1):\n\t\t\t\t\tz = c * c - y\n\t\t\t\t\tif z >= zlimit:\n\t\t\t\t\t\tbreak\n\t\t\t\t\tif issquare[x + z] and issquare[x - z] and issquare[y - z]:\n\t\t\t\t\t\treturn x + y + z\n\t\treturn None\n\t\n\t\n\tsumlimit = 10\n\t# Raise the limit until a sum is found\n\twhile True:\n\t\tissquare = [False] * sumlimit\n\t\tfor i in range(math.isqrt(len(issquare) - 1) + 1):\n\t\t\tissquare[i * i] = True\n\t\t\n\t\tsum = find_sum(sumlimit)\n\t\tif sum is not None:\n\t\t\tsum = sumlimit\n\t\t\tbreak\n\t\tsumlimit *= 10\n\t\n\t# Lower the limit until now sum is found\n\twhile True:\n\t\tsum = find_sum(sumlimit)\n\t\tif sum is None:  # No smaller sum found\n\t\t\treturn str(sumlimit)\n\t\tsumlimit = sum\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1006193"}
{"number": 162, "problem": "<p>In the hexadecimal number system numbers are represented using $16$ different digits:\n$$0,1,2,3,4,5,6,7,8,9,\\mathrm A,\\mathrm B,\\mathrm C,\\mathrm D,\\mathrm E,\\mathrm F.$$</p>\n<p>The hexadecimal number $\\mathrm{AF}$ when written in the decimal number system equals $10 \\times 16 + 15 = 175$.</p>\n<p>In the $3$-digit hexadecimal numbers $10\\mathrm A$, $1\\mathrm A0$, $\\mathrm A10$, and $\\mathrm A01$ the digits $0$, $1$ and $\\mathrm A$ are all present.<br>\nLike numbers written in base ten we write hexadecimal numbers without leading zeroes.</p>\n<p>How many hexadecimal numbers containing at most sixteen hexadecimal digits exist with all of the digits $0$, $1$, and $\\mathrm A$ present at least once?<br>\nGive your answer as a hexadecimal number.</p>\n<p>(A, B, C, D, E and F in upper case, without any leading or trailing code that marks the number as hexadecimal and without leading zeroes, e.g. 1A3F and not: 1a3f and not 0x1a3f and not $1A3F and not #1A3F and not 0000001A3F)</p>\n", "solution": "# \n# Solution to Project Euler problem 162\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# Among the set of n-digit hexadecimal numbers, how many of them:\n#   \n#   Are there in total?: 15*16^(n-1).\n#   \n#   Have no 0?: 15^n.\n#   Have no 1?: 14*15^(n-1).\n#   Have no A?: 14*15^(n-1).\n#   \n#   Have some 0?: 15*16^(n-1) - 15^n.\n#   Have some 1?: 15*16^(n-1) - 14*15^(n-1).\n#   Have some A?: 15*16^(n-1) - 14*15^(n-1).\n#   \n#   Have no 0 and have no 1?: 14^n.\n#   Have no 0 and have no A?: 14^n.\n#   Have no 1 and have no A?: 13*14^(n-1).\n#   \n#   Have some 0 or have some 1: 15*16^(n-1) - 14^n.\n#   Have some 0 or have some A: 15*16^(n-1) - 14^n.\n#   Have some 1 or have some A: 15*16^(n-1) - 13*14^(n-1).\n#   \n#   Note: (Have X) + (Have Y) = (Have X or have Y) + (Have X and have Y).\n#   Have some 0 and have some 1: (15*16^(n-1) - 15^n) + (15*16^(n-1) - 14*15^(n-1)) - (15*16^(n-1) - 14^n) = 15*16^(n-1) - 29*15^(n-1) + 14^n.\n#   Have some 0 and have some A: (15*16^(n-1) - 15^n) + (15*16^(n-1) - 14*15^(n-1)) - (15*16^(n-1) - 14^n) = 15*16^(n-1) - 29*15^(n-1) + 14^n.\n#   Have some 1 and have some A: (15*16^(n-1) - 14*15^(n-1)) + (15*16^(n-1) - 14*15^(n-1)) - (15*16^(n-1) - 13*14^(n-1)) = 15*16^(n-1) - 28*15^(n-1) + 13*14^(n-1).\n#   \n#   Have no 0 and have no 1 and have no A?    : 13^n.\n#   Have some 0 or have some 1 or have some A?: 15*16^(n-1) - 13^n.\n#   \n#   Note: (Have 0 or have 1 or have A) = (Have 0) + (Have 1) + (Have A) - (Have 0 and have 1) - (Have 0 and have A) - (Have 1 and have A) + (Have 0 and have 1 and have A).\n#   Therefore:\n#     Have 0 and have 1 and have A\n#     = (15*16^(n-1) - 13^n) - (15*16^(n-1) - 15^n) - (15*16^(n-1) - 14*15^(n-1)) - (15*16^(n-1) - 14*15^(n-1)) + (15*16^(n-1) - 29*15^(n-1) + 14^n) + (15*16^(n-1) - 29*15^(n-1) + 14^n) + (15*16^(n-1) - 28*15^(n-1) + 13*14^(n-1))\n#     = 15*16^(n-1) - 43*15^(n-1) + 41*14^(n-1) - 13^n.\ndef compute():\n\tans = sum((15 * 16**(n-1) - 43 * 15**(n-1) + 41 * 14**(n-1) - 13**n) for n in range(1, 17))\n\treturn f\"{ans:X}\"\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "3D58725572C62302"}
{"number": 73, "problem": "<p>Consider the fraction, $\\dfrac n d$, where $n$ and $d$ are positive integers. If $n \\lt d$ and $\\operatorname{HCF}(n, d)=1$, it is called a reduced proper fraction.</p>\n<p>If we list the set of reduced proper fractions for $d \\le 8$ in ascending order of size, we get:\n$$\\frac 1 8, \\frac 1 7, \\frac 1 6, \\frac 1 5, \\frac 1 4, \\frac 2 7, \\frac 1 3, \\mathbf{\\frac 3 8, \\frac 2 5, \\frac 3 7}, \\frac 1 2, \\frac 4 7, \\frac 3 5, \\frac 5 8, \\frac 2 3, \\frac 5 7, \\frac 3 4, \\frac 4 5, \\frac 5 6, \\frac 6 7, \\frac 7 8$$</p>\n<p>It can be seen that there are $3$ fractions between $\\dfrac 1 3$ and $\\dfrac 1 2$.</p>\n<p>How many fractions lie between $\\dfrac 1 3$ and $\\dfrac 1 2$ in the sorted set of reduced proper fractions for $d \\le 12\\,000$?</p>\n\n\n", "solution": "# \n# Solution to Project Euler problem 73\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# The Stern-Brocot tree is an infinite binary search tree of all positive rational numbers,\n# where each number appears only once and is in lowest terms.\n# It is formed by starting with the two sentinels 0/1 and 1/1. Iterating infinitely in any order,\n# between any two currently adjacent fractions Ln/Ld and Rn/Rd, insert a new fraction (Ln+Rn)/(Ld+Rd).\n# See MathWorld for a visualization: http://mathworld.wolfram.com/Stern-BrocotTree.html\n# \n# The natural algorithm is as follows:\n#   # Counts the number of reduced fractions n/d such that leftN/leftD < n/d < rightN/rightD and d <= 12000.\n#   # leftN/leftD and rightN/rightD must be adjacent in the Stern-Brocot tree at some point in the generation process.\n#   def stern_brocot_count(leftn, leftd, rightn, rightd):\n#     d = leftd + rightd\n#     if d > 12000:\n#       return 0\n#     else:\n#       n = leftn + rightn\n#       return 1 + stern_brocot_count(leftn, leftd, n, d) + stern_brocot_count(n, d, rightn, rightd)\n# But instead we use depth-first search on an explicit stack, because having\n# a large number of stack frames seems to be supported on Linux but not on Windows.\ndef compute():\n\tans = 0\n\tstack = [(1, 3, 1, 2)]\n\twhile len(stack) > 0:\n\t\tleftn, leftd, rightn, rightd = stack.pop()\n\t\td = leftd + rightd\n\t\tif d <= 12000:\n\t\t\tn = leftn + rightn\n\t\t\tans += 1\n\t\t\tstack.append((n, d, rightn, rightd))\n\t\t\tstack.append((leftn, leftd, n, d))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "7295372"}
{"number": 133, "problem": "<p>A number consisting entirely of ones is called a repunit. We shall define $R(k)$ to be a repunit of length $k$; for example, $R(6) = 111111$.</p>\n<p>Let us consider repunits of the form $R(10^n)$.</p>\n<p>Although $R(10)$, $R(100)$, or $R(1000)$ are not divisible by $17$, $R(10000)$ is divisible by $17$. Yet there is no value of $n$ for which $R(10^n)$ will divide by $19$. In fact, it is remarkable that $11$, $17$, $41$, and $73$ are the only four primes below one-hundred that can  be a factor of $R(10^n)$.</p>\n<p>Find the sum of all the primes below one-hundred thousand that will never be a factor of $R(10^n)$.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 133\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\n# Repunit formula: R(k) = (10^k - 1) / 9. (Using geometric series)\n# \n# For the rest of the argument, let n be an arbitrary integer that is coprime with 10.\n# \n# Let k = A(n) be the smallest positive integer such that R(k) = 0 mod n.\n# From problem #129, we know k exists and satisfies 1 <= k <= n.\n# \n# Lemma: For each natural number m, R(m) = 0 mod n if and only if m is a multiple of k.\n# Proof:\n#   Backward direction:\n#     Assume m is a multiple of k. Then factorize m = jk, where j is an integer.\n#     Look at R(m) = R(jk) = 1...1 ... 1...1 (j groups of k 1's) = 10...010...010...01 * R(k) (informally)\n#                  = (sum of 10^(ik) for i = 0 to s-1) * R(k).\n#     We already have R(k) = 0 mod n, thus (sum of 10^(ik) for i = 0 to s-1) * R(k) = R(m) = 0 mod n.\n#   Forward direction (by converse):\n#     Assume m is not a multiple of k. Suppose for contradiction that R(m) = 0 mod n.\n#     Similar the previous argument, we can zeroize blocks of k 1's while preserving the value of R(m) mod n.\n#     Namely, we delete the top k 1's by subtracting R(k) * 10^(m-k), which is 0 mod n because R(k) = 0 mod n.\n#     After repeated deletion of the most significant 1's, we can get m' = m mod k, so that 0 < m' < k.\n#     (m' != 0 because we assumed m is not a multiple of k.) But with R(m') = R(m) = 0 mod n, and m' < k,\n#     this contradicts the definition of k = A(n), the smallest value such that R(k) = 0 mod n.\n#     Hence the supposition that R(m) = 0 mod n is false.\n# \n# Does there exist an x such that R(10^x) is a multiple of n? By the lemma, this is true if and only if\n# there exists an x such that 10^x is a multiple of k. This means k must be a product of 2's and 5's.\n# \n# Actually, we don't need to compute k = A(n) to perform this test. If k = 2^a * 5^b, then all sufficiently large\n# powers of 10 are a multiple of k. (If k has other prime factors, then no power of 10 is a multiple of k.)\n# We know 1 <= k < n, so in this problem 1 <= k < 10^5. For k in this range, the largest exponent among a and b is 16\n# (for the number 2^16 = 65536). (In general, the largest exponent is floor(log2(limit)); in this case limit = 10^5.)\n# So we only need to test if 10^16 is a multiple of k, equivalent to testing if R(10^16) is a multiple of n.\ndef compute():\n\tprimes = eulerlib.list_primes(100000)\n\tans = sum(p for p in primes if p == 2 or p == 5 or not has_divisible_repunit(p))\n\treturn str(ans)\n\n\n# Tests whether there exists a k such that R(10^k) is a multiple of p\ndef has_divisible_repunit(p):\n\treturn (pow(10, 10**16, p * 9) - 1) // 9 % p == 0\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "453647705"}
{"number": 80, "problem": "<p>It is well known that if the square root of a natural number is not an integer, then it is irrational. The decimal expansion of such square roots is infinite without any repeating pattern at all.</p>\n<p>The square root of two is $1.41421356237309504880\\cdots$, and the digital sum of the first one hundred decimal digits is $475$.</p>\n<p>For the first one hundred natural numbers, find the total of the digital sums of the first one hundred decimal digits for all the irrational square roots.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 80\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\ndef compute():\n\tDIGITS = 100\n\tMULTIPLIER = 100**DIGITS\n\tans = sum(\n\t\tsum(int(c) for c in str(math.isqrt(i * MULTIPLIER))[ : DIGITS])\n\t\tfor i in range(100)\n\t\tif math.isqrt(i)**2 != i)\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "40886"}
{"number": 191, "problem": "<p>A particular school offers cash rewards to children with good attendance and punctuality. If they are absent for three consecutive days or late on more than one occasion then they forfeit their prize.</p>\n\n<p>During an n-day period a trinary string is formed for each child consisting of L's (late), O's (on time), and A's (absent).</p>\n\n<p>Although there are eighty-one trinary strings for a 4-day period that can be formed, exactly forty-three strings would lead to a prize:</p>\n\n<p style=\"margin-left:50px;font-family:'Courier New', monospace;\">OOOO OOOA OOOL OOAO OOAA OOAL OOLO OOLA OAOO OAOA<br />\nOAOL OAAO OAAL OALO OALA OLOO OLOA OLAO OLAA AOOO<br />\nAOOA AOOL AOAO AOAA AOAL AOLO AOLA AAOO AAOA AAOL<br />\nAALO AALA ALOO ALOA ALAO ALAA LOOO LOOA LOAO LOAA<br />\nLAOO LAOA LAAO</p>\n\n<p>How many \"prize\" strings exist over a 30-day period?</p>\n", "solution": "# \n# Solution to Project Euler problem 191\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tNUM_DAYS = 30\n\tMAX_ABSENT = 2\n\tMAX_LATE = 1\n\t\n\t# num_prize_strings[i][j][k] is the number of prize strings of length i with\n\t# exactly j absences at the tail and exactly k lates in the whole string\n\tnum_prize_strings = create_nested_lists(0, NUM_DAYS + 1, MAX_ABSENT + 1, MAX_LATE + 1)\n\tnum_prize_strings[0][0][0] = 1\n\tfor i in range(1, len(num_prize_strings)):\n\t\tfor j in range(len(num_prize_strings[i])):\n\t\t\tfor k in range(len(num_prize_strings[i][j])):\n\t\t\t\tif j == 0:\n\t\t\t\t\ts = 0\n\t\t\t\t\tfor l in range(MAX_ABSENT + 1):\n\t\t\t\t\t\ts += num_prize_strings[i - 1][l][k]  # On time\n\t\t\t\t\tif k > 0:\n\t\t\t\t\t\tfor l in range(MAX_ABSENT + 1):\n\t\t\t\t\t\t\ts += num_prize_strings[i - 1][l][k - 1]  # Late\n\t\t\t\telse:\n\t\t\t\t\ts = num_prize_strings[i - 1][j - 1][k]  # Absent\n\t\t\t\tnum_prize_strings[i][j][k] = s\n\t\n\tans = sum(map(sum, num_prize_strings[NUM_DAYS]))\n\treturn str(ans)\n\n\ndef create_nested_lists(value, *dimensions):\n\tif len(dimensions) == 0:\n\t\traise ValueError()\n\telif len(dimensions) == 1:\n\t\treturn [value] * dimensions[0]\n\telse:\n\t\treturn [create_nested_lists(value, *dimensions[1 : ]) for _ in range(dimensions[0])]\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1918080160"}
{"number": 47, "problem": "<p>The first two consecutive numbers to have two distinct prime factors are:</p>\n\\begin{align}\n14 &amp;= 2 \\times 7\\\\\n15 &amp;= 3 \\times 5.\n\\end{align}\n<p>The first three consecutive numbers to have three distinct prime factors are:</p>\n\\begin{align}\n644 &amp;= 2^2 \\times 7 \\times 23\\\\\n645 &amp;= 3 \\times 5 \\times 43\\\\\n646 &amp;= 2 \\times 17 \\times 19.\n\\end{align}\n<p>Find the first four consecutive integers to have four distinct prime factors each. What is the first of these numbers?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 47\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport functools, itertools, math\n\n\ndef compute():\n\tcond = lambda i: all((count_distinct_prime_factors(i + j) == 4) for j in range(4))\n\tans = next(filter(cond, itertools.count()))\n\treturn str(ans)\n\n\n@functools.cache\ndef count_distinct_prime_factors(n):\n\tcount = 0\n\twhile n > 1:\n\t\tcount += 1\n\t\tfor i in range(2, math.isqrt(n) + 1):\n\t\t\tif n % i == 0:\n\t\t\t\twhile True:\n\t\t\t\t\tn //= i\n\t\t\t\t\tif n % i != 0:\n\t\t\t\t\t\tbreak\n\t\t\t\tbreak\n\t\telse:\n\t\t\tbreak  # n is prime\n\treturn count\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "134043"}
{"number": 16, "problem": "<p>$2^{15} = 32768$ and the sum of its digits is $3 + 2 + 7 + 6 + 8 = 26$.</p>\n<p>What is the sum of the digits of the number $2^{1000}$?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 16\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# We implement this solution in a straightforward way thanks to Python's built-in arbitrary precision integer type.\ndef compute():\n\tn = 2**1000\n\tans = sum(int(c) for c in str(n))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1366"}
{"number": 387, "problem": "<p>A <strong>Harshad or Niven number</strong> is a number that is divisible by the sum of its digits.\n<br>$201$ is a Harshad number because it is divisible by $3$ (the sum of its digits.)\n<br>When we truncate the last digit from $201$, we get $20$, which is a Harshad number.\n<br>When we truncate the last digit from $20$, we get $2$, which is also a Harshad number.\n<br>Let's call a Harshad number that, while recursively truncating the last digit, always results in a Harshad number a <dfn>right truncatable Harshad number</dfn>.</p>  \n\n<p>Also:\n<br>$201/3=67$ which is prime.\n<br>Let's call a Harshad number that, when divided by the sum of its digits, results in a prime a <dfn>strong Harshad number</dfn>.</p>\n\n<p>Now take the number $2011$ which is prime.\n<br>When we truncate the last digit from it we get $201$, a strong Harshad number that is also right truncatable.\n<br>Let's call such primes <dfn>strong, right truncatable Harshad primes</dfn>.</p>\n\n<p>You are given that the sum of the strong, right truncatable Harshad primes less than $10000$ is $90619$.</p>\n\n<p>Find the sum of the strong, right truncatable Harshad primes less than $10^{14}$.</p>\n", "solution": "# \n# Solution to Project Euler problem 387\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\ndef compute():\n\tLIMIT = 10**14\n\t\n\t# Use a list container as a hack, because Python 2 does not support 'nonlocal' variables\n\tans = [0]\n\t\n\t# Note: n must be a right-truncatable Harshad number, and the other arguments are properties of the number n.\n\tdef find_harshad_primes(n, digitsum, isstrong):\n\t\t# Shift left by 1 digit, and try all 10 possibilities for the rightmost digit\n\t\tm = n * 10\n\t\ts = digitsum\n\t\tfor i in range(10):\n\t\t\tif m >= LIMIT:\n\t\t\t\tbreak\n\t\t\tif isstrong and eulerlib.is_prime(m):\n\t\t\t\tans[0] += m\n\t\t\tif m % s == 0:\n\t\t\t\tfind_harshad_primes(m, s, eulerlib.is_prime(m // s))\n\t\t\tm += 1\n\t\t\ts += 1\n\t\n\tfor i in range(1, 10):  # All one-digit numbers are trivially Harshad numbers\n\t\tfind_harshad_primes(i, i, False)\n\treturn str(ans[0])\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "696067597313468"}
{"number": 265, "problem": "<p>$2^N$ binary digits can be placed in a circle so that all the $N$-digit clockwise subsequences are distinct.</p>\n\n<p>For $N=3$, two such circular arrangements are possible, ignoring rotations:</p>\n<div align=\"center\"><img src=\"resources/images/0265_BinaryCircles.gif?1678992056\" class=\"dark_img\" alt=\"0265_BinaryCircles.gif\"></div>\n\n<p>For the first arrangement, the $3$-digit subsequences, in clockwise order, are:<br>$000$, $001$, $010$, $101$, $011$, $111$, $110$ and $100$.</p>\n\n<p>Each circular arrangement can be encoded as a number by concatenating the binary digits starting with the subsequence of all zeros as the most significant bits and proceeding clockwise. The two arrangements for $N=3$ are thus represented as $23$ and $29$:\n</p>\n\\begin{align}\n00010111_2 &amp;= 23\\\\\n00011101_2 &amp;= 29\n\\end{align}\n\n<p>Calling $S(N)$ the sum of the unique numeric representations, we can see that $S(3) = 23 + 29 = 52$.</p>\n\n<p>Find $S(5)$.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 265\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# In this problem we look at 2^n-digit binary strings and the n-digit substrings of these.\n# We are given that n = 5, so we are looking at windows of 5 bits in 32-bit strings.\n# \n# There are of course 32 possible cyclic windows in a 32-bit string.\n# We want each of these windows to be a unique 5-bit string. There are exactly 2^5 = 32\n# possible 5-bit strings, hence the 32 windows must cover the 5-bit space exactly once.\n# \n# The result requires the substring of all zeros to be in the most significant bits.\n# We argue that the top n bits must be all zeros, because this is one of the cyclic windows\n# and the value 00...00 must occur once. Furthermore the next and previous bit must be 1 -\n# because if they're not, then at least one of the adjacent windows are also zero, which\n# violates the uniqueness requirement.\n# \n# With n = 5, this means every candidate string must start with 000001 and end with 1.\n# In other words, they are of the form 000001xxxxxxxxxxxxxxxxxxxxxxxxx1.\n# The middle 25 bits still need to be determined, and we simply search by brute force.\ndef compute():\n\tN = 5  # Must be at least 1\n\tTWO_POW_N = 2**N\n\tMASK = TWO_POW_N - 1  # Equal to n 1's in binary, i.e. 0b11111\n\t\n\tdef check_arrangement(digits):\n\t\tseen = set()\n\t\tdigits |= digits << TWO_POW_N  # Make second copy\n\t\tfor i in range(TWO_POW_N):\n\t\t\tseen.add((digits >> i) & MASK)\n\t\treturn len(seen) == TWO_POW_N\n\t\n\tstart = 2**(TWO_POW_N - N - 1) + 1\n\tend = 2**(TWO_POW_N - N)\n\tans = sum(i for i in range(start, end, 2) if check_arrangement(i))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "209110240768"}
{"number": 6, "problem": "<p>The sum of the squares of the first ten natural numbers is,</p>\n$$1^2 + 2^2 + ... + 10^2 = 385.$$\n<p>The square of the sum of the first ten natural numbers is,</p>\n$$(1 + 2 + ... + 10)^2 = 55^2 = 3025.$$\n<p>Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is $3025 - 385 = 2640$.</p>\n<p>Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.</p>\n", "solution": "# \n# Solution to Project Euler problem 6\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# Computers are fast, so we can implement this solution directly without any clever math.\n# However for the mathematically inclined, there are closed-form formulas:\n#   s  = N(N + 1) / 2.\n#   s2 = N(N + 1)(2N + 1) / 6.\n# Hence s^2 - s2 = (N^4 / 4) + (N^3 / 6) - (N^2 / 4) - (N / 6).\ndef compute():\n\tN = 100\n\ts = sum(i for i in range(1, N + 1))\n\ts2 = sum(i**2 for i in range(1, N + 1))\n\treturn str(s**2 - s2)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "25164150"}
{"number": 146, "problem": "<p>The smallest positive integer $n$ for which the numbers $n^2 + 1$, $n^2 + 3$, $n^2 + 7$, $n^2 + 9$, $n^2 + 13$, and $n^2 + 27$ are consecutive primes is $10$. The sum of all such integers $n$ below one-million is $1242490$.</p>\n\n<p>What is the sum of all such integers $n$ below $150$ million?</p>\n", "solution": "# \n# Solution to Project Euler problem 146\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, math\n\n\n# Right off the bat, we can exclude 90% of the candidates by the following observations:\n# - If n = 1 mod 2, then n^2 + 1 = 0 mod 2 which is composite.\n# - Thus we require n = 0 mod 2.\n# - If n = 1 mod 5, then n^2 + 9 = 0 mod 5 which is composite.\n# - If n = 2 mod 5, then n^2 + 1 = 0 mod 5 which is composite.\n# - If n = 3 mod 5, then n^2 + 1 = 0 mod 5 which is composite.\n# - If n = 4 mod 5, then n^2 + 9 = 0 mod 5 which is composite.\n# - Thus we require n = 0 mod 5.\n# - Taking these two together and using the Chinese remainder theorem (CRT), we require n = 0 mod 10.\n# \n# For each value of n, after we generate the set {n^2 + 1, n^2 + 3, ..., n^2 + 27}, it's more efficient to take each\n# prime number and test whether it divides any number, rather than take each number and test it against all prime numbers.\n# This is because some numbers in this set are prime so the latter method tests some numbers against all the primes;\n# the former method will bail out early as soon as ~any~ number in the set has a small prime factor.\n# \n# The rest of the algorithm is implemented straightforwardly.\ndef compute():\n\tLIMIT = 150000000\n\t\n\tINCREMENTS = [1, 3, 7, 9, 13, 27]  # Must be in non-decreasing order\n\tNON_INCREMENTS = set(range(INCREMENTS[-1])) - set(INCREMENTS)\n\t\n\tmaxnumber = LIMIT**2 + INCREMENTS[-1]\n\tprimes = eulerlib.list_primes(math.isqrt(maxnumber))\n\t\n\tdef has_consecutive_primes(n):\n\t\t# Generate the set of numbers to test for primality\n\t\tn2 = n**2\n\t\ttemp = [(n2 + k) for k in INCREMENTS]\n\t\t\n\t\t# Test that each number is prime.\n\t\t# Note: The nesting of the loops can be reversed, but this way is much faster.\n\t\tif any((x != p and x % p == 0)\n\t\t\t\tfor p in primes\n\t\t\t\tfor x in temp):\n\t\t\treturn False\n\t\t\n\t\t# Test that each number that is not an increment is composite.\n\t\t# This checks that the prime numbers we found are in fact consecutive.\n\t\treturn all((not is_prime(n2 + k)) for k in NON_INCREMENTS)\n\t\n\t\n\tdef is_prime(n):\n\t\tend = math.isqrt(n)\n\t\tfor p in primes:\n\t\t\tif p > end:\n\t\t\t\tbreak\n\t\t\tif n % p == 0:\n\t\t\t\treturn False\n\t\treturn True\n\t\n\t\n\tans = sum(n for n in range(0, LIMIT, 10) if has_consecutive_primes(n))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "676333270"}
{"number": 57, "problem": "<p>It is possible to show that the square root of two can be expressed as an infinite continued fraction.</p>\n<p class=\"center\">$\\sqrt 2 =1+ \\frac 1 {2+ \\frac 1 {2 +\\frac 1 {2+ \\dots}}}$</p>\n<p>By expanding this for the first four iterations, we get:</p>\n<p>$1 + \\frac 1 2 = \\frac  32 = 1.5$<br>\n$1 + \\frac 1 {2 + \\frac 1 2} = \\frac 7 5 = 1.4$<br>\n$1 + \\frac 1 {2 + \\frac 1 {2+\\frac 1 2}} = \\frac {17}{12} = 1.41666 \\dots$<br>\n$1 + \\frac 1 {2 + \\frac 1 {2+\\frac 1 {2+\\frac 1 2}}} = \\frac {41}{29} = 1.41379 \\dots$<br></p>\n<p>The next three expansions are $\\frac {99}{70}$, $\\frac {239}{169}$, and $\\frac {577}{408}$, but the eighth expansion, $\\frac {1393}{985}$, is the first example where the number of digits in the numerator exceeds the number of digits in the denominator.</p>\n<p>In the first one-thousand expansions, how many fractions contain a numerator with more digits than the denominator?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 57\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tLIMIT = 1000\n\tans = 0\n\tnumer = 0\n\tdenom = 1\n\tfor _ in range(LIMIT):\n\t\tnumer, denom = denom, denom * 2 + numer\n\t\t# Now numer/denom is the i'th (0-based) continued fraction approximation of sqrt(2) - 1\n\t\tif len(str(numer + denom)) > len(str(denom)):\n\t\t\tans += 1\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "153"}
{"number": 117, "problem": "<p>Using a combination of grey square tiles and oblong tiles chosen from: red tiles (measuring two units), green tiles (measuring three units), and blue tiles (measuring four units), it is possible to tile a row measuring five units in length in exactly fifteen different ways.</p>\n\n<div class=\"center\">\n<img src=\"resources/images/0117.png?1678992052\" alt=\"png117.png\">\n</div>\n\n<p>How many ways can a row measuring fifty units in length be tiled?</p>\n<p class=\"note\">NOTE: This is related to <a href=\"problem=116\">Problem 116</a>.</p>\n", "solution": "# \n# Solution to Project Euler problem 117\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# How many ways can a row n units long be filled with:\n# - grey squares 1 unit long\n# - Red tiles 2 units long\n# - Green tiles 3 units long\n# - Blue tiles 4 units long\n# Denote this quantity as ways[n].\n# \n# Compute n = 0 manually as a base case.\n# Now assume n >= 1. Look at the leftmost item and sum up the possibilities.\n# - grey square (n>=1): Rest of the row can be anything of length n-1. Add ways[n-1].\n# - Red tile    (n>=2): Rest of the row can be anything of length n-2. Add ways[n-2].\n# - Green tile  (n>=3): Rest of the row can be anything of length n-3. Add ways[n-3].\n# - Blue tile   (n>=4): Rest of the row can be anything of length n-4. Add ways[n-4].\ndef compute():\n\t# Dynamic programming\n\tLENGTH = 50\n\tways = [1] + [0] * LENGTH\n\tfor n in range(1, len(ways)):\n\t\tways[n] += sum(ways[max(n - 4, 0) : n])\n\treturn str(ways[-1])\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "100808458960497"}
{"number": 301, "problem": "<p><dfn>Nim</dfn> is a game played with heaps of stones, where two players take it in turn to remove any number of stones from any heap until no stones remain.</p>\n\n<p>We'll consider the three-heap normal-play version of Nim, which works as follows:</p>\n<ul><li>At the start of the game there are three heaps of stones.</li>\n<li>On each player's turn, the player may remove any positive number of stones from any single heap.</li>\n<li>The first player unable to move (because no stones remain) loses.</li>\n</ul><p>If $(n_1,n_2,n_3)$ indicates a Nim position consisting of heaps of size $n_1$, $n_2$, and $n_3$, then there is a simple function, which you may look up or attempt to deduce for yourself, $X(n_1,n_2,n_3)$ that returns:</p>\n\n<ul><li>zero if, with perfect strategy, the player about to move will eventually lose; or</li>\n<li>non-zero if, with perfect strategy, the player about to move will eventually win.</li>\n</ul><p>For example $X(1,2,3) = 0$ because, no matter what the current player does, the opponent can respond with a move that leaves two heaps of equal size, at which point every move by the current player can be mirrored by the opponent until no stones remain; so the current player loses. To illustrate:</p>\n\n<ul><li>current player moves to $(1,2,1)$</li>\n<li>opponent moves to $(1,0,1)$</li>\n<li>current player moves to $(0,0,1)$</li>\n<li>opponent moves to $(0,0,0)$, and so wins.</li>\n</ul><p>For how many positive integers $n\u2009\\le\u20092^{30}$ does $X(n,2n,3n) = 0$ ?</p>\n", "solution": "# \n# Solution to Project Euler problem 301\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# In a game of Nim where both players play with perfect strategy, if the current state is a collection (multiset) of piles\n# with sizes {n1, n2, ..., n_m}, then the current player will lose if and only if n1 XOR n2 XOR ... XOR n_m = 0.\n# In this problem, we specialize the condition to just n XOR 2n XOR 3n = 0.\n# \n# Facts:\n#   3n = 2n + n.\n#   a ^ b = 0 iff a = b. (from digital logic)\n#   a + b = (a ^ b) + ((a & b) << 1). (from digital logic)\n# Hence:\n#   n ^ 2n ^ 3n = 0                          (what we want)\n#   iff n ^ 2n = 3n                          (from the second fact)\n#   iff n ^ 2n = (n ^ 2n) + ((n & 2n) << 1)  (from the third fact)\n#   iff (n & 2n) << 1 = 0                    (by cancelling on both sides)\n#   iff n & 2n = 0                           (left-shifting doesn't change zeroness)\n#   iff the binary representation of n does not have consecutive '1' bits.\n# \n# How many binary strings of length i have no consecutive 1's?\n#   First partition the set into strings that begin with a 0 and strings that begin with a 1.\n#   For those that begin with a 0, the rest of the string can be any string of length i-1 that doesn't have consecutive 1's.\n#   For those that begin with a 1, the rest of the string can be any string of length i-1 that begins with a 0 and doesn't have consecutive 1's.\n# Let numStrings(i, j) be the number of bit strings of length i that begin with the bit j and have no consecutive 1's. Then:\n#   numStrings(1, 0) = 1.  (base case)\n#   numStrings(1, 1) = 1.  (base case)\n#   numStrings(i, 0) = numStrings(i-1, 0) + numStrings(i-1, 1).  (for i >= 2)\n#   numStrings(i, 1) = numStrings(i-1, 0).                       (for i >= 2)\n# This corresponds to a shifted Fibonacci sequence, because:\n#   numStrings(i, 0) = numStrings(i-1, 0) + numStrings(i-2, 0).  (substitute)\n#   numStrings(1, 0) = 1.  (base case)\n#   numStrings(2, 0) = 2.  (derived)\n#   So numStrings(i, 0) = fibonacci(i + 1).\n# What we want is numStrings(30, 0) + numStrings(30, 1) = numStrings(31, 0) = fibonacci(32).\n# \n# Actually, that answer considers numbers in the range [0, 2^30), which is not exactly what we want.\n# According to the problem statement, we need to exclude 0 and include 2^30. But both are losing positions, so the adjustments cancel out.\ndef compute():\n\ta = 0\n\tb = 1\n\tfor i in range(32):\n\t\ta, b = b, a + b\n\treturn str(a)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "2178309"}
{"number": 90, "problem": "<p>Each of the six faces on a cube has a different digit ($0$ to $9$) written on it; the same is done to a second cube. By placing the two cubes side-by-side in different positions we can form a variety of $2$-digit numbers.</p>\n\n<p>For example, the square number $64$ could be formed:</p>\n\n<div class=\"center\">\n<img src=\"resources/images/0090.png?1678992052\" class=\"dark_img\" alt=\"\"><br></div>\n\n<p>In fact, by carefully choosing the digits on both cubes it is possible to display all of the square numbers below one-hundred: $01$, $04$, $09$, $16$, $25$, $36$, $49$, $64$, and $81$.</p>\n\n<p>For example, one way this can be achieved is by placing $\\{0, 5, 6, 7, 8, 9\\}$ on one cube and $\\{1, 2, 3, 4, 8, 9\\}$ on the other cube.</p>\n\n<p>However, for this problem we shall allow the $6$ or $9$ to be turned upside-down so that an arrangement like $\\{0, 5, 6, 7, 8, 9\\}$ and $\\{1, 2, 3, 4, 6, 7\\}$ allows for all nine square numbers to be displayed; otherwise it would be impossible to obtain $09$.</p>\n\n<p>In determining a distinct arrangement we are interested in the digits on each cube, not the order.</p>\n\n<ul style=\"list-style-type:none;\"><li>$\\{1, 2, 3, 4, 5, 6\\}$ is equivalent to $\\{3, 6, 4, 1, 2, 5\\}$</li>\n<li>$\\{1, 2, 3, 4, 5, 6\\}$ is distinct from $\\{1, 2, 3, 4, 5, 9\\}$</li></ul>\n\n<p>But because we are allowing $6$ and $9$ to be reversed, the two distinct sets in the last example both represent the extended set $\\{1, 2, 3, 4, 5, 6, 9\\}$ for the purpose of forming $2$-digit numbers.</p>\n\n<p>How many distinct arrangements of the two cubes allow for all of the square numbers to be displayed?</p>\n", "solution": "# \n# Solution to Project Euler problem 90\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\ndef compute():\n\t# Each die has (10 choose 6) arrangements, so we have at most 44100 arrangements to check\n\tans = sum(1\n\t\tfor i in range(1 << 10)\n\t\tfor j in range(i, 1 << 10)  # Ensure i <= j to force the dice to be orderless\n\t\t# If both have Hamming weight of 6\n\t\tif eulerlib.popcount(i) == eulerlib.popcount(j) == 6 and is_arrangement_valid(i, j))\n\treturn str(ans)\n\n\ndef is_arrangement_valid(a, b):\n\tif test_bit(a, 6) or test_bit(a, 9):\n\t\ta |= (1 << 6) | (1 << 9)\n\tif test_bit(b, 6) or test_bit(b, 9):\n\t\tb |= (1 << 6) | (1 << 9)\n\treturn all(((test_bit(a, c) and test_bit(b, d)) or (test_bit(a, d) and test_bit(b, c)))\n\t\tfor (c, d) in SQUARES)\n\n\ndef test_bit(x, i):\n\treturn ((x >> i) & 1) != 0\n\n\nSQUARES = [(i**2 // 10, i**2 % 10) for i in range(1, 10)]\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1217"}
{"number": 123, "problem": "<p>Let $p_n$ be the $n$th prime: $2, 3, 5, 7, 11, \\dots$, and let $r$ be the remainder when $(p_n - 1)^n + (p_n + 1)^n$ is divided by $p_n^2$.</p>\n<p>For example, when $n = 3$, $p_3 = 5$, and $4^3 + 6^3 = 280 \\equiv 5 \\mod 25$.</p>\n<p>The least value of $n$ for which the remainder first exceeds $10^9$ is $7037$.</p>\n<p>Find the least value of $n$ for which the remainder first exceeds $10^{10}$.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 123\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\n# Using the result from Project Euler #120, we know that\n# (a-1)^n + (a+1)^n mod a^2 = if (n is even) then 2 else 2an.\n# Since 2 is tiny, we can skip the n is even case.\n# a is the n'th (1-based) prime number, so a > n. In fact for n >= 5,\n# we have a > 2n, so we can take 2an directly without moduloing it by a^2.\ndef compute():\n\tprimes = eulerlib.list_primes(1000000)\n\tfor n in range(5, len(primes), 2):\n\t\trem = n * primes[n - 1] * 2\n\t\tif rem > 10000000000:\n\t\t\treturn str(n)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "21035"}
{"number": 63, "problem": "<p>The $5$-digit number, $16807=7^5$, is also a fifth power. Similarly, the $9$-digit number, $134217728=8^9$, is a ninth power.</p>\n<p>How many $n$-digit positive integers exist which are also an $n$th power?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 63\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# Let's examine n^k for different values of n and k and see which\n# choices cannot possibly work (i.e. not being exactly k digits long).\n# \n# When n = 10, for each k, n^k has exactly k+1 digits, so these are excluded.\n# By extension, when n > 10, for each k, n^k has at least k+1 digits, so these are excluded.\n# Thus we should only consider 1 <= n <= 9.\n# \n# When n = 9, k = 22, then n^k has 21 digits which is insufficient.\n# Extending this, when n = 9 and k > 22, n^k has fewer than k digits.\n# Furthermore, when n < 9, n^k will have start to have\n# fewer than k digits at some value of k with k < 22.\n# Therefore we should only consider 1 <= k <= 21.\n# \n# We handle the rest of the testing by brute force.\ndef compute():\n\tans = sum(1\n\t\tfor i in range(1, 10)\n\t\tfor j in range(1, 22)\n\t\tif len(str(i**j)) == j)\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "49"}
{"number": 172, "problem": "<p>How many $18$-digit numbers $n$ (without leading zeros) are there such that no digit occurs more than three times in $n$?</p>\n", "solution": "# \n# Solution to Project Euler problem 172\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\n# Highly customizable!\nLENGTH = 18    # >= 1\nMAX_COUNT = 3  # >= ceiling(LENGTH / BASE), else the result is 0\nBASE = 10      # >= 2\n\n\n# Let's explain how to solve this problem mostly by examples rather than by rigorous arguments.\n# \n# We want to generate all the sequences of 18 decimal digits where each digit value (from '0' to '9') is used 0 to 3 times.\n# We can partition the set of all possible sequences by considering, for each sequence, the multiset of digit value repetition counts.\n# For example, the number 111222333444555666 has '1' used 3 times, '2' used 3 times, ..., and '6' used 3 times.\n# When we look at these repetition counts, we see that 3 + 3 + 3 + 3 + 3 + 3 = 18. We always need them to sum to 18 ('LENGTH').\n# \n# There are sequences with other repetition counts too. For example: 121212333444567890, the rep counts are 1 + 3 + 3 + 3 + 3 + 1 + 1 + 1 + 1 + 1.\n# In fact, there are exactly 17 ways (partitions) to express 18 as an unordered sum of 10 terms with each term from 0 to 3:\n# - 3 + 3 + 3 + 3 + 3 + 3 + 0 + 0 + 0 + 0\n# - 3 + 3 + 3 + 3 + 3 + 2 + 1 + 0 + 0 + 0\n# - 3 + 3 + 3 + 3 + 3 + 1 + 1 + 1 + 0 + 0\n# - 3 + 3 + 3 + 3 + 2 + 2 + 2 + 0 + 0 + 0\n# - 3 + 3 + 3 + 3 + 2 + 2 + 1 + 1 + 0 + 0\n# - 3 + 3 + 3 + 3 + 2 + 1 + 1 + 1 + 1 + 0\n# - 3 + 3 + 3 + 3 + 1 + 1 + 1 + 1 + 1 + 1\n# - 3 + 3 + 3 + 2 + 2 + 2 + 2 + 1 + 0 + 0\n# - 3 + 3 + 3 + 2 + 2 + 2 + 1 + 1 + 1 + 0\n# - 3 + 3 + 3 + 2 + 2 + 1 + 1 + 1 + 1 + 1\n# - 3 + 3 + 2 + 2 + 2 + 2 + 2 + 2 + 0 + 0\n# - 3 + 3 + 2 + 2 + 2 + 2 + 2 + 1 + 1 + 0\n# - 3 + 3 + 2 + 2 + 2 + 2 + 1 + 1 + 1 + 1\n# - 3 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 1 + 0\n# - 3 + 2 + 2 + 2 + 2 + 2 + 2 + 1 + 1 + 1\n# - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 0\n# - 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 1 + 1\n# For example, the number 912349441125323088 is associated with the partition (3 + 3 + 3 + 3 + 2 + 2 + 1 + 1 + 0 + 0),\n# because '1' is used 3 times, '2' is used 3 times, '3' is used 3 times, '8' is used 2 times, '9' is used 2 times,\n# '0' is used 1 time, '5' is used 1 time, '6' is used 0 times, and '7' is used 0 times.\n# \n# For each partition, we want to take the 10 decimal digit values and assign them to the terms of the partition. Here is one example assignment:\n#   Frequency:   3 3 3 3 | 2 2 | 1 1 | 0 0\n#   Digit value: 1 2 3 4 | 8 9 | 0 5 | 6 7\n# But note that order does not matter if the frequency is the same - for example, this means the same as above:\n#   Frequency:   3 3 3 3 | 2 2 | 1 1 | 0 0\n#   Digit value: 4 1 3 2 | 8 9 | 5 0 | 7 6\n# \n# For a given partition, how many ways are there to assign digit values to the frequencies?\n# Considering the frequencies and the digit values each as a length-10 sequence (like above),\n# we know that there are 10! raw ways to arrange the digit values. But order within a frequency does not matter.\n# So we divide by the factorial of the repetition count of each frequency. In the example above, the answer is 10! / (4! 2! 2! 2!).\n# (Note that this is a multinomial coefficient.)\n# \n# Now that we have a partition and a digit value assignment to the frequencies, we can generate permutations.\n# For the example above, one possible sequence (and the lexicographically lowest) is 011122233344458899 (length 18).\n# If we permute this sequence, the partition and digit-frequency assignments will remain the same.\n# So we want to count how many permutations this sequence has.\n# \n# Given a partition and a digit-frequency assignment, how many sequences have this classification?\n# Because there are 18 digits, there are 18! raw arrangements of digits for the sequence.\n# But for each digit value, it is repeated k times, so we need to divide by k! to suppress identical-looking arrangements.\n# In this example, there are 18! / (3! 3! 3! 3! 2! 2! 2! 2! 2! 2!) arrangements.\n# \n# Now, all of the arguments above have no made use of the specific digit values, so there is a certain symmetry in the set of desired sequences.\n# In particular, this means exactly 9/10th of all items have a leading zero, hence we multiply by 9/10 to get the final answer.\ndef compute():\n\tans = partition_and_count(LENGTH, MAX_COUNT, [])\n\t# Multiply by (base - 1) / base to discount sequences with leading zeros\n\tans = divide_exactly(ans * (BASE - 1), BASE)\n\treturn str(ans)\n\n\n# Expresses 'LENGTH' as a sum of 'BASE' non-increasing terms, where terms to be added are in the range [0, max].\n# e.g. partitionAndCount(7, 2, [3, 3, 2, 2, 1]) asks us to express 18 as a sum of 5 more terms,\n# where the new terms have a sum of 7 and each is no greater than 2 and all terms are non-increasing.\ndef partition_and_count(sum, max, terms):\n\tif len(terms) == BASE:\n\t\treturn count_ways(terms) if (sum == 0) else 0\n\telse:\n\t\tresult = 0\n\t\tfor i in reversed(range(min(max, sum) + 1)):\n\t\t\tterms.append(i)\n\t\t\tresult += partition_and_count(sum - i, i, terms)\n\t\t\tterms.pop()\n\t\treturn result\n\n\ndef count_ways(freqs):\n\t# The number of times each frequency value occurs\n\thistogram = [0] * (MAX_COUNT + 1)\n\tfor x in freqs:\n\t\thistogram[x] += 1\n\t\n\t# Multinomial coefficient: BASE! / (histogram[0]! * histogram[1]! * ...)\n\tways = math.factorial(BASE)\n\tfor x in histogram:\n\t\tways //= math.factorial(x)\n\t\n\t# Multinomial coefficient: LENGTH! / (freqs[0]! * freqs[1]! * ...)\n\tways *= math.factorial(LENGTH)\n\tfor x in freqs:\n\t\tways //= math.factorial(x)\n\t\n\treturn ways\n\n\ndef divide_exactly(x, y):\n\tif x % y != 0:\n\t\traise ValueError(\"Not divisible\")\n\treturn x // y\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "227485267000992000"}
{"number": 32, "problem": "<p>We shall say that an $n$-digit number is pandigital if it makes use of all the digits $1$ to $n$ exactly once; for example, the $5$-digit number, $15234$, is $1$ through $5$ pandigital.</p>\n\n<p>The product $7254$ is unusual, as the identity, $39 \\times 186 = 7254$, containing multiplicand, multiplier, and product is $1$ through $9$ pandigital.</p>\n\n<p>Find the sum of all products whose multiplicand/multiplier/product identity can be written as a $1$ through $9$ pandigital.</p>\n\n<div class=\"note\">HINT: Some products can be obtained in more than one way so be sure to only include it once in your sum.</div>\n\n", "solution": "# \n# Solution to Project Euler problem 32\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\ndef compute():\n\t# For contradiction suppose a candidate (x, y, z) has z >= 10000.\n\t# Then x*y consumes at least 5 digits. With the 4 (or fewer) remaining digits, even the\n\t# upper bound of x=99 and y=99 produces a product of x*y < 10000, which is unequal to z.\n\t# Therefore we need the product z < 10000 to be able to find possible x and y values.\n\tans = sum(i for i in range(1, 10000) if has_pandigital_product(i))\n\treturn str(ans)\n\n\ndef has_pandigital_product(n):\n\t# Find and examine all factors of n\n\tfor i in range(1, math.isqrt(n) + 1):\n\t\tif n % i == 0:\n\t\t\ttemp = str(n) + str(i) + str(n // i)\n\t\t\tif \"\".join(sorted(temp)) == \"123456789\":\n\t\t\t\treturn True\n\treturn False\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "45228"}
{"number": 493, "problem": "<p>$70$ coloured balls are placed in an urn, $10$ for each of the seven rainbow colours.</p>\n<p>What is the expected number of distinct colours in $20$ randomly picked balls?</p>\n<p>Give your answer with nine digits after the decimal point (a.bcdefghij).</p>\n", "solution": "# \n# Solution to Project Euler problem 493\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport fractions, math\n\n\ndef compute():\n\tNUM_COLORS = 7\n\tBALLS_PER_COLOR = 10\n\tNUM_PICKED = 20\n\tDECIMALS = 9\n\t\n\tnumerator = [0]\n\t\n\tdef explore(remain, limit, history):\n\t\tif remain == 0:\n\t\t\thist = list(history)\n\t\t\twhile len(hist) < NUM_COLORS:\n\t\t\t\thist.append(0)\n\t\t\t\n\t\t\thistogram = [0] * (BALLS_PER_COLOR + 1)\n\t\t\tfor x in hist:\n\t\t\t\thistogram[x] += 1\n\t\t\t\n\t\t\tcount = math.factorial(NUM_COLORS)\n\t\t\tfor x in histogram:\n\t\t\t\tcount = divide_exactly(count, math.factorial(x))\n\t\t\t\n\t\t\tfor x in hist:\n\t\t\t\tcount *= math.comb(BALLS_PER_COLOR, x)\n\t\t\t\n\t\t\tdistinctcolors = len(history)\n\t\t\tnumerator[0] += count * distinctcolors\n\t\t\n\t\telif len(history) < NUM_COLORS:\n\t\t\tfor i in range(min(limit, remain), 0, -1):\n\t\t\t\thistory.append(i)\n\t\t\t\texplore(remain - i, i, history)\n\t\t\t\thistory.pop()\n\t\n\texplore(NUM_PICKED, BALLS_PER_COLOR, [])\n\tdenominator = math.comb(NUM_COLORS * BALLS_PER_COLOR, NUM_PICKED)\n\tans = fractions.Fraction(numerator[0], denominator)\n\treturn format_fraction(ans, DECIMALS)\n\t\n\ndef format_fraction(val, digits):\n\tif digits <= 0:\n\t\traise ValueError()\n\tif val < 0:\n\t\treturn \"-\" + format_fraction(-val, digits)\n\ts = str(round(val * 10**digits)).zfill(digits + 1)\n\treturn f\"{s[:-digits]}.{s[-digits:]}\"\n\n\ndef divide_exactly(x, y):\n\tif x % y != 0:\n\t\traise ValueError(\"Not divisible\")\n\treturn x // y\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "6.818741802"}
{"number": 29, "problem": "<p>Consider all integer combinations of $a^b$ for $2 \\le a \\le 5$ and $2 \\le b \\le 5$:</p>\n\\begin{matrix}\n2^2=4, &amp;2^3=8, &amp;2^4=16, &amp;2^5=32\\\\\n3^2=9, &amp;3^3=27, &amp;3^4=81, &amp;3^5=243\\\\\n4^2=16, &amp;4^3=64, &amp;4^4=256, &amp;4^5=1024\\\\\n5^2=25, &amp;5^3=125, &amp;5^4=625, &amp;5^5=3125\n\\end{matrix}\n<p>If they are then placed in numerical order, with any repeats removed, we get the following sequence of $15$ distinct terms:\n$$4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125.$$</p>\n<p>How many distinct terms are in the sequence generated by $a^b$ for $2 \\le a \\le 100$ and $2 \\le b \\le 100$?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 29\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# We generate all the possible powers in the given range, put each value\n# into a set, and let the set count the number of unique values present.\ndef compute():\n\tseen = set(a**b for a in range(2, 101) for b in range(2, 101))\n\treturn str(len(seen))\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "9183"}
{"number": 169, "problem": "<p>Define $f(0)=1$ and $f(n)$ to be the number of different ways $n$ can be expressed as a sum of integer powers of $2$ using each power no more than twice.</p>\n<p>For example, $f(10)=5$ since there are five different ways to express $10$:</p>\n\\begin{align}\n&amp; 1 + 1 + 8\\\\\n&amp; 1 + 1 + 4 + 4\\\\\n&amp; 1 + 1 + 2 + 2 + 4\\\\\n&amp; 2 + 4 + 4\\\\\n&amp; 2 + 8\n\\end{align}\n<p>What is $f(10^{25})$?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 169\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport functools, sys\n\n\ndef compute():\n\tsys.setrecursionlimit(3000)\n\tNUMBER = 10**25\n\tans = count_ways(NUMBER, NUMBER.bit_length() - 1, 2)\n\treturn str(ans)\n\n\n@functools.cache\ndef count_ways(number, exponent, repetitions):\n\tif exponent < 0:\n\t\treturn 1 if number == 0 else 0\n\telse:\n\t\tresult = count_ways(number, exponent - 1, 2)\n\t\tpower = 1 << exponent\n\t\tupper = power * (repetitions + 2)\n\t\tif repetitions > 0 and power <= number < upper:\n\t\t\tresult += count_ways(number - power, exponent, repetitions - 1)\n\t\treturn result\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "178653872807"}
{"number": 78, "problem": "<p>Let $p(n)$ represent the number of different ways in which $n$ coins can be separated into piles. For example, five coins can be separated into piles in exactly seven different ways, so $p(5)=7$.</p>\n<div class=\"margin_left\">\nOOOOO<br>\nOOOO\u00a0 \u00a0O<br>\nOOO\u00a0 \u00a0OO<br>\nOOO\u00a0 \u00a0O\u00a0 \u00a0O<br>\nOO\u00a0 \u00a0OO\u00a0 \u00a0O<br>\nOO\u00a0 \u00a0O\u00a0 \u00a0O\u00a0 \u00a0O<br>\nO\u00a0 \u00a0O\u00a0 \u00a0O\u00a0 \u00a0O\u00a0 \u00a0O\n</div>\n<p>Find the least value of $n$ for which $p(n)$ is divisible by one million.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 78\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\nMODULUS = 10**6\n\ndef compute():\n\tpartitions = [1]\n\tfor i in itertools.count(len(partitions)):\n\t\t# We calculate partitions[i] mod 10^6 using a formula based on generalized pentagonal numbers:\n\t\t#   partitions(i) =   partitions(i - pentagonal(1)) + partitions(i - pentagonal(-1))\n\t\t#                   - partitions(i - pentagonal(2)) - partitions(i - pentagonal(-2))\n\t\t#                   + partitions(i - pentagonal(3)) + partitions(i - pentagonal(-3))\n\t\t#                   - partitions(i - pentagonal(4)) - partitions(i - pentagonal(-4))\n\t\t#                   + ...,\n\t\t#   where pentagonal(j) = (3*n^2 - n) / 2, and\n\t\t#   we stop the sum when i - pentagonal(+/-j) < 0.\n\t\t# Note that for j > 0, pentagonal(j) < pentagonal(-j) < pentagonal(j+1).\n\t\t# \n\t\t# (The formula is used without mathematical justification;\n\t\t# see https://en.wikipedia.org/wiki/Partition_(number_theory)#Generating_function .)\n\t\titem = 0\n\t\tfor j in itertools.count(1):\n\t\t\tsign = -1 if j % 2 == 0 else +1\n\t\t\tindex = (j * j * 3 - j) // 2\n\t\t\tif index > i:\n\t\t\t\tbreak\n\t\t\titem += partitions[i - index] * sign\n\t\t\tindex += j  # index == (j * j * 3 + j) // 2\n\t\t\tif index > i:\n\t\t\t\tbreak\n\t\t\titem += partitions[i - index] * sign\n\t\t\titem %= MODULUS\n\t\t\n\t\t# Check or memoize the number\n\t\tif item == 0:\n\t\t\treturn str(i)\n\t\tpartitions.append(item)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "55374"}
{"number": 128, "problem": "<p>A hexagonal tile with number $1$ is surrounded by a ring of six hexagonal tiles, starting at \"12 o'clock\" and numbering the tiles $2$ to $7$ in an anti-clockwise direction.</p>\n<p>New rings are added in the same fashion, with the next rings being numbered $8$ to $19$, $20$ to $37$, $38$ to $61$, and so on. The diagram below shows the first three rings.</p>\n<div class=\"center\">\n<img src=\"resources/images/0128.png?1678992052\" class=\"dark_img\" alt=\"\"></div>\n<p>By finding the difference between tile $n$ and each of its six neighbours we shall define $PD(n)$ to be the number of those differences which are prime.</p>\n<p>For example, working clockwise around tile $8$ the differences are $12, 29, 11, 6, 1$, and $13$. So $PD(8) = 3$.</p>\n<p>In the same way, the differences around tile $17$ are $1, 17, 16, 1, 11$, and $10$, hence $PD(17) = 2$.</p>\n<p>It can be shown that the maximum value of $PD(n)$ is $3$.</p>\n<p>If all of the tiles for which $PD(n) = 3$ are listed in ascending order to form a sequence, the $10$th tile would be $271$.</p>\n<p>Find the $2000$th tile in this sequence.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 128\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, itertools\n\n\n# Let's do mathematical analysis to drastically reduce the amount of\n# logic we need to implement and calculation the computer needs to do.\n# We begin with a couple of definitions.\n# \n# Ring number: Each cell belongs in a hexagonal ring,\n# numbered starting from 0 at the center like this:\n#               3\n#           3       3\n#       3       2       3\n#   3       2       2       3\n#       2       1       2\n#   3       1       1       3\n#       2       0       2\n#   3       1       1       3\n#       2       1       2\n#   3       2       2       3\n#       3       2       3\n#           3       3\n#               3\n# \n# Corner/edge cell: Within a ring, each cell is\n# either a corner cell or an edge cell, as shown:\n#               C\n#           E       E\n#       E       C       E\n#   C       E       E       C\n#       C       C       C\n#   E       C       C       E\n#       E       C       E\n#   E       C       C       E\n#       C       C       C\n#   C       E       E       C\n#       E       C       E\n#           E       E\n#               C\n# \n# Basic observations:\n# - Except for the degenerate ring 0, each ring k has 6k cells.\n#   The kth ring has exactly 6 corner cells and 6(k - 1) edge cells.\n# - In the code we will skip the PD (prime difference) calculation for\n#   rings 0 and 1 because the existence of ring 0 breaks many patterns.\n# - Doing the PD calculation for rings 0 and 1 by hand (n = 1 to 7\n#   inclusive), we find that PD(n) = 3 for and only for n = 1, 2.\n# \n# Now let's analyze the characteristics of all cells in rings 2 or above.\n# It's hard to justify these assertions rigorously, but they are true from\n# looking at the spiral diagram.\n# \n# - Corner cells along the upward vertical direction and the edge cells\n#   immediately to the right of this vertical column are the most interesting,\n#   so we will save these cases for last.\n# \n# - Claim: Except for cells immediately right of the upward corner column,\n#   no edge cell satisfies PD(n) = 3. Proof: Take an arbitrary edge cell n\n#   not immediately to the right of the upward corner column...\n#   - The two neighbors in the same ring have a difference of 1 compared to n,\n#     which is not a prime number.\n#   - The two neighbors in the previous (inward) ring are consecutive numbers,\n#     so exactly one of them has an even absolute difference with n. Because\n#     n is in ring 2 or above, the difference with any neighboring number in the\n#     previous ring is at least 6. Thus an even number greater than 2 is not prime.\n#   - Similarly, the two neighbors in the next (outward) ring are consecutive numbers.\n#     One of them has an even difference with n, and this number is also at least 6,\n#     so one neighbor is definitely not prime.\n#   - Therefore with at least 4 neighbors that do not have a prime difference, PD(n) <= 2.\n#   Example of an edge cell n = 11 in ring 2, which is straight left of the origin:\n#         10\n#     24      03\n#         11\n#     25      04\n#         12\n# \n# - Claim: No corner cell in the other 5 directions satisfies PD(n) = 3.\n#   Proof: Take an arbitrary corner cell n in the non-upward direction...\n#   - Two of its neighbors (in the same ring) have a difference of 1,\n#     which is not prime.\n#   - One neighbor is in the previous ring (inward) while three neighbors\n#     are in the next ring (outward).\n#   - Let the inner ring neighbor be k and the outer ring's middle neighbor\n#     be m. The three outer ring neighbors are {m - 1, m, m + 1}.\n#   - Then n - k + 6 = m - n. Also, {m - 1, m + 1} have the same parity,\n#     and {k, m} have the same other parity.\n#   - Either both {|k - n|, |m - n|} are even or both {|m - 1 - n|, |m + 1 - n|} are even.\n#     In any case, all these differences are at least 6, so the even numbers are not prime.\n#   - Therefore with at least 4 neighbors that do not have a prime difference, PD(n) <= 2.\n#   Example of a corner cell n = 14 in ring 2, which is straight below the origin:\n#         05\n#     13      15\n#         14\n#     28      30\n#         29\n# \n# - Now let's consider an arbitrary upward corner cell n in ring k, with k >= 2.\n#   We shall give variables to all its neighbors like this:\n#         d\n#     e       f\n#         n\n#     b       c\n#         a\n#   - a is in the previous ring, {b, c} are in the same ring as n,\n#     and {d, e, f} are in the next ring.\n#   - Equations derived from the structure of the hexagonal spiral:\n#     n = 3k(k - 1) + 2.\n#     a = n - 6(k - 1).\n#     b = n + 1.\n#     c = n + 6k - 1 = d - 1.\n#     d = n + 6k.\n#     e = n + 6k + 1 = d + 1.\n#     f = n + 6k + 6(k + 1) - 1 = n + 12k + 5.\n#   - Hence we get these absolute differences with n:\n#     |a - n| = 6(k - 1). (Not prime because it's a multiple of 6)\n#     |b - n| = 1. (Not prime)\n#     |c - n| = 6k - 1. (Possibly prime)\n#     |d - n| = 6k. (Not prime because it's a multiple of 6)\n#     |e - n| = 6k + 1. (Possibly prime)\n#     |f - n| = 12k + 5. (Possibly prime)\n#   - Therefore for each k >= 2, we need to count how many numbers\n#     in the set {6k - 1, 6k + 1, 12k + 5} are prime.\n#   Example of a corner cell n = 8 in ring 2, which is straight above the origin:\n#         20\n#     21      37\n#         08\n#     09      19\n#         02\n# \n# - Finally let's consider an arbitrary edge cell immediately to the right of the\n#   upward vertical column. Suppose the cell's value is n and it is in ring k,\n#   with k >= 2. Give variables to all its neighbors like this:\n#         f\n#     c       e\n#         n\n#     a       d\n#         b\n#   - {a, b} are in the previous ring, {c, d} are in the current ring, and {e, f} are in\n#     the next ring. The ascending ordering of all these numbers is (a, b, c, d, n, e, f).\n#   - Equations derived from the structure of the hexagonal spiral:\n#     n = 3k(k + 1) + 1.\n#     a = n - 6k - 6(k - 1) + 1 = n - 12k + 7.\n#     b = n - 6k.\n#     c = n - 6k + 1.\n#     d = n - 1.\n#     e = n + 6(k + 1) - 1 = n + 6k + 5.\n#     f = n + 6(k + 1).\n#   - Hence we get these absolute differences with n:\n#     |a - n| = 12k - 7. (Possibly prime)\n#     |b - n| = 6k. (Not prime because it's a multiple of 6)\n#     |c - n| = 6k - 1. (Possibly prime)\n#     |d - n| = 1. (Not prime)\n#     |e - n| = 6k + 5. (Possibly prime)\n#     |f - n| = 6(k + 1). (Not prime because it's a multiple of 6)\n#   - Therefore for each k >= 2, we need to count how many numbers\n#     in the set {6k - 1, 6k + 5, 12k - 7} are prime.\n#   Example of an edge cell n = 19 in ring 2:\n#         37\n#     08      36\n#         19\n#     02      18\n#         07\ndef compute():\n\tTARGET = 2000  # Must be at least 3\n\tcount = 2  # Because n = 1 and 2 satisfy PD(n) = 3\n\tfor ring in itertools.count(2):\n\t\tif all(map(eulerlib.is_prime, (ring * 6 - 1, ring * 6 + 1, ring * 12 + 5))):\n\t\t\tcount += 1\n\t\t\tif count == TARGET:\n\t\t\t\treturn str(ring * (ring - 1) * 3 + 2)\n\t\tif all(map(eulerlib.is_prime, (ring * 6 - 1, ring * 6 + 5, ring * 12 - 7))):\n\t\t\tcount += 1\n\t\t\tif count == TARGET:\n\t\t\t\treturn str(ring * (ring + 1) * 3 + 1)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "14516824220"}
{"number": 68, "problem": "<p>Consider the following \"magic\" 3-gon ring, filled with the numbers 1 to 6, and each line adding to nine.</p>\n<div class=\"center\">\n<img src=\"resources/images/0068_1.png?1678992052\" class=\"dark_img\" alt=\"\"><br></div>\n<p>Working <b>clockwise</b>, and starting from the group of three with the numerically lowest external node (4,3,2 in this example), each solution can be described uniquely. For example, the above solution can be described by the set: 4,3,2; 6,2,1; 5,1,3.</p>\n<p>It is possible to complete the ring with four different totals: 9, 10, 11, and 12. There are eight solutions in total.</p>\n<div class=\"center\">\n<table width=\"400\" cellspacing=\"0\" cellpadding=\"0\"><tr><td width=\"100\"><b>Total</b></td><td width=\"300\"><b>Solution Set</b></td>\n</tr><tr><td>9</td><td>4,2,3; 5,3,1; 6,1,2</td>\n</tr><tr><td>9</td><td>4,3,2; 6,2,1; 5,1,3</td>\n</tr><tr><td>10</td><td>2,3,5; 4,5,1; 6,1,3</td>\n</tr><tr><td>10</td><td>2,5,3; 6,3,1; 4,1,5</td>\n</tr><tr><td>11</td><td>1,4,6; 3,6,2; 5,2,4</td>\n</tr><tr><td>11</td><td>1,6,4; 5,4,2; 3,2,6</td>\n</tr><tr><td>12</td><td>1,5,6; 2,6,4; 3,4,5</td>\n</tr><tr><td>12</td><td>1,6,5; 3,5,4; 2,4,6</td>\n</tr></table></div>\n<p>By concatenating each group it is possible to form 9-digit strings; the maximum string for a 3-gon ring is 432621513.</p>\n<p>Using the numbers 1 to 10, and depending on arrangements, it is possible to form 16- and 17-digit strings. What is the maximum <b>16-digit</b> string for a \"magic\" 5-gon ring?</p>\n<div class=\"center\">\n<img src=\"resources/images/0068_2.png?1678992052\" class=\"dark_img\" alt=\"\"><br></div>\n\n", "solution": "# \n# Solution to Project Euler problem 68\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\ndef compute():\n\tstate = list(range(1, 11))\n\tmax = None\n\twhile True:\n\t\tif state[0] + state[5] + state[6] == \\\n\t\t   state[1] + state[6] + state[7] == \\\n\t\t   state[2] + state[7] + state[8] == \\\n\t\t   state[3] + state[8] + state[9] == \\\n\t\t   state[4] + state[9] + state[5]:\n\t\t\t\n\t\t\tminouterindex = 0\n\t\t\tminouter = state[0]\n\t\t\tfor i in range(1, 5):\n\t\t\t\tif state[i] < minouter:\n\t\t\t\t\tminouterindex = i\n\t\t\t\t\tminouter = state[i]\n\t\t\t\n\t\t\ts = \"\"\n\t\t\tfor i in range(5):\n\t\t\t\ts += str(state[(minouterindex + i) % 5])\n\t\t\t\ts += str(state[(minouterindex + i) % 5 + 5])\n\t\t\t\ts += str(state[(minouterindex + i + 1) % 5 + 5])\n\t\t\tif len(s) == 16 and (max is None or s > max):\n\t\t\t\tmax = s\n\t\t\n\t\tif not eulerlib.next_permutation(state):\n\t\t\tbreak\n\t\n\tassert max is not None\n\treturn max\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "6531031914842725"}
{"number": 179, "problem": "<p>Find the number of integers $1 \\lt n \\lt 10^7$, for which $n$ and $n + 1$ have the same number of positive divisors. For example, $14$ has the positive divisors $1, 2, 7, 14$ while $15$ has $1, 3, 5, 15$.</p>\n", "solution": "# \n# Solution to Project Euler problem 179\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tdivisors = [2] * (10**7 + 1)  # Invalid for indexes 0 and 1\n\tfor i in range(2, (len(divisors) + 1) // 2):\n\t\tfor j in range(i * 2, len(divisors), i):\n\t\t\tdivisors[j] += 1\n\t\n\tans = sum((1 if divisors[i] == divisors[i + 1] else 0) for i in range(2, len(divisors) - 1))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "986262"}
{"number": 39, "problem": "<p>If $p$ is the perimeter of a right angle triangle with integral length sides, $\\{a, b, c\\}$, there are exactly three solutions for $p = 120$.</p>\n<p>$\\{20,48,52\\}$, $\\{24,45,51\\}$, $\\{30,40,50\\}$</p>\n<p>For which value of $p \\le 1000$, is the number of solutions maximised?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 39\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tans = max(range(1, 1001), key=count_solutions)\n\treturn str(ans)\n\n\ndef count_solutions(p):\n\tresult = 0\n\tfor a in range(1, p + 1):\n\t\tfor b in range(a, (p - a) // 2 + 1):\n\t\t\tc = p - a - b  # c >= b\n\t\t\tif a * a + b * b == c * c:\n\t\t\t\tresult += 1\n\treturn result\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "840"}
{"number": 401, "problem": "<p>\nThe divisors of $6$ are $1,2,3$ and $6$.<br>\nThe sum of the squares of these numbers is $1+4+9+36=50$.\n</p>\n<p>\nLet $\\operatorname{sigma}_2(n)$ represent the sum of the squares of the divisors of $n$.\nThus $\\operatorname{sigma}_2(6)=50$.\n</p>\nLet $\\operatorname{SIGMA}_2$ represent the summatory function of $\\operatorname{sigma}_2$, that is $\\operatorname{SIGMA}_2(n)=\\sum \\operatorname{sigma}_2(i)$ for $i=1$ to $n$.<br>\nThe first $6$ values of $\\operatorname{SIGMA}_2$ are: $1,6,16,37,63$ and $113$.\n\n<p>\nFind $\\operatorname{SIGMA}_2(10^{15})$ modulo $10^9$. \n</p>\n", "solution": "# \n# Solution to Project Euler problem 401\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\n# Consider the set of all integers from 1 to n, inclusive: {1, 2, ..., n}.\n# Now form the set of divisors for each number:\n#   1: {1}\n#   2: {1, 2}\n#   3: {1, 3}\n#   4: {1, 2, 4}\n#   5: {1, 5}\n#   6: {1, 2, 3, 6}\n#   et cetera until n.\n# Next consider the multiset union of all these sets of divisors.\n# \n# We know that for a given integer k > 0, it occurs as a divisor in this multiset\n# exactly floor(n / k) times (we call this the \"count\"), which are namely the multiples of k.\n# So instead of considering each integer and summing its squared divisors, we can consider\n# each divisor from 1 to n and compute how much it contributes to the final sum, namely floor(n / k) * k^2.\n# \n# A further observation is that when k is large, the count factor of floor(n / k) does not change often.\n# (For example, for k from floor(n/2)+1 to n, this count is always 1.)\n# So we can calculate the squared divisor sum for many numbers at a time.\n# This is helpful for k > sqrt(n), and we can bring the run time from O(n) down to O(sqrt(n)).\n# \n# For a given count of m = floor(n / k), which integer values of k yield this m?\n# By the definition of floor, m <= n/k, so mk <= n, and k <= n/m, thus k <= floor(n/m).\n# Also by definition, m > n/k - 1, so mk > n - k, and k(m + 1) > n, and k > n/(m+1), so k > floor(n/(m+1)).\n# Together, we have: floor(n / (m + 1)) < k <= floor(n / m).\n# \n# Useful fact: (sum k^2 for k=1 to n) = n(n + 1)(2n + 1) / 6.\ndef compute():\n\tLIMIT = 10**15\n\tMODULUS = 10**9\n\t\n\t# Can be any number from 1 to LIMIT, but somewhere near sqrt(LIMIT) is preferred\n\tsplitcount = math.isqrt(LIMIT)\n\t# Consider divisors individually up and including this number\n\tsplitat = LIMIT // (splitcount + 1)\n\t\n\t# The sum (s+1)^2 + (s+2)^2 + ... + (e-1)^2 + e^2.\n\tdef sum_squares(s, e):\n\t\treturn (e * (e + 1) * (e * 2 + 1) - s * (s + 1) * (s * 2 + 1)) // 6\n\t\n\tans = sum((i * i * (LIMIT // i)) for i in range(1, splitat + 1))\n\tans += sum((sum_squares(LIMIT // (i + 1), LIMIT // i) * i) for i in range(1, splitcount + 1))\n\treturn str(ans % MODULUS)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "281632621"}
{"number": 19, "problem": "\n<p>You are given the following information, but you may prefer to do some research for yourself.</p>\n<ul><li>1 Jan 1900 was a Monday.</li>\n<li>Thirty days has September,<br />\nApril, June and November.<br />\nAll the rest have thirty-one,<br />\nSaving February alone,<br />\nWhich has twenty-eight, rain or shine.<br />\nAnd on leap years, twenty-nine.</li>\n<li>A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.</li>\n</ul><p>How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 19\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport datetime\n\n\n# We simply use Python's built-in date library to compute the answer by brute force.\ndef compute():\n\tans = sum(1\n\t\tfor y in range(1901, 2001)\n\t\tfor m in range(1, 13)\n\t\tif datetime.date(y, m, 1).weekday() == 6)\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "171"}
{"number": 108, "problem": "<p>In the following equation $x$, $y$, and $n$ are positive integers.</p>\n$$\\dfrac{1}{x} + \\dfrac{1}{y} = \\dfrac{1}{n}$$\n<p>For $n = 4$ there are exactly three distinct solutions:</p>\n$$\\begin{align}\n\\dfrac{1}{5} + \\dfrac{1}{20} &amp;= \\dfrac{1}{4}\\\\\n\\dfrac{1}{6} + \\dfrac{1}{12} &amp;= \\dfrac{1}{4}\\\\\n\\dfrac{1}{8} + \\dfrac{1}{8} &amp;= \\dfrac{1}{4}\n\\end{align}\n$$\n\n<p>What is the least value of $n$ for which the number of distinct solutions exceeds one-thousand?</p>\n<p class=\"note\">", "solution": "# \n# Solution to Project Euler problem 108\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools, math\n\n\n# Rewrite the equation with x = n+i, y = n+j, and manipulate it:\n#   1/n = 1/x + 1/y\n#       = 1/(n+i) + 1/(n+j)\n#       = (2n+i+j) / ((n+i)(n+j)).\n#   n(2n+i+j) = (n+i)(n+j).\n#   2n^2 + ni + nj = n^2 + ni + nj + ij.\n#   n^2 = ij.\n# Hence i and j are divisors of n^2. To ensure unique solutions,\n# we impose that x <= y, so i <= j. Also, i > 0, otherwise no j exists.\n# We have i <= j = n^2 / i, thus i^2 <= n^2. With i being positive, we get that i <= n.\n# Therefore the number of solutions for i is the number of divisors of n^2 in the range [1, n].\n# n^2 always has an odd number of divisors. One of them is n. As for the remainder of them, half of them are below n\n# and half of them are above n. So if n^2 has m divisors, then we want (m+1)/2 of them as solutions for i.\ndef compute():\n\tfor n in itertools.count(1):\n\t\tif (count_divisors_squared(n) + 1) // 2 > 1000:\n\t\t\treturn str(n)\n\n\n# Returns the number of divisors of n^2\ndef count_divisors_squared(n):\n\tcount = 1\n\tend = math.isqrt(n)\n\tfor i in itertools.count(2):\n\t\tif i > end:\n\t\t\tbreak\n\t\tif n % i == 0:\n\t\t\tj = 0\n\t\t\twhile True:\n\t\t\t\tn //= i\n\t\t\t\tj += 1\n\t\t\t\tif n % i != 0:\n\t\t\t\t\tbreak\n\t\t\tcount *= j * 2 + 1\n\t\t\tend = math.isqrt(n)\n\tif n != 1:  # Remaining largest prime factor\n\t\tcount *= 3\n\treturn count\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "180180"}
{"number": 48, "problem": "<p>The series, $1^1 + 2^2 + 3^3 + \\cdots + 10^{10} = 10405071317$.</p>\n<p>Find the last ten digits of the series, $1^1 + 2^2 + 3^3 + \\cdots + 1000^{1000}$.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 48\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tMOD = 10**10\n\tans = sum(pow(i, i, MOD) for i in range(1, 1001)) % MOD\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "9110846700"}
{"number": 58, "problem": "<p>Starting with $1$ and spiralling anticlockwise in the following way, a square spiral with side length $7$ is formed.</p>\n<p class=\"center monospace\"><span class=\"red\"><b>37</b></span> 36 35 34 33 32 <span class=\"red\"><b>31</b></span><br>\n38 <span class=\"red\"><b>17</b></span> 16 15 14 <span class=\"red\"><b>13</b></span> 30<br>\n39 18 <span class=\"red\">\u00a0<b>5</b></span> \u00a04 <span class=\"red\">\u00a0<b>3</b></span> 12 29<br>\n40 19 \u00a06 \u00a01 \u00a02 11 28<br>\n41 20 <span class=\"red\">\u00a0<b>7</b></span> \u00a08 \u00a09 10 27<br>\n42 21 22 23 24 25 26<br><span class=\"red\"><b>43</b></span> 44 45 46 47 48 49</p>\n<p>It is interesting to note that the odd squares lie along the bottom right diagonal, but what is more interesting is that $8$ out of the $13$ numbers lying along both diagonals are prime; that is, a ratio of $8/13 \\approx 62\\%$.</p>\n<p>If one complete new layer is wrapped around the spiral above, a square spiral with side length $9$ will be formed. If this process is continued, what is the side length of the square spiral for which the ratio of primes along both diagonals first falls below $10\\%$?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 58\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, fractions, itertools\n\n\n# From the diagram, let's observe the four corners of an n * n square (where n is odd).\n# It's not hard to convince yourself that:\n# - The bottom right corner always has the value n^2.\n# Working clockwise (backwards):\n# - The bottom left corner has the value n^2 - (n - 1).\n# - The top left corner has the value n^2 - 2(n - 1).\n# - The top right has the value n^2 - 3(n - 1).\n# Furthermore, the number of elements on the diagonal is 2n - 1.\ndef compute():\n\tTARGET = fractions.Fraction(1, 10)\n\tnumprimes = 0\n\tfor n in itertools.count(1, 2):\n\t\tfor i in range(4):\n\t\t\tif eulerlib.is_prime(n * n - i * (n - 1)):\n\t\t\t\tnumprimes += 1\n\t\tif n > 1 and fractions.Fraction(numprimes, n * 2 - 1) < TARGET:\n\t\t\treturn str(n)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "26241"}
{"number": 118, "problem": "<p>Using all of the digits $1$ through $9$ and concatenating them freely to form decimal integers, different sets can be formed. Interestingly with the set $\\{2,5,47,89,631\\}$, all of the elements belonging to it are prime.</p>\n<p>How many distinct sets containing each of the digits one through nine exactly once contain only prime elements?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 118\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\ndef compute():\n\tisprime = eulerlib.list_primality(10000)  # Cache for small numbers\n\tdigits = list(range(1, 10))\n\t\n\tdef count_prime_sets(startindex, prevnum):\n\t\tif startindex == len(digits):\n\t\t\treturn 1\n\t\telse:\n\t\t\tresult = 0\n\t\t\tfor split in range(startindex + 1, len(digits) + 1):\n\t\t\t\tnum = int(\"\".join(map(str, digits[startindex : split])))\n\t\t\t\tif num > prevnum and is_prime(num):\n\t\t\t\t\tresult += count_prime_sets(split, num)\n\t\t\treturn result\n\t\n\tdef is_prime(n):\n\t\tif n < len(isprime):\n\t\t\treturn isprime[n]\n\t\telse:\n\t\t\treturn eulerlib.is_prime(n)\n\t\n\tans = 0\n\twhile True:\n\t\tans += count_prime_sets(0, 0)\n\t\tif not eulerlib.next_permutation(digits):\n\t\t\tbreak\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "44680"}
{"number": 9, "problem": "<p>A Pythagorean triplet is a set of three natural numbers, $a \\lt b \\lt c$, for which,\n$$a^2 + b^2 = c^2.$$</p>\n<p>For example, $3^2 + 4^2 = 9 + 16 = 25 = 5^2$.</p>\n<p>There exists exactly one Pythagorean triplet for which $a + b + c = 1000$.<br>Find the product $abc$.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 9\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# Computers are fast, so we can implement a brute-force search to directly solve the problem.\ndef compute():\n\tPERIMETER = 1000\n\tfor a in range(1, PERIMETER + 1):\n\t\tfor b in range(a + 1, PERIMETER + 1):\n\t\t\tc = PERIMETER - a - b\n\t\t\tif a * a + b * b == c * c:\n\t\t\t\t# It is now implied that b < c, because we have a > 0\n\t\t\t\treturn str(a * b * c)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "31875000"}
{"number": 149, "problem": "<p>Looking at the table below, it is easy to verify that the maximum possible sum of adjacent numbers in any direction (horizontal, vertical, diagonal or anti-diagonal) <span style=\"white-space:nowrap;\">is $16$ ($= 8 + 7 + 1$).</span></p>\n\n<div class=\"center\">\n<table border=\"1\" cellpadding=\"6\" cellspacing=\"0\" style=\"margin:auto;\"><tbody align=\"right\"><tr><td width=\"25\">$-2$</td><td width=\"25\">$5$</td><td width=\"25\">$3$</td><td width=\"25\">$2$</td></tr><tr><td>$9$</td><td>$-6$</td><td>$5$</td><td>$1$</td></tr><tr><td>$3$</td><td>$2$</td><td>$7$</td><td>$3$</td></tr><tr><td>$-1$</td><td>$8$</td><td>$-4$</td><td>$8$</td></tr></tbody></table></div>\n\n<p>Now, let us repeat the search, but on a much larger scale:</p>\n\n<p>First, generate four million pseudo-random numbers using a specific form of what is known as a \"Lagged Fibonacci Generator\":</p>\n\n<p>For $1 \\le k \\le 55$, $s_k = [100003 - 200003 k + 300007 k^3] \\pmod{1000000} - 500000$.<br>\nFor $56 \\le k \\le 4000000$, $s_k = [s_{k-24} + s_{k - 55} + 1000000] \\pmod{1000000} - 500000$.</p>\n\n<p>Thus, $s_{10} = -393027$ and $s_{100} = 86613$.</p>\n\n<p>The terms of $s$ are then arranged in a $2000 \\times 2000$ table, using the first $2000$ numbers to fill the first row (sequentially), the next $2000$ numbers to fill the second row, and so on.</p>\n\n<p>Finally, find the greatest sum of (any number of) adjacent entries in any direction (horizontal, vertical, diagonal or anti-diagonal).</p>\n", "solution": "# \n# Solution to Project Euler problem 149\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tSIZE = 2000\n\t\n\t# Generate the pseudorandom sequence according to the lagged Fibonacci generator\n\trandseq = []\n\tfor i in range(SIZE**2):\n\t\tk = i + 1\n\t\tif k <= 55:\n\t\t\trandseq.append((100003 - 200003*k + 300007*k*k*k) % 1000000 - 500000)\n\t\telse:\n\t\t\trandseq.append((randseq[-24] + randseq[-55]) % 1000000 - 500000)\n\t\n\t# Reshape the sequence into into a 2D array\n\tgrid = [randseq[i * SIZE : (i + 1) * SIZE] for i in range(SIZE)]\n\t\n\t# For the sequence of numbers in the grid at positions (x, y), (x+dx, y+dy), (x+2*dx, y+2*dy), ... until the\n\t# last in-bounds indices, this function returns the maximum sum among all possible substrings of this sequence.\n\tdef get_max_substring_sum(x, y, dx, dy):\n\t\tresult = 0\n\t\tcurrent = 0\n\t\twhile 0 <= x < SIZE and 0 <= y < SIZE:\n\t\t\tcurrent = max(current + grid[y][x], 0)  # Reset the running sum if it goes negative\n\t\t\tresult = max(current, result)  # Keep track of the best seen running sum\n\t\t\tx += dx\n\t\t\ty += dy\n\t\treturn result\n\t\n\t# Scan along all line directions and positions\n\tans = max(\n\t\tmax(get_max_substring_sum(0, i, +1,  0),  # Horizontal from left edge\n\t\t    get_max_substring_sum(i, 0,  0, +1),  # Vertical from top edge\n\t\t    get_max_substring_sum(0, i, +1, +1),  # Diagonal from left edge\n\t\t    get_max_substring_sum(i, 0, +1, +1),  # Diagonal from top edge\n\t\t    get_max_substring_sum(i, 0, -1, +1),  # Anti-diagonal from top edge\n\t\t    get_max_substring_sum(SIZE - 1, i, -1, +1))  # Anti-diagonal from right edge\n\t\tfor i in range(SIZE))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "52852124"}
{"number": 425, "problem": "<p>\nTwo positive numbers $A$ and $B$ are said to be <dfn>connected</dfn> (denoted by \"$A \\leftrightarrow B$\") if one of these conditions holds:<br>\n(1) $A$ and $B$ have the same length and differ in exactly one digit; for example, $123 \\leftrightarrow 173$.<br>\n(2) Adding one digit to the left of $A$ (or $B$) makes $B$ (or $A$); for example, $23 \\leftrightarrow 223$ and $123 \\leftrightarrow 23$.\n</p>\n<p>\nWe call a prime $P$ a <dfn>$2$'s relative</dfn> if there exists a chain of connected primes between $2$ and $P$ and no prime in the chain exceeds $P$.\n</p>\n<p>\nFor example, $127$ is a $2$'s relative. One of the possible chains is shown below:<br>\n$2 \\leftrightarrow 3 \\leftrightarrow 13 \\leftrightarrow 113 \\leftrightarrow 103 \\leftrightarrow 107 \\leftrightarrow 127$<br>\nHowever, $11$ and $103$ are not $2$'s relatives.\n</p>\n<p>\nLet $F(N)$ be the sum of the primes $\\leq N$ which are not $2$'s relatives.<br>\nWe can verify that $F(10^3) = 431$ and $F(10^4) = 78728$.\n</p>\n<p>\nFind $F(10^7)$.\n</p>\n", "solution": "# \n# Solution to Project Euler problem 425\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, heapq\n\n\n# Finding all the relatives of 2 can be seen as a single-source shortest path problem,\n# which we solve here using Dijkstra's algorithm. The key insight is that at each node (prime number),\n# we consider the connection path from 2 to it, and store the maximum path number at the node.\n# It is amenable to dynamic programming because it's always best to minimize the maximum path number.\n# \n# For example, 2 is connected to 103 because 2 <-> 3 <-> 13 <-> 113 <-> 103.\n# The maximum number along this path is 113, and among all paths\n# this is the minimum possible maximum, so 103 is not a relative of 2.\ndef compute():\n\tLIMIT = 10**7\n\t\n\tisprime = eulerlib.list_primality(LIMIT)\n\t\n\t# pathmax[i] = None if i is not prime or i is not connected to 2.\n\t# Otherwise, considering all connection paths from 2 to i and for each path computing\n\t# the maximum number, pathmax[i] is the minimum number among all these maxima.\n\tpathmax = [None] * len(isprime)\n\t\n\t# Process paths in increasing order of maximum number\n\tqueue = [(2, 2)]\n\twhile len(queue) > 0:\n\t\tpmax, n = heapq.heappop(queue)\n\t\tif pathmax[n] is not None and pmax >= pathmax[n]:\n\t\t\t# This happens if at the time this update was queued, a better\n\t\t\t# or equally good update was queued ahead but not processed yet\n\t\t\tcontinue\n\t\t\n\t\t# Update the target node and explore neighbors\n\t\tpathmax[n] = pmax\n\t\t\n\t\t# Try all replacements of a single digit, including the leading zero.\n\t\t# This generates exactly all (no more, no less) the ways that a number m is connected to n.\n\t\tdigits = to_digits(n)\n\t\ttempdigits = list(digits)\n\t\tfor i in range(len(tempdigits)):  # For each digit position\n\t\t\tfor j in range(10):  # For each digit value\n\t\t\t\ttempdigits[i] = j\n\t\t\t\tm = to_number(tempdigits)\n\t\t\t\tnextpmax = max(m, pmax)\n\t\t\t\tif m < len(isprime) and isprime[m] and (pathmax[m] is None or nextpmax < pathmax[m]):\n\t\t\t\t\theapq.heappush(queue, (nextpmax, m))\n\t\t\ttempdigits[i] = digits[i]  # Restore the digit\n\t\n\tans = sum(i for i in range(len(isprime))\n\t\tif isprime[i] and (pathmax[i] is None or pathmax[i] > i))\n\treturn str(ans)\n\n\n# Returns the given non-negative integer as an array of digits, in big endian, with an extra leading zero.\n# e.g. 0 -> [0,0]; 1 -> [0,1]; 8 -> [0,8]; 42 -> [0,4,2]; 596 -> [0,5,9,6].\ndef to_digits(n):\n\tif n < 0:\n\t\traise ValueError()\n\t\n\t# Extract base-10 digits in little endian\n\ttemp = []\n\twhile True:\n\t\ttemp.append(n % 10)\n\t\tn //= 10\n\t\tif n == 0:\n\t\t\tbreak\n\t\n\ttemp.append(0)\n\ttemp.reverse()\n\treturn temp\n\n\ndef to_number(digits):\n\tresult = 0\n\tfor x in digits:\n\t\tresult = result * 10 + x\n\treturn result\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "46479497324"}
{"number": 500, "problem": "<p>The number of divisors of $120$ is $16$.<br>\nIn fact $120$ is the smallest number having $16$ divisors.\n</p>\n<p>\nFind the smallest number with $2^{500500}$ divisors.<br>\nGive your answer modulo $500500507$.\n</p>\n\n", "solution": "# \n# Solution to Project Euler problem 500\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, heapq\n\n\n# Fact: When a number is factorized as a product of powers of unique primes, the number of factors\n# the number has is equal to the product of {each exponent plus one}. That is, if n = p_1^k_1 *\n# p_2^k_2 * ... * p_m^k_m, then n has exactly (k_1 + 1) * (k_2 + 1) * ... * (k_m + 1) factors.\n# \n# Define any natural number n to be a \"candidate\" iff it has exactly 2^500500 factors (including 1 and n).\n# \n# First examine n = 2^1 * 3^1 * 5^1 * 7^1 * ... * 7376497^1 * 7376507^1, which is the product of\n# the first 500500 prime numbers. n has (1+1) * (1+1) * ... * (1+1) = 2 * 2 * ... * 2 = 2^500500\n# factors, as desired. This candidate n is thus an upper bound on the answer we're looking for.\n# \n# But if we drop the last prime and increase the exponent of the prime 2, then we\n# can get a smaller candidate of n' = 2^3 * 3^1 * 5^1 * ... * 7376497^1. It has\n# (3+1) * (1+1) * ... * (1+1) = 2^500500 factors, which makes it still valid.\n# This means when we construct a candidate, we need to choose between including\n# new prime factors versus increasing the exponent of an existing prime.\n# \n# Let us illustrate the problem for small cases (checkable by brute force):\n# - What is the smallest number with exactly 2^0 =  1 factor ? Clearly 1.\n# - What is the smallest number with exactly 2^1 =  2 factors? It is 2.\n# - What is the smallest number with exactly 2^2 =  4 factors? It is 2 * 3 = 6.\n# - What is the smallest number with exactly 2^3 =  8 factors? It is 2^3 * 3 = 24.\n# - What is the smallest number with exactly 2^4 = 16 factors? It is 2^3 * 3 * 5 = 120.\n# \n# We observe that at each step (except the zeroth), the answer is equal to the\n# previous answer times some number (unjustified claim). Some observations can be made:\n# - We can multiply a number by an unused prime number to double its number of factors.\n#   For example, 120 has 16 factors, and its highest prime factor is 5;\n#   if we look at 120 * 7 = 840, then it has 16 * 2 = 32 factors.\n# - It never pays to multiply by a larger prime than necessary (unjustified greedy claim).\n#   For example, 120 * 11 = 1320 also has 16 * 2 = 32 factors, but 840 is a smaller choice.\n#   Because we have an upper bound for the answer, we know we never need to use a prime larger than 7376507.\n# - Instead of multiplying a new prime, we can increase the exponent of an existing prime.\n#   For example, the prime power p^1 entails a factor of 1+1 = 2^1 in the number of factors of n;\n#   the prime power p^3 entails a factor of 3+1 = 2^2 in the number of factors of n;\n#   the prime power p^7 entails a factor of 7+1 = 2^3 in the number of factors of n;\n#   the prime power p^15 entails a factor of 15+1 = 2^4 in the number of factors of n.\n#   So when n does not contain the prime p, we multiply it by p^1 to double the number of factors of n.\n#   Later on, we might multiply n by p^2, p^4, p^8, etc. to double the number of factors of n.\n# \n# The solution algorithm works like this:\n# 0. With respect to the answer product (which starts at 1), we always keep track of the\n#    next power of each prime already used in the answer, as well as next unused prime.\n#    For example, if the current answer is 2^7 * 3^3 * 5 * 7 * 11 * 13, then the set of next\n#    powers is {2^8, 3^4, 5^2, 11^2, 13^2}, and the next prime is 17. We can\n#    actually fuse the latter number into the former set, by denoting it as 17^1.\n# 1. (Loop invariant) At the beginning of iteration i (0-based counting) of the main loop, the\n#    current answer is the smallest number (modulo the modulus) that has exactly 2^i factors.\n# 2. From the set of next powers/prime, remove the smallest item (a priority queue is needed), e.g. 17^1.\n# 3. Multiply the current answer by the item, and reduce the answer by the modulus.\n# 4. Put the square of the item back into the priority queue.\n# 5. If the item is equal to the next unused prime, then increment\n#    the next unused prime and put it into the priority queue.\ndef compute():\n\tTARGET = 500500\n\tMODULUS = 500500507\n\tisprime = eulerlib.list_primality(7376507)  # 500500th (1-based) prime number\n\t\n\tqueue = []\n\tnextprime = 2\n\theapq.heappush(queue, nextprime)\n\t\n\tans = 1\n\tfor _ in range(TARGET):\n\t\titem = heapq.heappop(queue)\n\t\tans *= item\n\t\tans %= MODULUS\n\t\theapq.heappush(queue, item**2)\n\t\t\n\t\tif item == nextprime:\n\t\t\tnextprime += 1\n\t\t\twhile not isprime[nextprime]:\n\t\t\t\tnextprime += 1\n\t\t\theapq.heappush(queue, nextprime)\n\t\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "35407281"}
{"number": 451, "problem": "<p>\nConsider the number $15$.<br>\nThere are eight positive numbers less than $15$ which are coprime to $15$: $1, 2, 4, 7, 8, 11, 13, 14$.<br>\nThe modular inverses of these numbers modulo $15$ are: $1, 8, 4, 13, 2, 11, 7, 14$<br>  \nbecause<br>\n$1 \\cdot 1 \\bmod 15=1$<br>\n$2 \\cdot 8=16 \\bmod 15=1$<br>\n$4 \\cdot 4=16 \\bmod 15=1$<br>\n$7 \\cdot 13=91 \\bmod 15=1$<br>\n$11 \\cdot 11=121 \\bmod 15=1$<br>\n$14 \\cdot 14=196 \\bmod 15=1<br>$</p>\n<p>\nLet $I(n)$ be the largest positive number $m$ smaller than $n-1$ such that the modular inverse of $m$ modulo $n$ equals $m$ itself.<br>\nSo $I(15)=11$.<br>\nAlso $I(100)=51$ and $I(7)=1$.<br></p>\n<p>\nFind $\\sum I(n)$ for $3 \\le n \\le 2 \\times 10^7$.</p>\n", "solution": "# \n# Solution to Project Euler problem 451\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport array, itertools, math\n\n\n# Let n be an arbitrary integer such that n >= 3.\n# When we say that the modular inverse of m modulo n equals m itself,\n# the formula is m^-1 = m mod n, which is equivalent to m^2 = 1 mod n.\n# \n# We know that if n is prime, then m^2 = 1 mod n has exactly two solutions:\n# m = 1, n-1. It is easy to verify that these two numbers are solutions.\n# The equation factorizes as (m - 1)(m + 1) = 0 mod n. Because n is prime,\n# the numbers form a field, and there are no zero divisors (two arbitrary\n# non-zero numbers x and y such that xy = 0). Hence 1 and -1 mod n are\n# the only possible solutions to the equation. (Note that for the excluded\n# special prime case where n = 2, the solutions 1 and -1 are the same number.)\n# \n# Suppose we can find the smallest prime factor of n quickly. (Note that if n is\n# prime, then the smallest prime factor is n itself.) This can be achieved by\n# building a table ahead of time, using a modification of the sieve of Eratosthenes.\n# \n# Suppose that for every n' < n, we know the set of solutions to m^2 = 1 mod n'.\n# This means whenever we solve the equation for the number n, we save its solutions\n# in an ever-growing list, so that when we work on the next value of n we can access\n# all possible smaller solutions. This is essentially an argument by strong induction.\n# \n# Let p be the smallest prime factor of n. If p = n, then the set of\n# solutions is {1, n - 1}, and we are finished with this value of n.\n# \n# Otherwise p < n, and obviously n is an integer multiple of p. Because we are looking\n# for values of m such that m^2 = 1 mod n, these candidate m values also must satisfy\n# m^2 = 1 mod k for any k that divides n (i.e. k is a factor of n). We look at the set\n# of solutions for the modulus k = n/p, which has already been solved because k < n.\n# We know that any solution modulo n must be congruent to these solutions modulo k.\n# Hence we can try to extend and check these old solutions by brute force. Namely, suppose\n# m' is a solution modulo k. Then we check the sequence m = m' + 0k, m' + 1k, m' + 2k, ...,\n# m' + (p-1)k modulo n. Because p is usually a small number, this isn't a lot of work to do.\ndef compute():\n\tLIMIT = 20000000\n\t\n\t# Build table of smallest prime factors\n\tsmallestprimefactor = array.array(\"L\", itertools.repeat(0, LIMIT + 1))\n\tend = math.isqrt(len(smallestprimefactor) - 1)\n\tfor i in range(2, len(smallestprimefactor)):\n\t\tif smallestprimefactor[i] == 0:\n\t\t\tsmallestprimefactor[i] = i\n\t\t\tif i <= end:\n\t\t\t\tfor j in range(i * i, len(smallestprimefactor), i):\n\t\t\t\t\tif smallestprimefactor[j] == 0:\n\t\t\t\t\t\tsmallestprimefactor[j] = i\n\t\n\t\n\t# Returns all the solutions (in ascending order) such that\n\t# for each k, 1 <= k < n and k^2 = 1 mod n.\n\tdef get_solutions(n):\n\t\tif smallestprimefactor[n] == n:  # n is prime\n\t\t\treturn (1, n - 1)\n\t\telse:\n\t\t\ttemp = []\n\t\t\tp = smallestprimefactor[n]\n\t\t\tsols = solutions[n // p]\n\t\t\tfor i in range(0, n, n // p):\n\t\t\t\tfor j in sols:\n\t\t\t\t\tk = i + j\n\t\t\t\t\tif k * k % n == 1:\n\t\t\t\t\t\ttemp.append(k)\n\t\t\treturn tuple(temp)\n\t\n\t\n\t# Process every integer in range\n\tsolutions = [(), (), (1,)]\n\tans = 0\n\tfor i in range(3, LIMIT + 1):\n\t\tsols = get_solutions(i)\n\t\tif i <= LIMIT // 2:\n\t\t\tsolutions.append(sols)\n\t\tans += sols[-2]  # Second-largest solution\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "153651073760956"}
{"number": 587, "problem": "<p>\nA square is drawn around a circle as shown in the diagram below on the left.<br>\nWe shall call the blue shaded region the L-section.<br>\nA line is drawn from the bottom left of the square to the top right as shown in the diagram on the right.<br>\nWe shall call the orange shaded region a <dfn>concave triangle</dfn>.\n</p>\n<div class=\"center\">\n<img src=\"resources/images/0587_concave_triangle_1.png?1678992053\" class=\"dark_img\" alt=\"0587_concave_triangle_1.png\">\n</div>\n<p>\nIt should be clear that the concave triangle occupies exactly half of the L-section.\n</p>\n<p>\n\nTwo circles are placed next to each other horizontally, a rectangle is drawn around both circles, and a line is drawn from the bottom left to the top right as shown in the diagram below.\n</p>\n<div class=\"center\">\n<img src=\"resources/images/0587_concave_triangle_2.png?1678992053\" class=\"dark_img\" alt=\"0587_concave_triangle_2.png\">\n</div>\n<p>\nThis time the concave triangle occupies approximately 36.46% of the L-section.\n</p>\n<p>\nIf $n$ circles are placed next to each other horizontally, a rectangle is drawn around the <var>n</var> circles, and a line is drawn from the bottom left to the top right, then it can be shown that the least value of <var>n</var> for which the concave triangle occupies less than 10% of the L-section is $n = 15$.\n</p>\n<p>\nWhat is the least value of $n$ for which the concave triangle occupies less than 0.1% of the L-section?\n</p>\n\n", "solution": "# \n# Solution to Project Euler problem 587\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools, math\n\n\n# Start by defining the coordinate system in a convenient way. The position and scale of the diagram don't\n# matter because we only care about the ratio of areas, not the absolute areas. So, let the bottom left\n# of the diagram be the origin (x = 0, y = 0), and let each circle to have a radius of 1.\n# \n# The leftmost circle is centered at (1, 1), and its equation is (x - 1)^2 + (y - 1)^2 = 1.\n# The diagonal line has slope = s = 1 / n (for any positive n), and the line's equation is y = s * x.\n# From basic geometry, the area of the blue L-section is 1 - pi / 4.\n# \n# Let's find the x-coordinate where the diagonal line intersects the first circle.\n# Take the equation of the circle and substitute y = s * x for the line:\n# \n#   (x - 1)^2 + (s*x - 1)^2 = 1.\n#   (x^2 - 2x + 1) + (s^2 x^2 - 2s*x + 1) = 1.\n#   (1 + s^2)x^2 + (-2 - 2s)x + 1 = 0.\n# \n# We can apply the quadratic formula with a = 1 + s^2, b = -2 - 2s, c = 1. There are two solutions for x,\n# and we only want the smaller value. Thus, let X = (-b - sqrt(b^2 - 4ac)) / (2a). Or equivalently\n# with more numerical stability (using the Citardauq formula), X = (2c) / (-b + sqrt(b^2 - 4ac)).\n# \n# The orange concave triangle can be divided into two parts by a vertical line:\n# \n# - The left part is a proper triangle, whose area is easily seen as x * y / 2 = X^2 * s / 2.\n# \n# - The right part is the region between the circle and the baseline. Let's re-express\n#   the circle's equation in terms of y, and only keep the lower semicircle:\n#   \n#     (x - 1)^2 + (y - 1)^2 = 1.\n#     (y - 1)^2 = 1 - (x - 1)^2.\n#     y - 1 = -sqrt(1 - (x - 1)^2).\n#     y = 1 - sqrt(1 - (x - 1)^2).\n#     y = 1 - sqrt(1 - (x^2 - 2x + 1)).\n#     y = 1 - sqrt(2x - x^2).\n#   \n#   Now, the indefinite integral of f(x) = 1 - sqrt(2x - x^2) with respect to x\n#   is F(x) = (x - 1) - [sqrt(2x - x^2) * (x - 1) + asin(x - 1)] / 2.\n#   Finding this integral is not obvious, but verifying it is a fairly straightforward\n#   mechanical procedure involving differentiation and simplification.\n#   \n#   The area of the right part is the integral of f(x) for x from X to 1, because the start is\n#   the x-coordinate where line meets the circle, and the end is where the circle meets the baseline.\n#   Hence the area is equal to F(1) - F(X).\n# \n# All in all, for any given n, the area of the orange concave triangle is X^2 * s / 2 + F(1) - F(X).\n# The rest of the algorithm is a brute-force search with n = 1, 2, 3, ... until the ratio condition is met.\n# \n# Additional notes:\n# - Intuitively, as n increases and the slope gets smaller, the area of the orange concave triangle should strictly\n#   decrease. This statement is in fact true, but proving it involves a big pile of differentiation and algebra.\n#   0. We need to show that X (which is the x-coordinate of the line-circle intersection) increases with n.\n#      We'd differentiate X with respect to n, and get an expression that is always positive for any positive n.\n#   1. Because X increases with n, the area of the right part, with its always-positive integrand, must decrease.\n#   2. As for the left part, we'd differentiate X^2 * s / 2 with respect to n, and get a huge messy formula.\n#      It turns out this formula is negative for all n > 1. Hence the area of this triangle also decreases with n.\n#   After we prove that increasing n leads to decreasing orange area, we could use\n#   binary search to find the minimum value of n needed to meet the ratio requirement.\n# - The use of floating-point arithmetic, for basic arithmetic operations (+ - * /) and irrational functions (sqrt,\n#   asin) alike, is inherently difficult or impossible to prove the correctness of. Furthermore, the algorithms\n#   for irrational functions are hard to understand and beyond the scope of this problem, and the error bounds for\n#   all operations are difficult to reason about.\n#   It should be possible to solve this particular problem using only integer arithmetic in a provably correct way.\n#   The basic idea would be to round the result of each operation both down and up to an integer fraction,\n#   keep track of pessimistic intervals that are guaranteed to contain the true value, accept a comparison only\n#   if the intervals don't overlap, and recompute everything at a higher precision if a comparison is inconclusive.\n#   Note: Because it doesn't seem easy to compute pi and asin(), it might be better to\n#   approximate integrals directly using the Darboux definition of lower and upper sums.\ndef compute():\n\t# The indefinite integral of (1 - sqrt(2x - x^2)) dx.\n\tdef integral(x):\n\t\tt = x - 1.0\n\t\treturn t - (math.sqrt(x * (2.0 - x)) * t + math.asin(t)) / 2.0\n\t\n\tlsectionarea = 1.0 - math.pi / 4.0\n\tfor i in itertools.count(1):\n\t\tslope = 1.0 / i\n\t\ta = slope**2 + 1.0\n\t\tb = -2.0 * (slope + 1.0)\n\t\tc = 1.0\n\t\tx = (2.0 * c) / (-b + math.sqrt(b * b - 4 * a * c))\n\t\tconcavetrianglearea = (x**2 * slope / 2) + (integral(1.0) - integral(x))\n\t\tif concavetrianglearea / lsectionarea < 0.001:\n\t\t\treturn str(i)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "2240"}
{"number": 18, "problem": "<p>By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is $23$.</p>\n<p class=\"monospace center\"><span class=\"red\"><b>3</b></span><br><span class=\"red\"><b>7</b></span> 4<br>\n2 <span class=\"red\"><b>4</b></span> 6<br>\n8 5 <span class=\"red\"><b>9</b></span> 3</p>\n<p>That is, $3 + 7 + 4 + 9 = 23$.</p>\n<p>Find the maximum total from top to bottom of the triangle below:</p>\n<p class=\"monospace center\">75<br>\n95 64<br>\n17 47 82<br>\n18 35 87 10<br>\n20 04 82 47 65<br>\n19 01 23 75 03 34<br>\n88 02 77 73 07 63 67<br>\n99 65 04 28 06 16 70 92<br>\n41 41 26 56 83 40 80 70 33<br>\n41 48 72 33 47 32 37 16 94 29<br>\n53 71 44 65 25 43 91 52 97 51 14<br>\n70 11 33 28 77 73 17 78 39 68 17 57<br>\n91 71 52 38 17 14 91 43 58 50 27 29 48<br>\n63 66 04 68 89 53 67 30 73 16 69 87 40 31<br>\n04 62 98 27 23 09 70 98 73 93 38 53 60 04 23</p>\n<p class=\"note\"><b>NOTE:</b> As there are only $16384$ routes, it is possible to solve this problem by trying every route. However, <a href=\"problem=67\">Problem 67</a>, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)</p>\n", "solution": "# \n# Solution to Project Euler problem 18\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# We create a new blank triangle with the same dimensions as the original big triangle.\n# For each cell of the big triangle, we consider the sub-triangle whose top is at this cell,\n# calculate the maximum path sum when starting from this cell, and store the result\n# in the corresponding cell of the blank triangle.\n# \n# If we start at a particular cell, what is the maximum path total? If the cell is at the\n# bottom of the big triangle, then it is simply the cell's value. Otherwise the answer is\n# the cell's value plus either {the maximum path total of the cell down and to the left}\n# or {the maximum path total of the cell down and to the right}, whichever is greater.\n# By computing the blank triangle's values from bottom up, the dependent values are always\n# computed before they are utilized. This technique is known as dynamic programming.\ndef compute():\n\tfor i in reversed(range(len(triangle) - 1)):\n\t\tfor j in range(len(triangle[i])):\n\t\t\ttriangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1])\n\treturn str(triangle[0][0])\n\n\ntriangle = [  # Mutable\n\t[75],\n\t[95,64],\n\t[17,47,82],\n\t[18,35,87,10],\n\t[20, 4,82,47,65],\n\t[19, 1,23,75, 3,34],\n\t[88, 2,77,73, 7,63,67],\n\t[99,65, 4,28, 6,16,70,92],\n\t[41,41,26,56,83,40,80,70,33],\n\t[41,48,72,33,47,32,37,16,94,29],\n\t[53,71,44,65,25,43,91,52,97,51,14],\n\t[70,11,33,28,77,73,17,78,39,68,17,57],\n\t[91,71,52,38,17,14,91,43,58,50,27,29,48],\n\t[63,66, 4,68,89,53,67,30,73,16,69,87,40,31],\n\t[ 4,62,98,27,23, 9,70,98,73,93,38,53,60, 4,23],\n]\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1074"}
{"number": 109, "problem": "<p>In the game of darts a player throws three darts at a target board which is split into twenty equal sized sections numbered one to twenty.</p>\n<div class=\"center\">\n<img src=\"project/images/p109.png\" class=\"dark_img\" alt=\"\" /><br /></div>\n<p>The score of a dart is determined by the number of the region that the dart lands in. A dart landing outside the red/green outer ring scores zero. The black and cream regions inside this ring represent single scores. However, the red/green outer ring and middle ring score double and treble scores respectively.</p>\n<p>At the centre of the board are two concentric circles called the bull region, or bulls-eye. The outer bull is worth 25 points and the inner bull is a double, worth 50 points.</p>\n<p>There are many variations of rules but in the most popular game the players will begin with a score 301 or 501 and the first player to reduce their running total to zero is a winner. However, it is normal to play a \"doubles out\" system, which means that the player must land a double (including the double bulls-eye at the centre of the board) on their final dart to win; any other dart that would reduce their running total to one or lower means the score for that set of three darts is \"bust\".</p>\n<p>When a player is able to finish  on their current score it is called a \"checkout\" and the highest checkout is 170: T20 T20 D25 (two treble 20s and double bull).</p>\n<p>There are exactly eleven distinct ways to checkout on a score of 6:</p>\n<div class=\"center monospace\">\n<table class=\"center\"><tr><td>\u00a0\u00a0\u00a0\u00a0\u00a0</td>\n<td>\u00a0\u00a0\u00a0\u00a0\u00a0</td>\n<td>\u00a0\u00a0\u00a0\u00a0\u00a0</td>\n</tr><tr><td>D3</td><td></td><td></td></tr><tr><td>D1</td><td>D2</td><td></td></tr><tr><td>S2</td><td>D2</td><td></td></tr><tr><td>D2</td><td>D1</td><td></td></tr><tr><td>S4</td><td>D1</td><td></td></tr><tr><td>S1</td><td>S1</td><td>D2</td></tr><tr><td>S1</td><td>T1</td><td>D1</td></tr><tr><td>S1</td><td>S3</td><td>D1</td></tr><tr><td>D1</td><td>D1</td><td>D1</td></tr><tr><td>D1</td><td>S2</td><td>D1</td></tr><tr><td>S2</td><td>S2</td><td>D1</td></tr></table></div>\n<p>Note that D1 D2 is considered <b>different</b> to D2 D1 as they finish on different doubles. However, the combination S1 T1 D1 is considered the <b>same</b> as T1 S1 D1.</p>\n<p>In addition we shall not include misses in considering combinations; for example, D3 is the <b>same</b> as 0 D3 and 0 0 D3.</p>\n<p>Incredibly there are 42336 distinct ways of checking out in total.</p>\n<p>How many distinct ways can a player checkout with a score less than 100?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 109\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\t# Both lists are orderless but duplicates are important; they are sort of like multisets\n\tpoints = [i * j for i in range(1, 21) for j in range(1, 4)] + [25, 50]\n\tdoublepoints = [i * 2 for i in range(1, 21)] + [25 * 2]\n\t\n\t# Memoization array, with dimensions (3, 101, len(points))\n\tways = [[[None] * len(points) for j in range(101)] for i in range(3)]\n\t\n\t# Number of ways to get exactly 'total' points in exactly 'throwz' throws, using\n\t# items (unordered) from the 'points' list with index less than or equal to 'maxIndex'.\n\tdef calc_ways(throws, total, maxindex):\n\t\tif ways[throws][total][maxindex] is None:\n\t\t\tif throws == 0:\n\t\t\t\tresult = 1 if total == 0 else 0\n\t\t\telse:\n\t\t\t\tresult = 0\n\t\t\t\tif maxindex > 0:\n\t\t\t\t\tresult += calc_ways(throws, total, maxindex - 1)\n\t\t\t\tif points[maxindex] <= total:\n\t\t\t\t\tresult += calc_ways(throws - 1, total - points[maxindex], maxindex)\n\t\t\tways[throws][total][maxindex] = result\n\t\treturn ways[throws][total][maxindex]\n\t\n\tcheckouts = 0\n\tfor remainingpoints in range(1, 100):\n\t\tfor throws in range(3):\n\t\t\tfor p in doublepoints:\n\t\t\t\tif p <= remainingpoints:\n\t\t\t\t\tcheckouts += calc_ways(throws, remainingpoints - p, len(points) - 1)\n\treturn str(checkouts)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "38182"}
{"number": 49, "problem": "<p>The arithmetic sequence, $1487, 4817, 8147$, in which each of the terms increases by $3330$, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the $4$-digit numbers are permutations of one another.</p>\n<p>There are no arithmetic sequences made up of three $1$-, $2$-, or $3$-digit primes, exhibiting this property, but there is one other $4$-digit increasing sequence.</p>\n<p>What $12$-digit number do you form by concatenating the three terms in this sequence?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 49\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\ndef compute():\n\tLIMIT = 10000\n\tisprime = eulerlib.list_primality(LIMIT - 1)\n\tfor base in range(1000, LIMIT):\n\t\tif isprime[base]:\n\t\t\tfor step in range(1, LIMIT):\n\t\t\t\ta = base + step\n\t\t\t\tb = a + step\n\t\t\t\tif     a < LIMIT and isprime[a] and has_same_digits(a, base) \\\n\t\t\t\t   and b < LIMIT and isprime[b] and has_same_digits(b, base) \\\n\t\t\t\t   and (base != 1487 or a != 4817):\n\t\t\t\t\treturn str(base) + str(a) + str(b)\n\traise RuntimeError(\"Not found\")\n\n\ndef has_same_digits(x, y):\n\treturn sorted(str(x)) == sorted(str(y))\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "296962999629"}
{"number": 119, "problem": "<p>The number $512$ is interesting because it is equal to the sum of its digits raised to some power: $5 + 1 + 2 = 8$, and $8^3 = 512$. Another example of a number with this property is $614656 = 28^4$.</p>\n<p>We shall define $a_n$ to be the $n$th term of this sequence and insist that a number must contain at least two digits to have a sum.</p>\n<p>You are given that $a_2 = 512$ and $a_{10} = 614656$.</p>\n<p>Find $a_{30}$.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 119\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\n# Candidates have the form n^k, where n >= 2, k >= 2, n^k >= 10, and isDigitSumPower(n^k) == true.\n# We also impose n^k < limit. If there are at least 30 candidates under 'limit',\n# then the 30th smallest candidate is the answer. Otherwise we raise the limit and search again.\n# \n# We only need to try the exponents k until 2^k exceeds the limit.\n# We only need to try the bases n until the power of the digit sum is too small to match n^k.\n# The power of the digit sum is digitSum(n^k)^k, which is at most (9 * digitLength(n^k))^k.\ndef compute():\n\tINDEX = 30  # 1-based\n\tlimit = 1\n\twhile True:\n\t\tcandidates = set()\n\t\tk = 2\n\t\twhile (1 << k) < limit:\n\t\t\tfor n in itertools.count(2):\n\t\t\t\tpow = n**k\n\t\t\t\tif pow >= limit and len(str(pow)) * 9 < n:\n\t\t\t\t\tbreak\n\t\t\t\tif pow >= 10 and is_digit_sum_power(pow):\n\t\t\t\t\tcandidates.add(pow)\n\t\t\tk += 1\n\t\tif len(candidates) >= INDEX:\n\t\t\treturn str(sorted(candidates)[INDEX - 1])\n\t\tlimit <<= 8\n\n\ndef is_digit_sum_power(x):\n\tdigitsum = sum(int(c) for c in str(x))\n\tif digitsum == 1:  # Powers of 10 are never a power of 1\n\t\treturn False\n\tpow = digitsum\n\twhile pow < x:\n\t\tpow *= digitsum\n\treturn pow == x\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "248155780267521"}
{"number": 8, "problem": "<p>The four adjacent digits in the $1000$-digit number that have the greatest product are $9 \\times 9 \\times 8 \\times 9 = 5832$.</p>\n<p class=\"monospace center\">\n73167176531330624919225119674426574742355349194934<br>\n96983520312774506326239578318016984801869478851843<br>\n85861560789112949495459501737958331952853208805511<br>\n12540698747158523863050715693290963295227443043557<br>\n66896648950445244523161731856403098711121722383113<br>\n62229893423380308135336276614282806444486645238749<br>\n30358907296290491560440772390713810515859307960866<br>\n70172427121883998797908792274921901699720888093776<br>\n65727333001053367881220235421809751254540594752243<br>\n52584907711670556013604839586446706324415722155397<br>\n53697817977846174064955149290862569321978468622482<br>\n83972241375657056057490261407972968652414535100474<br>\n82166370484403199890008895243450658541227588666881<br>\n16427171479924442928230863465674813919123162824586<br>\n17866458359124566529476545682848912883142607690042<br>\n24219022671055626321111109370544217506941658960408<br>\n07198403850962455444362981230987879927244284909188<br>\n84580156166097919133875499200524063689912560717606<br>\n05886116467109405077541002256983155200055935729725<br>\n71636269561882670428252483600823257530420752963450<br></p>\n<p>Find the thirteen adjacent digits in the $1000$-digit number that have the greatest product. What is the value of this product?</p>\n", "solution": "# \n# Solution to Project Euler problem 8\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# We implement a straightforward algorithm that examines every substring of length 13.\ndef compute():\n\tans = max(digit_product(NUMBER[i : i + ADJACENT]) for i in range(len(NUMBER) - ADJACENT + 1))\n\treturn str(ans)\n\n\ndef digit_product(s):\n\tresult = 1\n\tfor c in s:\n\t\tresult *= int(c)\n\treturn result\n\n\nNUMBER = \"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450\"\nADJACENT = 13\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "23514624000"}
{"number": 28, "problem": "<p>Starting with the number $1$ and moving to the right in a clockwise direction a $5$ by $5$ spiral is formed as follows:</p>\n<p class=\"monospace center\"><span class=\"red\"><b>21</b></span> 22 23 24 <span class=\"red\"><b>25</b></span><br>\n20 \u00a0<span class=\"red\"><b>7</b></span> \u00a08 \u00a0<span class=\"red\"><b>9</b></span> 10<br>\n19 \u00a06 \u00a0<span class=\"red\"><b>1</b></span> \u00a02 11<br>\n18 \u00a0<span class=\"red\"><b>5</b></span> \u00a04 \u00a0<span class=\"red\"><b>3</b></span> 12<br><span class=\"red\"><b>17</b></span> 16 15 14 <span class=\"red\"><b>13</b></span></p>\n<p>It can be verified that the sum of the numbers on the diagonals is $101$.</p>\n<p>What is the sum of the numbers on the diagonals in a $1001$ by $1001$ spiral formed in the same way?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 28\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# From the diagram, let's observe the four corners of an n * n square (where n is odd).\n# It's not hard to convince yourself that the top right corner always has the value n^2.\n# Working counterclockwise (backwards), the top left corner has the value n^2 - (n - 1),\n# the bottom left corner has the value n^2 - 2(n - 1), and the bottom right is n^2 - 3(n - 1).\n# Putting it all together, this outermost ring contributes 4n^2 - 6(n - 1) to the final sum.\n# \n# Incidentally, the closed form of this sum is (4m^3 + 3m^2 + 8m - 9) / 6, where m = size.\ndef compute():\n\tSIZE = 1001  # Must be odd\n\tans = 1  # Special case for size 1\n\tans += sum(4 * i * i - 6 * (i - 1) for i in range(3, SIZE + 1, 2))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "669171001"}
{"number": 79, "problem": "<p>A common security method used for online banking is to ask the user for three random characters from a passcode. For example, if the passcode was 531278, they may ask for the 2nd, 3rd, and 5th characters; the expected reply would be: 317.</p>\n<p>The text file, <a href=\"resources/documents/0079_keylog.txt\">keylog.txt</a>, contains fifty successful login attempts.</p>\n<p>Given that the three characters are always asked for in order, analyse the file so as to determine the shortest possible secret passcode of unknown length.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 79\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\ndef compute():\n\t# Only guess characters that appear in the attempts\n\tcharsused = sorted(set().union(*SUBSEQS))\n\tbase = len(charsused)\n\t\n\t# Try ascending lengths\n\tfor length in itertools.count(base):\n\t\tindices = [0] * length\n\t\twhile True:\n\t\t\tguess = \"\".join(charsused[d] for d in indices)\n\t\t\tif is_consistent(guess):\n\t\t\t\treturn guess\n\t\t\t\n\t\t\t# Increment indices\n\t\t\ti = 0\n\t\t\twhile i < length and indices[i] == base - 1:\n\t\t\t\tindices[i] = 0\n\t\t\t\ti += 1\n\t\t\tif i == length:\n\t\t\t\tbreak\n\t\t\tindices[i] += 1\n\n\ndef is_consistent(guess):\n\treturn all(is_subsequence(s, guess) for s in SUBSEQS)\n\n\ndef is_subsequence(shortstr, longstr):\n\ti = 0\n\tfor c in longstr:\n\t\tif c == shortstr[i]:\n\t\t\ti += 1\n\t\t\tif i == len(shortstr):\n\t\t\t\treturn True\n\treturn False\n\n\nSUBSEQS = [\"319\", \"680\", \"180\", \"690\", \"129\", \"620\", \"762\", \"689\", \"762\", \"318\", \"368\", \"710\", \"720\", \"710\", \"629\", \"168\", \"160\", \"689\", \"716\", \"731\", \"736\", \"729\", \"316\", \"729\", \"729\", \"710\", \"769\", \"290\", \"719\", \"680\", \"318\", \"389\", \"162\", \"289\", \"162\", \"718\", \"729\", \"319\", \"790\", \"680\", \"890\", \"362\", \"319\", \"760\", \"316\", \"729\", \"380\", \"319\", \"728\", \"716\"]\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "73162890"}
{"number": 139, "problem": "<p>Let $(a, b, c)$ represent the three sides of a right angle triangle with integral length sides. It is possible to place four such triangles together to form a square with length $c$.</p>\n<p>For example, $(3, 4, 5)$ triangles can be placed together to form a $5$ by $5$ square with a $1$ by $1$ hole in the middle and it can be seen that the $5$ by $5$ square can be tiled with twenty-five $1$ by $1$ squares.</p>\n<div class=\"center\">\n<img src=\"resources/images/0139.png?1678992052\" class=\"dark_img\" alt=\"\"></div>\n<p>However, if $(5, 12, 13)$ triangles were used then the hole would measure $7$ by $7$ and these could not be used to tile the $13$ by $13$ square.</p>\n<p>Given that the perimeter of the right triangle is less than one-hundred million, how many Pythagorean triangles would allow such a tiling to take place?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 139\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\ndef compute():\n\tLIMIT = 100000000\n\t\n\t# Pythagorean triples theorem:\n\t#   Every primitive Pythagorean triple with a odd and b even can be expressed as\n\t#   a = st, b = (s^2-t^2)/2, c = (s^2+t^2)/2, where s > t > 0 are coprime odd integers.\n\tans = 0\n\tfor s in range(3, math.isqrt(LIMIT * 2), 2):\n\t\tfor t in range(1, s, 2):\n\t\t\ta = s * t\n\t\t\tb = (s * s - t * t) // 2\n\t\t\tc = (s * s + t * t) // 2\n\t\t\tp = a + b + c\n\t\t\tif p >= LIMIT:\n\t\t\t\tbreak\n\t\t\tif c % (a - b) == 0 and math.gcd(s, t) == 1:\n\t\t\t\tans += (LIMIT - 1) // p\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "10057761"}
{"number": 129, "problem": "<p>A number consisting entirely of ones is called a repunit. We shall define $R(k)$ to be a repunit of length $k$; for example, $R(6) = 111111$.</p>\n<p>Given that $n$ is a positive integer and $\\gcd(n, 10) = 1$, it can be shown that there always exists a value, $k$, for which $R(k)$ is divisible by $n$, and let $A(n)$ be the least such value of $k$; for example, $A(7) = 6$ and $A(41) = 5$.</p>\n<p>The least value of $n$ for which $A(n)$ first exceeds ten is $17$.</p>\n<p>Find the least value of $n$ for which $A(n)$ first exceeds one-million.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 129\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\n# Let n >= 1 be arbitrary but assume that it is coprime with 10.\n# We want to find the smallest k such that R(k) = 0 mod n, and we'll show that 1 <= k <= n.\n# \n# Let \"the sequence\" of n values be (R(1) mod n, R(2) mod n, R(3) mod n, ..., R(n) mod n).\n# For the sake of contradiction, assume that none of the values in the sequence are 0.\n# \n# Each number in the sequence is an integer in the range [1, n).\n# The range has n - 1 elements, but there are n elements in the sequence.\n# Hence by the pigeonhole principle, there exist two distinct indexes\n# in the sequence where the elements have the same value.\n# \n# Suppose the two distinct indexes (1-based) are i and j.\n# So the two values in question are R(i) mod n and R(j) mod n.\n# Suppose WLOG that j > i. Then clearly R(j) - R(i) = 0 mod n,\n# and so R(j) - R(i) = 1...10...0 = R(j - i) * 10^i = 0 mod n.\n# \n# Since 10 is coprime with n, 10 (and its powers) are invertible modulo n.\n# Multiply everything in the equation by 10^-i, and we get R(j - i) = 1...1 = 0 mod n.\n# \n# We know 1 <= j - i <= n - 1. Then R(i - j) mod n, which is 0, is in the sequence.\n# This contradicts our assumption that none of (R(1), R(2), ... R(n)) is 0 mod n.\n# \n# Therefore if we want to find an n whose solution k is such that\n# k > 1000000, then we need to have n > 1000000.\ndef compute():\n\tLIMIT = 10**6\n\tfor n in itertools.count(LIMIT):\n\t\tif least_divisible_repunit(n) > LIMIT:\n\t\t\treturn str(n)\n\n\n# Returns the smallest k such that R(k) is divisible by n.\ndef least_divisible_repunit(n):\n\tif n % 2 == 0 or n % 5 == 0:\n\t\treturn 0\n\tk = 1\n\ts = 1  # Loop invariant: Equal to R(k) mod n\n\tp = 1  # Loop invariant: Equal to 10^k mod n\n\twhile s % n != 0:\n\t\tk += 1\n\t\tp = p * 10 % n\n\t\ts = (s + p) % n\n\treturn k\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1000023"}
{"number": 69, "problem": "<p>Euler's totient function, $\\phi(n)$ [sometimes called the phi function], is defined as the number of positive integers not exceeding $n$ which are relatively prime to $n$. For example, as $1$, $2$, $4$, $5$, $7$, and $8$, are all less than or equal to nine and relatively prime to nine, $\\phi(9)=6$.</p>\n<div class=\"center\">\n<table class=\"grid center\"><tr><td><b>$n$</b></td>\n<td><b>Relatively Prime</b></td>\n<td><b>$\\phi(n)$</b></td>\n<td><b>$n/\\phi(n)$</b></td>\n</tr><tr><td>2</td>\n<td>1</td>\n<td>1</td>\n<td>2</td>\n</tr><tr><td>3</td>\n<td>1,2</td>\n<td>2</td>\n<td>1.5</td>\n</tr><tr><td>4</td>\n<td>1,3</td>\n<td>2</td>\n<td>2</td>\n</tr><tr><td>5</td>\n<td>1,2,3,4</td>\n<td>4</td>\n<td>1.25</td>\n</tr><tr><td>6</td>\n<td>1,5</td>\n<td>2</td>\n<td>3</td>\n</tr><tr><td>7</td>\n<td>1,2,3,4,5,6</td>\n<td>6</td>\n<td>1.1666...</td>\n</tr><tr><td>8</td>\n<td>1,3,5,7</td>\n<td>4</td>\n<td>2</td>\n</tr><tr><td>9</td>\n<td>1,2,4,5,7,8</td>\n<td>6</td>\n<td>1.5</td>\n</tr><tr><td>10</td>\n<td>1,3,7,9</td>\n<td>4</td>\n<td>2.5</td>\n</tr></table></div>\n<p>It can be seen that $n = 6$ produces a maximum $n/\\phi(n)$ for $n\\leq 10$.</p>\n<p>Find the value of $n\\leq 1\\,000\\,000$ for which $n/\\phi(n)$ is a maximum.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 69\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, fractions\n\n\ndef compute():\n\ttotients = eulerlib.list_totients(10**6)\n\tans = max(range(2, len(totients)), key=(lambda i: fractions.Fraction(i, totients[i])))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "510510"}
{"number": 178, "problem": "Consider the number $45656$. <br>\nIt can be seen that each pair of consecutive digits of $45656$ has a difference of one.<br>\nA number for which every pair of consecutive digits has a difference of one is called a step number.<br>\nA pandigital number  contains every decimal digit from $0$ to $9$ at least once.<br>\n\nHow many pandigital step numbers less than $10^{40}$ are there?\n\n", "solution": "# \n# Solution to Project Euler problem 178\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport functools\n\n\ndef compute():\n\tLIMIT = 40\n\tans = sum(count_step_pandigital(digits, head, 0, 9)\n\t\tfor digits in range(LIMIT + 1)\n\t\tfor head in range(1, 10))\n\treturn str(ans)\n\n\n# Returns the number of pandigital step numbers such that each\n# number is 'digits' long, starts with the digit 'head' (can be 0),\n# and the union of all the digits equals the interval [low, high].\n@functools.cache\ndef count_step_pandigital(digits, head, low, high):\n\tassert digits >= 0\n\tassert low <= head <= high\n\tif digits <= 1:\n\t\treturn 1 if (low == head == high) else 0\n\telse:\n\t\tresult = 0\n\t\tif head - 1 >= low:\n\t\t\tresult += count_step_pandigital(digits - 1, head - 1, low, high)\n\t\t\tif head == high:\n\t\t\t\tresult += count_step_pandigital(digits - 1, head - 1, low, high - 1)\n\t\tif head + 1 <= high:\n\t\t\tresult += count_step_pandigital(digits - 1, head + 1, low, high)\n\t\t\tif head == low:\n\t\t\t\tresult += count_step_pandigital(digits - 1, head + 1, low + 1, high)\n\t\tassert 0 <= result < 10**digits\n\t\treturn result\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "126461847755"}
{"number": 38, "problem": "<p>Take the number $192$ and multiply it by each of $1$, $2$, and $3$:</p>\n\\begin{align}\n192 \\times 1 &amp;= 192\\\\\n192 \\times 2 &amp;= 384\\\\\n192 \\times 3 &amp;= 576\n\\end{align}\n<p>By concatenating each product we get the $1$ to $9$ pandigital, $192384576$. We will call $192384576$ the concatenated product of $192$ and $(1,2,3)$.</p>\n<p>The same can be achieved by starting with $9$ and multiplying by $1$, $2$, $3$, $4$, and $5$, giving the pandigital, $918273645$, which is the concatenated product of $9$ and $(1,2,3,4,5)$.</p>\n<p>What is the largest $1$ to $9$ pandigital $9$-digit number that can be formed as the concatenated product of an integer with $(1,2, \\dots, n)$ where $n \\gt 1$?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 38\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tans = \"\"\n\tfor n in range(2, 10):\n\t\tfor i in range(1, 10**(9 // n)):\n\t\t\ts = \"\".join(str(i * j) for j in range(1, n + 1))\n\t\t\tif \"\".join(sorted(s)) == \"123456789\":\n\t\t\t\tans = max(s, ans)\n\treturn ans\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "932718654"}
{"number": 407, "problem": "<p>\nIf we calculate $a^2 \\bmod 6$ for $0 \\leq a \\leq 5$ we get: $0,1,4,3,4,1$.\n</p>\n<p>\nThe largest value of $a$ such that $a^2 \\equiv a \\bmod 6$ is $4$.<br>\nLet's call $M(n)$ the largest value of $a \\lt n$ such that $a^2 \\equiv a \\pmod n$.<br>\nSo $M(6) = 4$.\n</p>\n<p>\nFind $\\sum M(n)$ for $1 \\leq n \\leq 10^7$.\n</p>\n\n", "solution": "# \n# Solution to Project Euler problem 407\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\n# If a^2 = a mod n, then this is also true for any m that divides n.\n# Let's focus on the moduli that are prime powers, p^k.\n# \n# Claim: The only solutions of a^2 = a mod p^k are a = 0, 1 mod p^k.\n# Proof:\n#   First note that a = 0 mod p^k is always a solution. Now consider the case of 0 < a < p^k.\n#   Let a = b * p^j, where 0 < b < p^j and b is coprime with p (thus j is as large as possible).\n#   Then (b p^j)^2 = b p^j mod p^k, expanding to b^2 p^2j = b p^j mod p^k.\n#   Divide all of the equation (including the modulus) by p^j, giving b^2 p^j = b mod p^(k-j).\n#   b is coprime with p (and therefore p^(k-j)), so b^-1 exists.\n#   Multiply both sides by b^-2 to get b^-1 = p^j mod p^(k-j).\n#   b is coprime with p, so b is not a power of p unless j = 0, i.e. p^j = 1 = b.\n#   So when a != 0, a = 1 is the only solution.\n# \n# If we factor n as a product of prime powers, i.e. n = p0^k0 * p1^k1 * ... where\n# all the p's are distinct (and thus all the k's are as large as possible), then we have\n# a system of congruences {a = 0,1 mod p0^k0; a = 0,1 mod p1^k1; ...}.\n# Using the Chinese remainder theorem, we can solve these congruences to obtain the\n# 2^N distinct solutions (where N is the number of distinct prime factors of n).\n# The largest solution among these is what we want for the M() function.\ndef compute():\n\tLIMIT = 10**7\n\t\n\tsmallestprimefactor = eulerlib.list_smallest_prime_factors(LIMIT)\n\t\n\tans = 0\n\tfor i in range(1, LIMIT + 1):\n\t\t# Compute factorization as coprime prime powers. e.g. 360 = {2^3, 3^2, 5^1}\n\t\tfactorization = []\n\t\tj = i\n\t\twhile j != 1:\n\t\t\tp = smallestprimefactor[j]\n\t\t\tq = 1\n\t\t\twhile True:\n\t\t\t\tj //= p\n\t\t\t\tq *= p\n\t\t\t\tif j % p != 0:\n\t\t\t\t\tbreak\n\t\t\tfactorization.append(q)\n\t\t\n\t\tsolns = [0]\n\t\tmodulus = 1\n\t\tfor q in factorization:\n\t\t\t# Use Chinese remainder theorem; cache parts of it\n\t\t\trecip = pow(q, -1, modulus)\n\t\t\tnewmod = q * modulus\n\t\t\tsolns = [((0 + (x    ) * recip * q) % newmod) for x in solns] + \\\n\t\t\t        [((1 + (x - 1) * recip * q) % newmod) for x in solns]\n\t\t\tmodulus = newmod\n\t\t\n\t\tans += max(solns)\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "39782849136421"}
{"number": 188, "problem": "<p>The <strong>hyperexponentiation</strong> or <strong>tetration</strong> of a number $a$ by a positive integer $b$, denoted by $a\\mathbin{\\uparrow \\uparrow}b$ or $^b a$, is recursively defined by:<br><br>\n$a \\mathbin{\\uparrow \\uparrow} 1 = a$,<br>\n$a \\mathbin{\\uparrow \\uparrow} (k+1) = a^{(a \\mathbin{\\uparrow \\uparrow} k)}$.</p>\n<p>\nThus we have e.g. $3 \\mathbin{\\uparrow \\uparrow} 2 = 3^3 = 27$, hence $3 \\mathbin{\\uparrow \\uparrow} 3 = 3^{27} = 7625597484987$ and $3 \\mathbin{\\uparrow \\uparrow} 4$ is roughly $10^{3.6383346400240996 \\cdot 10^{12}}$.</p>\n<p>Find the last $8$ digits of $1777 \\mathbin{\\uparrow \\uparrow} 1855$.</p>\n", "solution": "# \n# Solution to Project Euler problem 188\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math, sys\n\n\ndef compute():\n\tx, y, m = 1777, 1855, 10**8\n\tsys.setrecursionlimit(y + 30)  # Because the default recursion limit of 1000 is insufficient\n\tans = tetration_mod(x, y, m)\n\treturn str(ans)\n\n\ndef tetration_mod(x, y, m):\n\tif y == 1:\n\t\treturn x % m\n\telse:\n\t\t# Fact: If x and m are coprime, then x^y mod m = x^(y mod totient(m)) mod m\n\t\treturn pow(x, tetration_mod(x, y - 1, totient(m)), m)\n\n\ndef totient(n):\n\tassert n > 0\n\tp = 1\n\ti = 2\n\tend = math.isqrt(n)\n\twhile i <= end:\n\t\tif n % i == 0:  # Found a factor\n\t\t\tp *= i - 1\n\t\t\tn //= i\n\t\t\twhile n % i == 0:\n\t\t\t\tp *= i\n\t\t\t\tn //= i\n\t\t\tend = math.isqrt(n)\n\t\ti += 1\n\tif n != 1:\n\t\tp *= n - 1\n\treturn p\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "95962097"}
{"number": 348, "problem": "<p>Many numbers can be expressed as the sum of a square and a cube. Some of them in more than one way.</p>\n\n<p>Consider the palindromic numbers that can be expressed as the sum of a square and a cube, both greater than $1$, in <b>exactly</b> $4$ different ways.<br>\nFor example, $5229225$ is a palindromic number and it can be expressed in exactly $4$ different ways:</p>\n<p>$2285^2 + 20^3$<br>\n$2223^2 + 66^3$<br>\n$1810^2 + 125^3$<br>\n$1197^2 + 156^3$</p>\n \n<p>Find the sum of the five smallest such palindromic numbers.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 348\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools, math\n\n\n# Given a range of integers [0, n), we can bulk-calculate how many ways\n# each integer can be expressed as a sum of a cube and a square.\n# \n# Start by initializing an array of length n with all zeros.\n# Next, write a two-level loop to explore all the cubes i^3\n# and squares j^2 such that their sum is less than n:\n# \n#   ways = new int[n];  // Initially all zero\n#   for (i = 2; i^3 < n; i++) {\n#     for (j = 2; i^3 + j^2 < n; j++) {\n#       ways[i^3 + j^2]++;\n#     }\n#   }\n# \n# The array creation takes O(n) time. The outer loop runs O(n^(1/3)) iterations,\n# the inner loop runs O(n^(1/2)) iterations per outer loop, hence the inner loop body\n# runs O(n^(5/6)) iterations. Thus the whole process runs in O(n) time and memory.\n# \n# Finally we iterate forward through the array, selecting numbers that\n# are palindromes and can be summed in the target number of ways.\n# \n# If the answer is not found in our range [0, n), then we increase the range and search\n# again. If we multiply n by some factor (say 2 or 10), then the geometric series ensures\n# that the total work we do is O(n) with respect to the magnitude of the final answer.\n\nTARGET_WAYS = 4\nTARGET_COUNT = 5\n\ndef compute():\n\tfor i in itertools.count():\n\t\tlimit = 10**i\n\t\tans = try_search(limit)\n\t\tif ans is not None:\n\t\t\treturn str(ans)\n\n\n# Examines all integers in the range [0, limit), and returns the sum of the lowest\n# TARGET_COUNT integers each with the property that it is a palidrome in base 10\n# and it can be expressed in exactly TARGET_COUNT ways as a sum of a perfect square\n# greater than 1 and a perfect cube greater than 1. If fewer than TARGET_COUNT integers\n# in [0, limit) have the desired property, then None is returned. Note that if\n# trySearch(n) == k != None, then for every m > n, trySearch(m) == k also holds.\ndef try_search(limit):\n\t# If i can be expressed as the sum of a square greater than 1 and\n\t# a cube greater than 1, then ways[i] is the number of different ways\n\t# it can be done. Otherwise, i is not a key in the ways dictionary.\n\tways = {}\n\t\n\tfor i in itertools.count(2):\n\t\tcube = i**3\n\t\tif cube >= limit:\n\t\t\tbreak\n\t\tfor j in range(2, math.isqrt(limit - 1 - cube) + 1):\n\t\t\tindex = cube + j**2\n\t\t\tways[index] = ways.get(index, 0) + 1\n\t\n\tresult = 0\n\tcount = 0\n\tfor i in sorted(ways.keys()):\n\t\tif ways[i] == TARGET_WAYS and is_palindrome(i):\n\t\t\tresult += i\n\t\t\tcount += 1\n\t\t\tif count == TARGET_COUNT:\n\t\t\t\treturn result\n\treturn None\n\n\ndef is_palindrome(x):\n\ts = str(x)\n\treturn s == s[ : : -1]\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1004195061"}
{"number": 208, "problem": "<p>A robot moves in a series of one-fifth circular arcs ($72^\\circ$), with a free choice of a clockwise or an anticlockwise arc for each step, but no turning on the spot.</p>\n\n<p>One of $70932$ possible closed paths of $25$ arcs starting northward is</p>\n<div class=\"center\">\n<img src=\"resources/images/0208_robotwalk.gif?1678992055\" class=\"dark_img\" alt=\"\"></div>\n\n<p>Given that the robot starts facing North, how many journeys of $70$ arcs in length can it take that return it, after the final arc, to its starting position?<br>\n(Any arc may be traversed multiple times.) \n</p>\n\n", "solution": "# \n# Solution to Project Euler problem 208\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# Because the robot moves in 72-degree arcs, it can only face 5 possible directions.\n# - Define the initial northward direction as the integer 0.\n# - Let each anticlockwise (leftward) move add 1 to the direction, modulo 5.\n# - Let each clockwise (rightward) move subtract 1 from the direction, modulo 5.\n# \n# At each of the 5 possible facing directions, there are 2 possible moves.\n# What is the (x, y) displacement of each of these 10 possible moves?\n# \n# We can figure this out by drawing a circle with 5 points evenly spaced 72\n# degrees apart. To align with the problem description, one of the points will\n# be on the positive x axis. For our convenience, the circle shall have radius 4.\n# Doing some moderate algebra and trigonometry, we get these point coordinates:\n# - Point 0: (cos   0, sin   0)*4 = (+4, 0).\n# - Point 1: (cos  72, sin  72)*4 = (+(sqrt(5)-1), +sqrt(10+2sqrt(5))).\n# - Point 2: (cos 144, sin 144)*4 = (-(sqrt(5)+1), +sqrt(10-2sqrt(5))).\n# - Point 3: (cos 216, sin 216)*4 = (-(sqrt(5)+1), -sqrt(10-2sqrt(5))).\n# - Point 4: (cos 288, sin 288)*4 = (+(sqrt(5)-1), -sqrt(10+2sqrt(5))).\n# (The inputs to cos and sin are given in degrees.)\n# \n# This sequence of points is constructed so that the displacement vector from\n# point k to point k+1 is equal to the displacement of making an anticlockwise\n# move when facing direction k. For example, (point1 - point0) is the\n# displacement of an anticlockwise move when facing north (dir=0).\n# Hence, the displacement vectors of the 5 anticlockwise move are:\n# - point1 - point0 = (-(5-sqrt(5)),  +sqrt(10+2sqrt(5))).\n# - point2 - point1 = (-2sqrt(5)   , -2sqrt( 5-2sqrt(5))).\n# - point3 - point2 = (0           , -2sqrt(10-2sqrt(5))).\n# - point4 - point3 = (+2sqrt(5)   , -2sqrt( 5-2sqrt(5))).\n# - point0 - point4 = (+(5-sqrt(5)),  +sqrt(10+2sqrt(5))).\n# As for clockwise moves, simply take the displacements vectors above and negate the x values.\n# The mapping of displacement vectors to direction states also needs to be negated modulo 5.\n# \n# Altogether, we have this table of valid moves:\n#    Direction | Move | x displacement |   y displacement\n#   -----------+------+----------------+---------------------\n#        0     | ACW  |  -(5-sqrt(5))  | +sqrt(10+2sqrt(5))\n#        0     |  CW  |  +(5-sqrt(5))  | +sqrt(10+2sqrt(5))\n#        1     | ACW  |    -2sqrt(5)   | -2sqrt(5-2sqrt(5))\n#        1     |  CW  |  -(5-sqrt(5))  | +sqrt(10+2sqrt(5))\n#        2     | ACW  |        0       | -2sqrt(10-2sqrt(5))\n#        2     |  CW  |    -2sqrt(5)   | -2sqrt(5-2sqrt(5))\n#        3     | ACW  |    +2sqrt(5)   | -2sqrt(5-2sqrt(5))\n#        3     |  CW  |        0       | -2sqrt(10-2sqrt(5))\n#        4     | ACW  |  +(5-sqrt(5))  | +sqrt(10+2sqrt(5))\n#        4     |  CW  |    +2sqrt(5)   | -2sqrt(5-2sqrt(5))\n# Note that -2sqrt(5-2sqrt(5)) = sqrt(10-2sqrt(5)) - sqrt(10+2sqrt(5)).\n# \n# As the robot moves, it adds x components and y components to its displacement.\n# - At any given time, the x coordinate equals a unique integer-weighted\n#   sum of 2sqrt(5) and (sqrt(5)-5), namely i*2sqrt(5) + j*(sqrt(5)-5).\n#   We can show that these two irrational components cannot \"simplify\"\n#   with each other - i.e. when (i, j) != (0, 0), the sum must be non-zero.\n# - At any given time, the y coordinate equals a unique integer-weighted\n#   sum of sqrt(10-2sqrt(5)) and sqrt(10+2sqrt(5)). We will assume without proof that\n#   these two components don't \"interact\" with each other or cancel out in any way.\ndef compute():\n\tLIMIT = 70\n\t\n\t# Returns a new state tuple.\n\tdef move(state, sign):\n\t\tentry = ANTICLOCKWISE_MOVES[state[0] * sign % 5]\n\t\treturn (\n\t\t\t(state[0] + sign) % 5,\n\t\t\tstate[1] + entry[0] * sign,\n\t\t\tstate[2] + entry[1] * sign,\n\t\t\tstate[3] + entry[2],\n\t\t\tstate[4] + entry[3])\n\t\n\treachable = {(0, 0, 0, 0, 0): 1}\n\tfor _ in range(LIMIT):\n\t\tnewreachable = {}\n\t\tfor (state, ways) in reachable.items():\n\t\t\tacwst = move(state, +1)\n\t\t\tcwst  = move(state, -1)\n\t\t\tnewreachable[acwst] = newreachable.get(acwst, 0) + ways\n\t\t\tnewreachable[cwst ] = newreachable.get(cwst , 0) + ways\n\t\treachable = newreachable\n\t\n\tans = sum(reachable.get((dir, 0, 0, 0, 0), 0) for dir in range(5))\n\treturn str(ans)\n\n\nANTICLOCKWISE_MOVES = (\n\t( 0, -1,  0, +1),\n\t(-1,  0, +1, -1),\n\t( 0,  0, -2,  0),\n\t(+1,  0, +1, -1),\n\t( 0, +1,  0, +1),\n)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "331951449665644800"}
{"number": 88, "problem": "<p>A natural number, $N$, that can be written as the sum and product of a given set of at least two natural numbers, $\\{a_1, a_2, \\dots, a_k\\}$ is called a product-sum number: $N = a_1 + a_2 + \\cdots + a_k = a_1 \\times a_2 \\times \\cdots \\times a_k$.</p>\n<p>For example, $6 = 1 + 2 + 3 = 1 \\times 2 \\times 3$.</p>\n<p>For a given set of size, $k$, we shall call the smallest $N$ with this property a minimal product-sum number. The minimal product-sum numbers for sets of size, $k = 2, 3, 4, 5$, and $6$ are as follows.</p>\n<ul style=\"list-style-type:none;\">\n<li>$k=2$: $4 = 2 \\times 2 = 2 + 2$</li>\n<li>$k=3$: $6 = 1 \\times 2 \\times 3 = 1 + 2 + 3$</li>\n<li>$k=4$: $8 = 1 \\times 1 \\times 2 \\times 4 = 1 + 1 + 2 + 4$</li>\n<li>$k=5$: $8 = 1 \\times 1 \\times 2 \\times 2 \\times 2 = 1 + 1 + 2 + 2 + 2$</li><li>$k=6$: $12 = 1 \\times 1 \\times 1 \\times 1 \\times 2 \\times 6 = 1 + 1 + 1 + 1 + 2 + 6$</li></ul>\n<p>Hence for $2 \\le k \\le 6$, the sum of all the minimal product-sum numbers is $4+6+8+12 = 30$; note that $8$ is only counted once in the sum.</p>\n<p>In fact, as the complete set of minimal product-sum numbers for $2 \\le k \\le 12$ is $\\{4, 6, 8, 12, 15, 16\\}$, the sum is $61$.</p>\n<p>What is the sum of all the minimal product-sum numbers for $2 \\le k \\le 12000$?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 88\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# minSumProduct[k] is the smallest positive integers that can be written as both a sum and a product of the same collection of k positive integers.\n# For example, minSumProduct[3] = 6 because 6 = 1 + 2 + 3 = 1 * 2 * 3, and this is the minimum possible number for 3 terms.\n# \n# For all k >= 2:\n# - minSumProduct[k] > k because 1 + ... + 1 (with k terms) = k, which is the minimum sum of k positive integers,\n#   but the product is 1 which is unequal to k, so k is not a valid solution.\n# - minSumProduct[k] <= 2k because 1 + ... + 1 + 2 + k (with k terms in total) = (k - 2) + 2 + k = 2k. The product is 2k, which equals the sum.\n#   Since this is one achievable solution, the minimum solution must be no larger than this.\n# - Aside: minSumProduct[k] is not a prime number. Suppose minSumProduct[k] = p, where p is prime. Then p can only be factorized as p, p * 1, p * 1 * 1, etc.\n#   So whenever the factorization has more than one term, the sum exceeds p, which makes it unequal to the product.\n# \n# Therefore we need to consider all numbers from 2 to LIMIT*2 and factorize them in all possible ways to find all the relevant solutions.\ndef compute():\n\tLIMIT = 12000\n\tminsumproduct = [None] * (LIMIT + 1)\n\t\n\t# Calculates all factorizations of the integer n >= 2 and updates smaller solutions into minSumProduct.\n\t# For example, 12 can be factorized as follows - and duplicates are eliminated by finding only non-increasing sequences of factors:\n\t# - 12 = 12. (1 term)\n\t# - 12 = 6 * 2 * 1 * 1 * 1 * 1 = 6 + 2 + 1 + 1 + 1 + 1. (6 terms)\n\t# - 12 = 4 * 3 * 1 * 1 * 1 * 1 * 1 = 4 + 3 + 1 + 1 + 1 + 1 + 1. (7 terms)\n\t# - 12 = 3 * 2 * 2 * 1 * 1 * 1 * 1 * 1 = 3 + 2 + 2 + 1 + 1 + 1 + 1 + 1. (8 terms)\n\tdef factorize(n, remain, maxfactor, sum, terms):\n\t\tif remain == 1:\n\t\t\tif sum > n:  # Without using factors of 1, the sum never exceeds the product\n\t\t\t\traise AssertionError()\n\t\t\tterms += n - sum\n\t\t\tif terms <= LIMIT and (minsumproduct[terms] is None or n < minsumproduct[terms]):\n\t\t\t\tminsumproduct[terms] = n\n\t\telse:\n\t\t\t# Note: maxfactor <= remain\n\t\t\tfor i in range(2, maxfactor + 1):\n\t\t\t\tif remain % i == 0:\n\t\t\t\t\tfactor = i\n\t\t\t\t\tfactorize(n, remain // factor, min(factor, maxfactor), sum + factor, terms + 1)\n\t\n\tfor i in range(2, LIMIT * 2 + 1):\n\t\tfactorize(i, i, i, 0, 0)\n\t\n\t# Eliminate duplicates and compute sum\n\tans = sum(set(minsumproduct[2 : ]))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "7587457"}
{"number": 249, "problem": "<p>Let $S = \\{2, 3, 5, \\dots, 4999\\}$ be the set of prime numbers less than $5000$.</p>\n<p>Find the number of subsets of $S$, the sum of whose elements is a prime number.<br>\nEnter the rightmost $16$ digits as your answer.</p>\n", "solution": "# \n# Solution to Project Euler problem 249\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\ndef compute():\n\tLIMIT = 5000\n\tMODULUS = 10**16\n\t\n\t# Use dynamic programming. count[i] is the number of subsets of primes with the sum of i, modulo MODULUS.\n\tcount = [0] * (LIMIT**2 // 2)\n\tcount[0] = 1\n\ts = 0  # Sum of all primes seen so far, and thus the highest index among nonzero entries in 'count'\n\tfor p in eulerlib.list_primes(LIMIT):\n\t\tfor i in reversed(range(s + 1)):\n\t\t\tcount[i + p] = (count[i + p] + count[i]) % MODULUS\n\t\ts += p\n\t\n\tisprime = eulerlib.list_primality(s + 1)\n\tans = sum(count[i] for i in range(s + 1) if isprime[i]) % MODULUS\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "9275262564250418"}
{"number": 218, "problem": "<p>Consider the right angled triangle with sides $a=7$, $b=24$ and $c=25$.\nThe area of this triangle is $84$, which is divisible by the perfect numbers $6$ and $28$.<br>\nMoreover it is a primitive right angled triangle as $\\gcd(a,b)=1$ and $\\gcd(b,c)=1$.<br>\nAlso $c$ is a perfect square.</p>\n\n<p>We will call a right angled triangle perfect if<br>\n-it is a primitive right angled triangle<br>\n-its hypotenuse is a perfect square.</p>\n\n<p>We will call a right angled triangle super-perfect if<br>\n-it is a perfect right angled triangle and<br>\n-its area is a multiple of the perfect numbers $6$ and $28$.\n</p>\n\n<p>How many perfect right-angled triangles with $c \\le 10^{16}$ exist that are not super-perfect?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 218\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# == Primitive Pythagorean triples ==\n# \n# Each valid pair generates a PPT:\n# \n#   For each pair of positive integers (s,t) such that s > t, they are coprime, and one of them\n#   is odd and one of them is even: Let a = s^2 - t^2 (odd), b = 2st (even), and c = s^2 + t^2 (odd).\n#   Then (a,b,c) is a primitive Pythagorean triple (PPT).\n# \n#   Proof: The fact that a^2 + b^2 = c^2 can be readily verified. Now for the sake of contradiction,\n#   suppose some prime p divides each of {a,b,c} (which would make the Pythagorean triple non-primitive).\n#   Since p divides b = 2st and p is prime, p must divide at least one of {2,s,t}. a is odd, so 2 doesn't\n#   divide a, so p != 2. Hence p > 2, and p must divide at least one of {s,t}. p divides c = s^2 + t^2.\n#   WLOG if p divides s, then p divides the difference c - s^2 = t^2, thus p divides t.\n#   Therefore p divides {s,t}, contradicting that {s,t} are coprime.\n# \n# Each PPT can be generated from some valid pair:\n# \n#   Conversely, for each PPT (a,b,c) there exists an (s,t), satisfying the restrictions above,\n#   that generates it using the relations above.\n# \n#   Proof: WLOG assume that a is odd (otherwise swap the roles of a and b). Knowing that a^2 + b^2 = c^2\n#   and b is even, rearrange it to get (b/2)^2 = (c^2 - a^2)/4 = [(c-a)/2][(c+a)/2]. The claim is that\n#   (c-a)/2 and (c+a)/2 are both perfect squares. For any prime p, if it divides both (c-a)/2 and (c+a)/2,\n#   then it divides the sum (which is c) and the difference (which is a), so it would also divide c^2 - a^2 = b^2,\n#   contradicting the primitiveness. Thus each prime power (i.e. p^k) in the factorization of (b/2)^2 appears\n#   in either the factor (c-a)/2 or the factor (c+a)/2. Since (b/2)^2 is a perfect square, each prime power\n#   in it is a perfect square, and it would contribute to either (c-a)/2 or (c+a)/2, making both of them\n#   perfect squares as well.\n# \n#   With this setup, let s = sqrt((c+a)/2) and t = sqrt((c-a)/2), which are both positive integers.\n#   It's easy to verify that a = s^2 - t^2, b = 2st, and c = s^2 + t^2. Clearly s > t, since a is added in s\n#   while a is subtracted in t. {s,t} cannot both be even or both be odd, otherwise 2 divides all of {a,b,c},\n#   contradicting primitiveness. {s,t} must be coprime, otherwise some p divides {s,t}, so p^2 divides s^2 = (c+a)/2\n#   and p^2 divides t^2 = (c-a)^2, which contradicts {a,c} being coprime using the argument above.\n# \n# \n# == Perfect triangles ==\n# \n# A perfect right-angled triangle (a,b,c) has c = r^2 for some integer r. We use the PPT theorem converse\n# to find (s,t). The area of the triangle (a,b,c) is ab/2 = (s^2 - t^2)(2st)/2 = st(s^2 - t^2).\n# Curiously, we have c = s^2 + t^2 = r^2, which means (s,t,r) is itself a Pythagorean triple, and in fact\n# a primitive one because (s,t) are coprime. Use the PPT theorem converse on (s,t,r) (or (t,s,r), depending on\n# which of s or t is odd) to find (u,v), i.e. s = u^2 - v^2, t = 2uv, and r = u^2 + v^2.\n# So the area is also expressible as (u^2 - v^2)(2uv)[(u^2 - v^2)^2 - (2uv)^2].\n# \n# The area is divisible by 6 and 28 (super-perfectness) iff it is divisible by lcm(6, 28) = 84\n# = 3 * 4 * 7 (coprime factorization) iff it is divisible by 3, 4, and 7.\n# Now, the area is divisible by 4 because in the factor 2uv, either u or v is even.\n# The area is divisible by 3 because st is a factor in one of the area formulas, and with (s,t,r) being\n# a Pythagorean triple, at least one of {s,t} must be 0 mod 3 (see footnote 0).\n# Similarly, since (s,t,r) is a Pythagorean triple, 7 divides at least one of {s,t} (so 7 divides\n# the area factor of st), or s^2 = t^2 mod 7 (so 7 divides the area factor s^2 - t^2) (see footnote 1).\n# \n# In conclusion, every perfect right-angled triangle is also super-perfect.\n# There is no perfect triangle that isn't super-perfect.\n# \n# Footnote 0: This can be proven by brute force over the 3^3 cases of values of s,t,r mod 3.\n# Or alternatively: If s or t is 0 mod 3, then we're done. Otherwise, s is either 1 or 2 mod 3,\n# and t is either 1 or 2 mod 3. s^2 = 1 mod 3, and t^2 = 1 mod 3. s^2 + t^2 = 2 = r^2 mod 3,\n# but no r can satisfy r^2 = 2 mod 3. So this \"otherwise\" case is impossible.\n# \n# Footnote 1: This can also be proven by brute force over all 7^3 cases of values of s,t,r mod 7.\n# Or alternatively: If s or t is 0 mod 7, then we're done. Otherwise, notice that for k != 0 mod 7,\n# we have that k^2 mod 7 is in the set {1,2,4} (quadratic residues). If s^2 != t^2 mod 7,\n# then their sum mod 7 is not a residue, so r^2 != s^2 + t^2. Therefore it must be that s^2 = t^2 mod 7\n# (e.g. s = 3 mod 7, t = 4, r = 2 mod 7).\n\n\ndef compute():\n\treturn \"0\"\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "0"}
{"number": 329, "problem": "<p>Susan has a prime frog.<br>\nHer frog is jumping around over $500$ squares numbered $1$ to $500$.\nHe can only jump one square to the left or to the right, with equal probability, and he cannot jump outside the range $[1;500]$.<br>(if it lands at either end, it automatically jumps to the only available square on the next move.)\n</p>\n<p>\nWhen he is on a square with a prime number on it, he croaks 'P' (PRIME) with probability $2/3$ or 'N' (NOT PRIME) with probability $1/3$ just before jumping to the next square.<br>\nWhen he is on a square with a number on it that is not a prime he croaks 'P' with probability $1/3$ or 'N' with probability $2/3$ just before jumping to the next square.\n</p>\n<p>\nGiven that the frog's starting position is random with the same probability for every square, and given that she listens to his first $15$ croaks, what is the probability that she hears the sequence PPPPNNPPPNPPNPN?\n</p>\nGive your answer as a fraction $p/q$ in reduced form.\n\n", "solution": "# \n# Solution to Project Euler problem 329\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, fractions\n\n\n# We simulate by brute force all the possible paths that the frog can take, and\n# multiply and sum the probabilities along the way. The frog is initially positioned\n# at one of the 500 squares and makes a croak. Then it jumps left or right 14 times\n# and makes a croak after each jump (thus there are 15 croaks per simulation).\n# Overall, there are exactly 500 * 2^14 = 8.192 million paths to examine.\n# \n# Let's look at how the probabilities work for a particular path:\n# - Because the frog starts at each square with uniform probability and jumps left/right\n#   with equal probability, the probability of any particular path is 1 / (500 * 2^14).\n# - For any given path, it can generate exactly 2^15 croak sequences, but each sequence\n#   doesn't have the same probability. Look at the sequence of numbers that the frog\n#   lands on in this path, e.g. {2, 1, 0, 1, 2, 3, 4, 3, ...}. Now look at sequence of\n#   whether each of these numbers is prime, i.e. {P, N, N, N, P, P, N, P, ...}.\n#   The probability of the desired croak sequence is equal to (2/3)^(number of indexes\n#   where the croak letter matches the primeness sequence) * (1/3)^(number of indexes\n#   where the croak letter mismatches the primeness sequence). We can simplify this\n#   expression to just 2^(number of matching indexes) / 3^15.\n# \n# So for all the 8192000 paths, we calculate the probability that each path matches\n# the target croak sequence, sum all these probabilities, and divide by 8192000.\n# We perform calculations in fraction or integer form (not floating point),\n# and extract the numerator and denominator of the final simplified result.\n# \n# Note that this analysis is correct even considering the rule that when\n# the frog is at one of the range endpoints, it only has one possible move\n# (e.g. if the frog is at square 1, then it must move to square 2).\ndef compute():\n\tSTART_NUM = 1\n\tEND_NUM = 500\n\tCROAK_SEQ = \"PPPPNNPPPNPPNPN\"\n\tassert 0 <= START_NUM < END_NUM\n\tassert 1 <= len(CROAK_SEQ)\n\t\n\tNUM_JUMPS = len(CROAK_SEQ) - 1\n\tNUM_TRIALS = 2**NUM_JUMPS\n\t\n\tglobalnumerator = 0\n\tisprime = eulerlib.list_primality(END_NUM)\n\t\n\t# For each starting square\n\tfor i in range(START_NUM, END_NUM + 1):\n\t\t# For each sequence of jumps\n\t\tfor j in range(NUM_TRIALS):\n\t\t\t\n\t\t\t# Set initial position and croak\n\t\t\tpos = i\n\t\t\ttrialnumerator = 1\n\t\t\tif isprime[pos] == (CROAK_SEQ[0] == 'P'):\n\t\t\t\ttrialnumerator *= 2\n\t\t\t\n\t\t\t# Simulate each jump and croak\n\t\t\tfor k in range(NUM_JUMPS):\n\t\t\t\tif pos <= START_NUM:\n\t\t\t\t\tpos += 1  # Forced move\n\t\t\t\telif pos >= END_NUM:\n\t\t\t\t\tpos -= 1  # Forced move\n\t\t\t\telif (j >> k) & 1 == 0:\n\t\t\t\t\tpos += 1  # Chosen move\n\t\t\t\telse:\n\t\t\t\t\tpos -= 1  # Chosen move\n\t\t\t\t\n\t\t\t\t# Multiply the running probability by 2/3 if primeness of current position\n\t\t\t\t# matches croak sequence at current index, otherwise multiply by 1/3\n\t\t\t\tif isprime[pos] == (CROAK_SEQ[k + 1] == 'P'):\n\t\t\t\t\ttrialnumerator *= 2\n\t\t\tglobalnumerator += trialnumerator\n\t\n\t# Calculate final probability fraction\n\tglobaldenominator = (END_NUM + 1 - START_NUM) * 2**NUM_JUMPS * 3**len(CROAK_SEQ)\n\tans = fractions.Fraction(globalnumerator, globaldenominator)\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "199740353/29386561536000"}
{"number": 100, "problem": "<p>If a box contains twenty-one coloured discs, composed of fifteen blue discs and six red discs, and two discs were taken at random, it can be seen that the probability of taking two blue discs, $P(\\text{BB}) = (15/21) \\times (14/20) = 1/2$.</p>\n<p>The next such arrangement, for which there is exactly $50\\%$ chance of taking two blue discs at random, is a box containing eighty-five blue discs and thirty-five red discs.</p>\n<p>By finding the first arrangement to contain over $10^{12} = 1\\,000\\,000\\,000\\,000$ discs in total, determine the number of blue discs that the box would contain.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 100\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\n# Suppose the box has b blue discs and r red discs.\n# The probability of taking 2 blue discs is [b / (b + r)] * [(b - 1) / (b + r - 1)],\n# which we want to be equal to 1/2. Rearrange the equation:\n#   [b(b - 1)] / [(b + r)(b + r - 1)] = 1 / 2.\n#   2b(b - 1) = (b + r)(b + r - 1).\n#   2b^2 - 2b = b^2 + br - b + br + r^2 - r.\n#   b^2 - b = r^2 + 2br - r.\n#   b^2 - (2r + 1)b + (r - r^2) = 0.\n# Apply the quadratic equation to solve for b:\n#   b = [(2r + 1) +/- sqrt((2r + 1)^2 - 4(r - r^2))] / 2\n#     = r + [1 +/- sqrt(8r^2 + 1)]/2\n#     = r + [sqrt(8r^2 + 1) + 1]/2.  (Discard the minus solution because it would make b < r)\n# \n# For b to be an integer, we need sqrt(8r^2 + 1) to be odd, and also 8r^2 + 1 be a perfect square.\n# Assume 8y^2 + 1 = x^2 for some integer x > 0.\n# We can see this is in fact a Pell's equation: x^2 - 8y^2 = 1.\n# \n# Suppose we have the solution (x0, y0) such that x0 > 0 and x0 is as small as possible.\n# This is called the fundamental solution, and all other solutions be derived from it (proven elsewhere).\n# Suppose (x0, y0) and (x1, y1) are solutions. Then we have:\n#   x0^2 - 8*y0^2 = 1.\n#   (x0 + y0*sqrt(8))(x0 - y0*sqrt(8)) = 1.\n#   (x1 + y1*sqrt(8))(x1 - y1*sqrt(8)) = 1.  (Similarly)\n# Multiply them together:\n#   [(x0 + y0*sqrt(8))(x0 - y0*sqrt(8))][(x1 + y1*sqrt(8))(x1 - y1*sqrt(8))] = 1 * 1.\n#   [(x0 + y0*sqrt(8))(x1 + y1*sqrt(8))][(x0 - y0*sqrt(8))(x1 - y1*sqrt(8))] = 1.\n#   [x0*x1 + x0*y1*sqrt(8) + x1*y0*sqrt(8) + 8y0*y1][x0*x1 - x0*y1*sqrt(8) - x1*y0*sqrt(8) + 8y0*y1] = 1.\n#   [(x0*x1 + 8y0*y1) + (x0*y1 + x1*y0)*sqrt(8)][(x0*x1 + 8y0*y1) - (x0*y1 + x1*y0)*sqrt(8)] = 1.\n#   (x0*x1 + 8y0*y1)^2 - 8*(x0*y1 + x1*y0)^2 = 1.\n# Therefore (x0*x1 + 8y0*y1, x0*y1 + x1*y0) is also a solution.\n# By inspection, the fundamental solution is (3, 1).\ndef compute():\n\t# Fundamental solution\n\tx0 = 3\n\ty0 = 1\n\t\n\t# Current solution\n\tx = x0\n\ty = y0  # An alias for the number of red discs\n\twhile True:\n\t\t# Check if this solution is acceptable\n\t\tsqrt = math.isqrt(y**2 * 8 + 1)\n\t\tif sqrt % 2 == 1:  # Is odd\n\t\t\tblue = (sqrt + 1) // 2 + y\n\t\t\tif blue + y > 10**12:\n\t\t\t\treturn str(blue)\n\t\t\n\t\t# Create the next bigger solution\n\t\tnextx = x * x0 + y * y0 * 8\n\t\tnexty = x * y0 + y * x0\n\t\tx = nextx\n\t\ty = nexty\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "756872327473"}
{"number": 40, "problem": "<p>An irrational decimal fraction is created by concatenating the positive integers:\n$$0.12345678910{\\color{red}\\mathbf 1}112131415161718192021\\cdots$$</p>\n<p>It can be seen that the $12$<sup>th</sup> digit of the fractional part is $1$.</p>\n<p>If $d_n$ represents the $n$<sup>th</sup> digit of the fractional part, find the value of the following expression.\n$$d_1 \\times d_{10} \\times d_{100} \\times d_{1000} \\times d_{10000} \\times d_{100000} \\times d_{1000000}$$</p>\n", "solution": "# \n# Solution to Project Euler problem 40\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\ts = \"\".join(str(i) for i in range(1, 1000000))\n\tans = 1\n\tfor i in range(7):\n\t\tans *= int(s[10**i - 1])\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "210"}
{"number": 151, "problem": "<p>A printing shop runs 16 batches (jobs) every week and each batch requires a sheet of special colour-proofing paper of size A5.</p>\n\n<p>Every Monday morning, the supervisor opens a new envelope, containing a large sheet of the special paper with size A1.</p>\n\n<p>The supervisor proceeds to cut it in half, thus getting two sheets of size A2. Then one of the sheets is cut in half to get two sheets of size A3 and so on until an A5-size sheet is obtained, which is needed for the first batch of the week.</p>\n\n<p>All the unused sheets are placed back in the envelope.</p>\n\n<div class=\"center\"><img src=\"resources/images/0151.png?1678992052\" class=\"dark_img\" alt=\"\"></div>\n\n<p>At the beginning of each subsequent batch, the supervisor takes from the envelope one sheet of paper at random. If it is of size A5, then it is used. If it is larger, then the 'cut-in-half' procedure is repeated until an A5-size sheet is obtained, and any remaining sheets are always placed back in the envelope.</p>\n\n<p>Excluding the first and last batch of the week, find the expected number of times (during each week) that the supervisor finds a single sheet of paper in the envelope.</p>\n\n<p>Give your answer rounded to six decimal places using the format x.xxxxxx .</p>\n", "solution": "# \n# Solution to Project Euler problem 151\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport functools\n\n\ndef compute():\n\tans = get_expected_singles((1,)) - 2\n\treturn f\"{ans:.6f}\"\n\n\n@functools.cache\ndef get_expected_singles(state):\n\tresult = 0.0\n\tif len(state) > 0:\n\t\tfor i in range(len(state)):\n\t\t\ttempstate = list(state)\n\t\t\tsheet = state[i]\n\t\t\tdel tempstate[i]\n\t\t\tfor j in range(sheet + 1, 6):\n\t\t\t\ttempstate.append(j)\n\t\t\ttempstate.sort()\n\t\t\tresult += get_expected_singles(tuple(tempstate))\n\t\tresult /= len(state)\n\t\tif len(state) == 1:\n\t\t\tresult += 1.0\n\treturn result\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "0.464399"}
{"number": 11, "problem": "<p>In the $20 \\times 20$ grid below, four numbers along a diagonal line have been marked in red.</p>\n<p class=\"monospace center\">\n08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08<br>\n49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00<br>\n81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65<br>\n52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91<br>\n22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80<br>\n24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50<br>\n32 98 81 28 64 23 67 10 <span class=\"red\"><b>26</b></span> 38 40 67 59 54 70 66 18 38 64 70<br>\n67 26 20 68 02 62 12 20 95 <span class=\"red\"><b>63</b></span> 94 39 63 08 40 91 66 49 94 21<br>\n24 55 58 05 66 73 99 26 97 17 <span class=\"red\"><b>78</b></span> 78 96 83 14 88 34 89 63 72<br>\n21 36 23 09 75 00 76 44 20 45 35 <span class=\"red\"><b>14</b></span> 00 61 33 97 34 31 33 95<br>\n78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92<br>\n16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57<br>\n86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58<br>\n19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40<br>\n04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66<br>\n88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69<br>\n04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36<br>\n20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16<br>\n20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54<br>\n01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48<br></p>\n<p>The product of these numbers is $26 \\times 63 \\times 78 \\times 14 = 1788696$.</p>\n<p>What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the $20 \\times 20$ grid?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 11\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# We visit each grid cell and compute the product in the 4 directions starting from that cell.\ndef compute():\n\tans = -1\n\twidth = len(GRID[0])\n\theight = len(GRID)\n\tfor y in range(height):\n\t\tfor x in range(width):\n\t\t\tif x + CONSECUTIVE <= width:\n\t\t\t\tans = max(grid_product(x, y,  1, 0, CONSECUTIVE), ans)\n\t\t\tif y + CONSECUTIVE <= height:\n\t\t\t\tans = max(grid_product(x, y,  0, 1, CONSECUTIVE), ans)\n\t\t\tif x + CONSECUTIVE <= width and y + CONSECUTIVE <= height:\n\t\t\t\tans = max(grid_product(x, y,  1, 1, CONSECUTIVE), ans)\n\t\t\tif x - CONSECUTIVE >= -1    and y + CONSECUTIVE <= height:\n\t\t\t\tans = max(grid_product(x, y, -1, 1, CONSECUTIVE), ans)\n\treturn str(ans)\n\n\ndef grid_product(ox, oy, dx, dy, n):\n\tresult = 1\n\tfor i in range(n):\n\t\tresult *= GRID[oy + i * dy][ox + i * dx]\n\treturn result\n\n\nGRID = [\n\t[ 8, 2,22,97,38,15, 0,40, 0,75, 4, 5, 7,78,52,12,50,77,91, 8],\n\t[49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48, 4,56,62, 0],\n\t[81,49,31,73,55,79,14,29,93,71,40,67,53,88,30, 3,49,13,36,65],\n\t[52,70,95,23, 4,60,11,42,69,24,68,56, 1,32,56,71,37, 2,36,91],\n\t[22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80],\n\t[24,47,32,60,99, 3,45, 2,44,75,33,53,78,36,84,20,35,17,12,50],\n\t[32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70],\n\t[67,26,20,68, 2,62,12,20,95,63,94,39,63, 8,40,91,66,49,94,21],\n\t[24,55,58, 5,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72],\n\t[21,36,23, 9,75, 0,76,44,20,45,35,14, 0,61,33,97,34,31,33,95],\n\t[78,17,53,28,22,75,31,67,15,94, 3,80, 4,62,16,14, 9,53,56,92],\n\t[16,39, 5,42,96,35,31,47,55,58,88,24, 0,17,54,24,36,29,85,57],\n\t[86,56, 0,48,35,71,89, 7, 5,44,44,37,44,60,21,58,51,54,17,58],\n\t[19,80,81,68, 5,94,47,69,28,73,92,13,86,52,17,77, 4,89,55,40],\n\t[ 4,52, 8,83,97,35,99,16, 7,97,57,32,16,26,26,79,33,27,98,66],\n\t[88,36,68,87,57,62,20,72, 3,46,33,67,46,55,12,32,63,93,53,69],\n\t[ 4,42,16,73,38,25,39,11,24,94,72,18, 8,46,29,32,40,62,76,36],\n\t[20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74, 4,36,16],\n\t[20,73,35,29,78,31,90, 1,74,31,49,71,48,86,81,16,23,57, 5,54],\n\t[ 1,70,54,71,83,51,54,69,16,92,33,48,61,43,52, 1,89,19,67,48],\n]\nCONSECUTIVE = 4\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "70600674"}
{"number": 87, "problem": "<p>The smallest number expressible as the sum of a prime square, prime cube, and prime fourth power is $28$. In fact, there are exactly four numbers below fifty that can be expressed in such a way:</p>\n\\begin{align}\n28 &amp;= 2^2 + 2^3 + 2^4\\\\\n33 &amp;= 3^2 + 2^3 + 2^4\\\\\n49 &amp;= 5^2 + 2^3 + 2^4\\\\\n47 &amp;= 2^2 + 3^3 + 2^4\n\\end{align}\n<p>How many numbers below fifty million can be expressed as the sum of a prime square, prime cube, and prime fourth power?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 87\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, math\n\n\ndef compute():\n\tLIMIT = 50000000\n\tprimes = eulerlib.list_primes(math.isqrt(LIMIT))\n\t\n\tsums = {0}\n\tfor i in range(2, 5):\n\t\tnewsums = set()\n\t\tfor p in primes:\n\t\t\tq = p**i\n\t\t\tif q > LIMIT:\n\t\t\t\tbreak\n\t\t\tfor x in sums:\n\t\t\t\tif x + q <= LIMIT:\n\t\t\t\t\tnewsums.add(x + q)\n\t\tsums = newsums\n\treturn str(len(sums))\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1097343"}
{"number": 347, "problem": "<p>\nThe largest integer $\\le 100$ that is only divisible by both the primes $2$ and $3$ is $96$, as $96=32\\times 3=2^5 \\times 3$.\nFor two <i>distinct</i> primes $p$ and $q$ let $M(p,q,N)$ be the largest positive integer $\\le N$ only divisible by both $p$ and $q$ and $M(p,q,N)=0$ if such a positive integer does not exist.\n</p>\n<p>\nE.g. $M(2,3,100)=96$.<br> \n$M(3,5,100)=75$ and not $90$ because $90$ is divisible by $2$, $3$ and $5$.<br>\nAlso $M(2,73,100)=0$ because there does not exist a positive integer $\\le 100$ that is divisible by both $2$ and $73$.\n</p>\n<p>\nLet $S(N)$ be the sum of all distinct $M(p,q,N)$.\n$S(100)=2262$.\n</p>\n<p>\nFind $S(10\\,000\\,000)$.\n</p>\n\n\n\n\n\n", "solution": "# \n# Solution to Project Euler problem 347\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, math\n\n\ndef compute():\n\tLIMIT = 10000000\n\t\n\tpossible = set()\n\tprimes = eulerlib.list_primes(LIMIT // 2)\n\tend = math.isqrt(LIMIT)\n\tfor i in range(len(primes)):\n\t\tp = primes[i]\n\t\tif p > end:\n\t\t\tbreak\n\t\tfor j in range(i + 1, len(primes)):\n\t\t\tq = primes[j]\n\t\t\tlcm = p * q\n\t\t\tif lcm > LIMIT:\n\t\t\t\tbreak\n\t\t\tmultlimit = LIMIT // lcm\n\t\t\t\n\t\t\tmultiplier = 1\n\t\t\twhile multiplier * p <= multlimit:\n\t\t\t\tmultiplier *= p\n\t\t\tmaxmult = multiplier\n\t\t\twhile multiplier % p == 0:\n\t\t\t\tmultiplier //= p\n\t\t\t\twhile multiplier * q <= multlimit:\n\t\t\t\t\tmultiplier *= q\n\t\t\t\tmaxmult = max(multiplier, maxmult)\n\t\t\tpossible.add(maxmult * lcm)\n\t\n\tans = sum(possible)\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "11109800204052"}
{"number": 25, "problem": "<p>The Fibonacci sequence is defined by the recurrence relation:</p>\n<blockquote>$F_n = F_{n - 1} + F_{n - 2}$, where $F_1 = 1$ and $F_2 = 1$.</blockquote>\n<p>Hence the first $12$ terms will be:</p>\n\\begin{align}\nF_1 &amp;= 1\\\\\nF_2 &amp;= 1\\\\\nF_3 &amp;= 2\\\\\nF_4 &amp;= 3\\\\\nF_5 &amp;= 5\\\\\nF_6 &amp;= 8\\\\\nF_7 &amp;= 13\\\\\nF_8 &amp;= 21\\\\\nF_9 &amp;= 34\\\\\nF_{10} &amp;= 55\\\\\nF_{11} &amp;= 89\\\\\nF_{12} &amp;= 144\n\\end{align}\n<p>The $12$th term, $F_{12}$, is the first term to contain three digits.</p>\n<p>What is the index of the first term in the Fibonacci sequence to contain $1000$ digits?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 25\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\n# Because the target number is relatively small, we simply compute each Fibonacci number starting\n# from the beginning until we encounter one with exactly 1000 digits. The Fibonacci sequence grows\n# exponentially with a base of about 1.618, so the numbers in base 10 will lengthen by one digit\n# after every log10(1.618) ~= 4.78 steps on average. This means the answer is at index around 4780.\ndef compute():\n\tDIGITS = 1000\n\tprev = 1\n\tcur = 0\n\tfor i in itertools.count():\n\t\t# At this point, prev = fibonacci(i - 1) and cur = fibonacci(i)\n\t\tif len(str(cur)) > DIGITS:\n\t\t\traise RuntimeError(\"Not found\")\n\t\telif len(str(cur)) == DIGITS:\n\t\t\treturn str(i)\n\t\t\n\t\t# Advance the Fibonacci sequence by one step\n\t\tprev, cur = cur, prev + cur\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "4782"}
{"number": 165, "problem": "<p>A segment is uniquely defined by its two endpoints.<br> By considering two line segments in plane geometry there are three possibilities:<br> \nthe segments have zero points, one point, or infinitely many points in common.</p>\n<p>Moreover when two segments have exactly one point in common it might be the case that that common point is an endpoint of either one of the segments or of both. If a common point of two segments is not an endpoint of either of the segments it is an interior point of both segments.<br>\nWe will call a common point $T$ of two segments $L_1$ and $L_2$ a true intersection point of $L_1$ and $L_2$ if $T$ is the only common point of $L_1$ and $L_2$ and $T$ is an interior point of both segments.\n</p>\n<p>Consider the three segments $L_1$, $L_2$, and $L_3$:</p>\n<ul style=\"list-style-type:none;\">\n<li>$L_1$: $(27, 44)$ to $(12, 32)$</li>\n<li>$L_2$: $(46, 53)$ to $(17, 62)$</li>\n<li>$L_3$: $(46, 70)$ to $(22, 40)$</li></ul>\n<p>It can be verified that line segments $L_2$ and $L_3$ have a true intersection point. We note that as the one of the end points of $L_3$: $(22,40)$ lies on $L_1$ this is not considered to be a true point of intersection. $L_1$ and $L_2$ have no common point. So among the three line segments, we find one true intersection point.</p>\n<p>Now let us do the same for $5000$ line segments. To this end, we generate $20000$ numbers using the so-called \"Blum Blum Shub\" pseudo-random number generator.</p>\n\\begin{align}\ns_0 &amp;= 290797\\\\\ns_{n + 1} &amp;= s_n \\times s_n \\pmod{50515093}\\\\\nt_n &amp;= s_n \\pmod{500}\n\\end{align}\n<p>To create each line segment, we use four consecutive numbers $t_n$. That is, the first line segment is given by:</p>\n<p>$(t_1, t_2)$ to $(t_3, t_4)$.</p>\n<p>The first four numbers computed according to the above generator should be: $27$, $144$, $12$ and $232$. The first segment would thus be $(27,144)$ to $(12,232)$.</p>\n<p>How many distinct true intersection points are found among the $5000$ line segments?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 165\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport fractions\n\n\ndef compute():\n\trand = BbsRandom()\n\tlines = [LineSegment(rand) for _ in range(NUM_LINE_SEGMENTS)]\n\t\n\ttrueintersections = set()\n\tfor (i, seg0) in enumerate(lines):\n\t\tfor seg1 in lines[i + 1 : ]:\n\t\t\tx0 = seg0.x0;  y0 = seg0.y0\n\t\t\tx1 = seg0.x1;  y1 = seg0.y1\n\t\t\tx2 = seg1.x0;  y2 = seg1.y0\n\t\t\tx3 = seg1.x1;  y3 = seg1.y1\n\t\t\t\n\t\t\t# https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line_segment\n\t\t\tdenom = (x0 - x1) * (y2 - y3) - (x2 - x3) * (y0 - y1)\n\t\t\tif denom == 0:\n\t\t\t\t# There is no unique intersection point between the two infinite lines. This is equivalent to\n\t\t\t\t# {one or both line segments being just a point, or both line segments being parallel\n\t\t\t\t# (regardless of whether or not they lie on the same infinite line)}.\n\t\t\t\tcontinue\n\t\t\tnumer0 = (x0 - x2) * (y2 - y3) - (x2 - x3) * (y0 - y2)\n\t\t\tnumer1 = (x1 - x0) * (y0 - y2) - (x0 - x2) * (y1 - y0)\n\t\t\t\n\t\t\tt0 = fractions.Fraction(numer0, denom)\n\t\t\tt1 = fractions.Fraction(numer1, denom)\n\t\t\tif 0 < t0 < 1 and 0 < t1 < 1:\n\t\t\t\ttrueintersections.add((x0 + t0 * (x1 - x0), y0 + t0 * (y1 - y0)))\n\t\n\treturn str(len(trueintersections))\n\n\nNUM_LINE_SEGMENTS = 5000\n\n\n\n# Blum Blum Shub generator\nclass BbsRandom:\n\t\n\tdef __init__(self):\n\t\tself.state = 290797\n\t\n\t\n\tdef next(self):\n\t\tself.state *= self.state\n\t\tself.state %= 50515093\n\t\treturn self.state % 500\n\n\n\nclass LineSegment:\n\t\n\tdef __init__(self, r):\n\t\tself.x0 = r.next()\n\t\tself.y0 = r.next()\n\t\tself.x1 = r.next()\n\t\tself.y1 = r.next()\n\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "2868868"}
{"number": 74, "problem": "<p>The number $145$ is well known for the property that the sum of the factorial of its digits is equal to $145$:\n$$1! + 4! + 5! = 1 + 24 + 120 = 145.$$</p>\n<p>Perhaps less well known is $169$, in that it produces the longest chain of numbers that link back to $169$; it turns out that there are only three such loops that exist:</p>\n\\begin{align}\n&amp;169 \\to 363601 \\to 1454 \\to 169\\\\\n&amp;871 \\to 45361 \\to 871\\\\\n&amp;872 \\to 45362 \\to 872\n\\end{align}\n<p>It is not difficult to prove that EVERY starting number will eventually get stuck in a loop. For example,</p>\n\\begin{align}\n&amp;69 \\to 363600 \\to 1454 \\to 169 \\to 363601 (\\to 1454)\\\\\n&amp;78 \\to 45360 \\to 871 \\to 45361 (\\to 871)\\\\\n&amp;540 \\to 145 (\\to 145)\n\\end{align}\n<p>Starting with $69$ produces a chain of five non-repeating terms, but the longest non-repeating chain with a starting number below one million is sixty terms.</p>\n<p>How many chains, with a starting number below one million, contain exactly sixty non-repeating terms?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 74\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\ndef compute():\n\tLIMIT = 10**6\n\tans = sum(1 for i in range(LIMIT) if get_chain_length(i) == 60)\n\treturn str(ans)\n\n\ndef get_chain_length(n):\n\tseen = set()\n\twhile True:\n\t\tseen.add(n)\n\t\tn = factorialize(n)\n\t\tif n in seen:\n\t\t\treturn len(seen)\n\n\ndef factorialize(n):\n\tresult = 0\n\twhile n != 0:\n\t\tresult += FACTORIAL[n % 10]\n\t\tn //= 10\n\treturn result\n\nFACTORIAL = [math.factorial(i) for i in range(10)]\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "402"}
{"number": 134, "problem": "<p>Consider the consecutive primes $p_1 = 19$ and $p_2 = 23$. It can be verified that $1219$ is the smallest number such that the last digits are formed by $p_1$ whilst also being divisible by $p_2$.</p>\n<p>In fact, with the exception of $p_1 = 3$ and $p_2 = 5$, for every pair of consecutive primes, $p_2 \\gt p_1$, there exist values of $n$ for which the last digits are formed by $p_1$ and $n$ is divisible by $p_2$. Let $S$ be the smallest of these values of $n$.</p>\n<p>Find $\\sum S$ for every pair of consecutive primes with $5 \\le p_1 \\le 1000000$.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 134\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, itertools\n\n\n# Let p and q be the two primes. Let k be the smallest power of 10 that exceeds p.\n# The number that we seek is n = mk + p, where n is divisible by q, and m is minimized.\n# (For example, p = 19, q = 23, k = 100, m = 12, n = 1219.)\n# \n# Firstly, n = mk + p = 0 mod q. By rearrangement, m = -p k^-1 mod q. (k^-1 exists because q is coprime with 10.)\n# Then of course the smallest m that satisfies the divisibility condition is the one such that 0 <= m < q.\ndef compute():\n\tans = 0\n\tprimes = eulerlib.list_primes(2000000)\n\tfor i in itertools.count(2):\n\t\tp = primes[i]\n\t\tq = primes[i + 1]\n\t\tif p > 1000000:\n\t\t\tbreak\n\t\tk = 1\n\t\twhile k < p:\n\t\t\tk *= 10\n\t\tm = (q - p) * pow(k, -1, q) % q\n\t\tans += m * k + p\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "18613426663617118"}
{"number": 549, "problem": "<p>\nThe smallest number $m$ such that $10$ divides $m!$ is $m=5$.<br>\nThe smallest number $m$ such that $25$ divides $m!$ is $m=10$.<br> \n</p>\n<p>\nLet $s(n)$ be the smallest number $m$ such that $n$ divides $m!$.<br>\nSo $s(10)=5$ and $s(25)=10$.<br>\nLet $S(n)$ be $\\sum s(i)$ for $2 \\le i \\le n$.<br>\n$S(100)=2012$.\n</p>\n<p>\nFind $S(10^8)$.\n</p>\n\n", "solution": "# \n# Solution to Project Euler problem 549\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\n# For any n >= 2, how do we compute s(n) = m, where m is the smallest integer such that m! is divisible by n?\n# Two important simple observations:\n# - n! is clearly divisible by n. So 2 <= s(n) <= n.\n# - If n divides m!, then n also divides (m+1)!, (m+2)!, etc. (i.e. all factorials after m).\n#   Thus a possible strategy is to find lower bounds for m, and refine our way up to the real answer.\n# We begin by factorizing n as a product of powers of unique prime numbers: n = p_0^k_0 * p_1^k^1 * ... .\n# \n# Now for each index i in this product, look at the prime power p_i^k_i.\n# There is some smallest j such that j! is divisible by p_i^k_i.\n# We argue this j must be a multiple of p_i. This is because if j is not a multiple of p_i,\n# then the factorization of (j-1)! contains exactly as many copies of the factor p_i as j!.\n# Or to look at it another way, as j increases, the value j! gains new copies of the factor p_i\n# every time j's factorization contains p_i. (For example if we are interested in p = 2, then\n# 2 = 2 (has 1 copy of 2), 4 = 2 * 2 (has 2 copies), 6 = 2 * 3 (has 1 copy), 8 = 2 * 2 * 2 (has 3 copies).)\n# \n# For each index i in the prime factorization, we compute the smallest j such that p_i^k_i divides j!.\n# We argue that the maximum among all these j's is the answer m = s(n).\n# By construction, every p_i^k_i divides this m! and m! > 0. Because all these p_i^k_i's are pairwise coprime,\n# by the Chinese remainder theorem, {the product of all these p_i^k_i's} also divides m!.\n# \n# One consequence is that if n contains a big prime factor p, then m must be at least p.\n# This is because otherwise if m < p, then m! will not contain a factor of p.\n# For example if n = 245262 = 2 * 3 * 41 * 997, then s(n) >= 997. In fact s(n) = 997.\n# \n# With this derivation in hand, we can work backwards, starting from primes\n# and figuring out the smallest divisible factorial for each number.\n# \n# Let's look at p = 2, the smallest prime number. Every number that is a multiple of 2 (including 2 itself)\n# will be affected by how many copies of 2 are in the factorization of some factorial.\n# - First we look at j = p = 2. The factorization of j! = 2! has 1 copy of 2. So we know that every number\n#   whose factorization has at least 1 copy of 2 will have a smallest-divisible-factorial of at least j = 2.\n#   We update all numbers that are multiples of 2.\n# - Next we look at j = 2p = 4. The factorization of j! = 4! has 3 copies of 2. So we know that every number\n#   whose factorization has at least 2 copies of 2 will have a smallest-divisible-factorial of at least j = 4.\n#   We update all numbers that are multiples of 2^2 = 4.\n# - Next we look at j = 3p = 6. The factorization of j! = 6! has 4 copies of 2. So we know that every number\n#   whose factorization has at least 4 copies of 2 will have a smallest-divisible-factorial of at least j = 6.\n#   We update all numbers that are multiples of 2^4 = 16.\n# We keep increasing j until p^j exceeds the limit, in which case there are no more numbers to update.\n# Note that in this process, we update all numbers that are multiples of 2, but no numbers that are not multiples of 2.\n# Because of this, the next lowest number that has never been updated (i.e. 3) must be a prime number,\n# and this process is effectively a modified version of the sieve of Eratosthenes. In other words, we can\n# use a single array to both sieve prime numbers and compute the smallest-divisible-factorial simultaneously.\ndef compute():\n\tLIMIT = 10**8\n\t\n\t# Modification of the sieve of Eratosthenes\n\tsmallestdivisiblefactorials = [0] * (LIMIT + 1)\n\tfor i in range(2, len(smallestdivisiblefactorials)):\n\t\tif smallestdivisiblefactorials[i] == 0:\n\t\t\t# Now we know that i is prime\n\t\t\t\n\t\t\tpower = 1\n\t\t\tfor j in itertools.count(i, i):\n\t\t\t\t# We know j contains at least one factor of i\n\t\t\t\tpower *= i\n\t\t\t\tif power > LIMIT:\n\t\t\t\t\tbreak\n\t\t\t\t\n\t\t\t\t# Update answer for all multiples of 'power'\n\t\t\t\tfor k in range(power, len(smallestdivisiblefactorials), power):\n\t\t\t\t\tsmallestdivisiblefactorials[k] = max(j, smallestdivisiblefactorials[k])\n\t\t\t\t\n\t\t\t\t# Update power to include the remaining factors of i in j\n\t\t\t\ttemp = j // i\n\t\t\t\twhile temp % i == 0:\n\t\t\t\t\tpower *= i\n\t\t\t\t\ttemp //= i\n\t\n\tans = sum(smallestdivisiblefactorials)\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "476001479068717"}
{"number": 518, "problem": "<p>Let $S(n) = \\sum a + b + c$ over all triples $(a, b, c)$ such that:</p>\n\n<ul style=\"list-style-type:disc;\"><li>$a$, $b$ and $c$ are prime numbers.</li>\n<li>$a \\lt b \\lt c \\lt n$.</li>\n<li>$a+1$, $b+1$, and $c+1$ form a <strong>geometric sequence</strong>.</li>\n</ul><p>For example, $S(100) = 1035$ with the following triples: </p>\n\n<p>$(2, 5, 11)$, $(2, 11, 47)$, $(5, 11, 23)$, $(5, 17, 53)$, $(7, 11, 17)$, $(7, 23, 71)$, $(11, 23, 47)$, $(17, 23, 31)$, $(17, 41, 97)$, $(31, 47, 71)$, $(71, 83, 97)$</p>\n\n<p>Find $S(10^8)$.</p>\n", "solution": "# \n# Solution to Project Euler problem 518\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https:#www.nayuki.io/page/project-euler-solutions\n# https:#github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, math, itertools\n\n\n# Suppose (a+1, b+1, c+1) are three positive integers that form a geometric sequence.\n# Then by definition, (c+1)/(b+1) = (b+1)/(a+1) = r for some ratio r.\n# r is a rational number because we are given that a, b, c are integers.\n# \n# Because of this, we can express r = z / y in lowest terms (i.e. y and z are coprime).\n# Note that since the solution requires a < b < c, we require r > 1, hence z > y > 0.\n# \n# Let's define x = (a+1) / y^2. Then we rearrange to get a + 1 = x * y * y.\n# We argue that x is an integer. Look at (c+1)/(a+1) = z^2/y^2. y^2 and z^2 are coprime,\n# thus the simplified denominator y^2 must divide the original denominator of a+1.\n# \n# With {x, y, z} defined, we have b + 1 = x * y * z and c + 1 = x * z * z.\n# Therefore every possible solution (a+1, b+1, c+1) can be re-expressed as\n# a triple of integers (x, y, z) such that x >= 1, y >= 1, z > y, and gcd(y,z) = 1.\n# In fact, this mapping of (a+1, b+1, c+1) to (x, y, z) is unique - this is because\n# the ratio (b+1)/(a+1) uniquely determines y and z; subsequently a and y together give x.\n# \n# The rest of the algorithm is a matter of searching x, y, z in some ascending order, and stopping\n# each loop when no more candidates are possible because they all necessarily exceed the limit.\ndef compute():\n\tLIMIT = 10**8\n\t\n\tans = 0\n\tisprime = eulerlib.list_primality(LIMIT - 1)\n\t\n\t# Search all possible x's. We know that c = x * z * z - 1. With the requirement c < LIMIT, we have x * z * z <= LIMIT.\n\t# Because z > y > 0, we know z >= 2. So at the very least we require x * 4 <= LIMIT. This implies x <= floor(LIMIT/4).\n\tfor x in range(1, LIMIT // 4 + 1):\n\t\t\n\t\t# Search all possible y's. Notice that when y increases, 'a' strictly increases.\n\t\t# So when some y generates an 'a' such that a >= LIMIT, no candidates are possible with higher values of y.\n\t\tfor y in itertools.count(1):\n\t\t\ta = x * y * y - 1\n\t\t\tif a >= LIMIT:\n\t\t\t\tbreak\n\t\t\tif not isprime[a]:\n\t\t\t\tcontinue\n\t\t\t\n\t\t\t# Search all valid z's. We require z > y and gcd(y, z) = 1. Notice that when z increases, c strictly increases.\n\t\t\t# So when some z generates a c such that c >= LIMIT, no candidates are possible with higher values of z.\n\t\t\tfor z in itertools.count(y + 1):\n\t\t\t\tif math.gcd(y, z) != 1:\n\t\t\t\t\tcontinue\n\t\t\t\tc = x * z * z - 1\n\t\t\t\tif c >= LIMIT:\n\t\t\t\t\tbreak\n\t\t\t\t\n\t\t\t\t# Check whether (a, b, c) is a solution\n\t\t\t\tif isprime[c]:\n\t\t\t\t\tb = x * y * z - 1\n\t\t\t\t\tif isprime[b]:\n\t\t\t\t\t\tans += a + b + c\n\t\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "100315739184392"}
{"number": 124, "problem": "<p>The radical of $n$, $\\operatorname{rad}(n)$, is the product of the distinct prime factors of $n$. For example, $504 = 2^3 \\times 3^2 \\times 7$, so $\\operatorname{rad}(504) = 2 \\times 3 \\times 7 = 42$.</p>\n<p>If we calculate $\\operatorname{rad}(n)$ for $1 \\le n \\le 10$, then sort them on $\\operatorname{rad}(n)$, and sorting on $n$ if the radical values are equal, we get:</p>\n<table class=\"center\">\n<tr>\n   <th colspan=\"2\">Unsorted</th>\n   <td class=\"w25\">\u00a0</td>\n   <th colspan=\"3\">Sorted</th>\n</tr>\n<tr>\n   <th class=\"w50\"><i>n</i></th>\n   <th class=\"w50\">rad(<i>n</i>)</th>\n   <td>\u00a0</td>\n   <th class=\"w50\"><i>n</i></th>\n   <th class=\"w50\">rad(<i>n</i>)</th>\n   <th class=\"w50\">k</th>\n</tr>\n<tr>\n   <td>1</td><td>1</td>\n   <td>\u00a0</td>\n   <td>1</td><td>1</td><td>1</td>\n</tr>\n<tr>\n   <td>2</td><td>2</td>\n   <td>\u00a0</td>\n   <td>2</td><td>2</td><td>2</td>\n</tr>\n<tr>\n   <td>3</td><td>3</td>\n   <td>\u00a0</td>\n   <td>4</td><td>2</td><td>3</td>\n</tr>\n<tr>\n   <td>4</td><td>2</td>\n   <td>\u00a0</td>\n   <td>8</td><td>2</td><td>4</td>\n</tr>\n<tr>\n   <td>5</td><td>5</td>\n   <td>\u00a0</td>\n   <td>3</td><td>3</td><td>5</td>\n</tr>\n<tr>\n   <td>6</td><td>6</td>\n   <td>\u00a0</td>\n   <td>9</td><td>3</td><td>6</td>\n</tr>\n<tr>\n   <td>7</td><td>7</td>\n   <td>\u00a0</td>\n   <td>5</td><td>5</td><td>7</td>\n</tr>\n<tr>\n   <td>8</td><td>2</td>\n   <td>\u00a0</td>\n   <td>6</td><td>6</td><td>8</td>\n</tr>\n<tr>\n   <td>9</td><td>3</td>\n   <td>\u00a0</td>\n   <td>7</td><td>7</td><td>9</td>\n</tr>\n<tr>\n   <td>10</td><td>10</td>\n   <td>\u00a0</td>\n   <td>10</td><td>10</td><td>10</td>\n</tr>\n</table>\n<p>Let $E(k)$ be the $k$-th element in the sorted $n$ column; for example, $E(4) = 8$ and $E(6) = 9$.</p>\n<p>If $\\operatorname{rad}(n)$ is sorted for $1 \\le n \\le 100000$, find $E(10000)$.</p>\n", "solution": "# \n# Solution to Project Euler problem 124\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tLIMIT = 100000\n\t\n\t# Modification of the sieve of Eratosthenes\n\trads = [0] + [1] * LIMIT\n\tfor i in range(2, len(rads)):\n\t\tif rads[i] == 1:\n\t\t\tfor j in range(i, len(rads), i):\n\t\t\t\trads[j] *= i\n\t\n\tdata = sorted((rad, i) for (i, rad) in enumerate(rads))\n\treturn str(data[10000][1])\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "21417"}
{"number": 64, "problem": "<p>All square roots are periodic when written as continued fractions and can be written in the form:</p>\n\n$\\displaystyle \\quad \\quad \\sqrt{N}=a_0+\\frac 1 {a_1+\\frac 1 {a_2+ \\frac 1 {a3+ \\dots}}}$\n\n<p>For example, let us consider $\\sqrt{23}:$</p>\n$\\quad \\quad \\sqrt{23}=4+\\sqrt{23}-4=4+\\frac 1 {\\frac 1 {\\sqrt{23}-4}}=4+\\frac 1  {1+\\frac{\\sqrt{23}-3}7}$\n\n<p>If we continue we would get the following expansion:</p>\n\n$\\displaystyle \\quad \\quad \\sqrt{23}=4+\\frac 1 {1+\\frac 1 {3+ \\frac 1 {1+\\frac 1 {8+ \\dots}}}}$\n\n<p>The process can be summarised as follows:</p>\n<p>\n$\\quad \\quad a_0=4, \\frac 1 {\\sqrt{23}-4}=\\frac {\\sqrt{23}+4} 7=1+\\frac {\\sqrt{23}-3} 7$<br>\n$\\quad \\quad a_1=1, \\frac 7 {\\sqrt{23}-3}=\\frac {7(\\sqrt{23}+3)} {14}=3+\\frac {\\sqrt{23}-3} 2$<br>\n$\\quad \\quad a_2=3, \\frac 2 {\\sqrt{23}-3}=\\frac {2(\\sqrt{23}+3)} {14}=1+\\frac {\\sqrt{23}-4} 7$<br>\n$\\quad \\quad a_3=1, \\frac 7 {\\sqrt{23}-4}=\\frac {7(\\sqrt{23}+4)} 7=8+\\sqrt{23}-4$<br>\n$\\quad \\quad a_4=8, \\frac 1 {\\sqrt{23}-4}=\\frac {\\sqrt{23}+4} 7=1+\\frac {\\sqrt{23}-3} 7$<br>\n$\\quad \\quad a_5=1, \\frac 7 {\\sqrt{23}-3}=\\frac {7 (\\sqrt{23}+3)} {14}=3+\\frac {\\sqrt{23}-3} 2$<br>\n\n$\\quad \\quad a_6=3, \\frac 2 {\\sqrt{23}-3}=\\frac {2(\\sqrt{23}+3)} {14}=1+\\frac {\\sqrt{23}-4} 7$<br>\n$\\quad \\quad a_7=1, \\frac 7 {\\sqrt{23}-4}=\\frac {7(\\sqrt{23}+4)} {7}=8+\\sqrt{23}-4$<br>\n</p>\n\n<p>It can be seen that the sequence is repeating. For conciseness, we use the notation $\\sqrt{23}=[4;(1,3,1,8)]$, to indicate that the block (1,3,1,8) repeats indefinitely.</p>\n\n<p>The first ten continued fraction representations of (irrational) square roots are:</p>\n<p>\n$\\quad \\quad \\sqrt{2}=[1;(2)]$, period=$1$<br>\n$\\quad \\quad \\sqrt{3}=[1;(1,2)]$, period=$2$<br>\n$\\quad \\quad \\sqrt{5}=[2;(4)]$, period=$1$<br>\n$\\quad \\quad \\sqrt{6}=[2;(2,4)]$, period=$2$<br>\n$\\quad \\quad \\sqrt{7}=[2;(1,1,1,4)]$, period=$4$<br>\n$\\quad \\quad \\sqrt{8}=[2;(1,4)]$, period=$2$<br>\n$\\quad \\quad \\sqrt{10}=[3;(6)]$, period=$1$<br>\n$\\quad \\quad \\sqrt{11}=[3;(3,6)]$, period=$2$<br>\n$\\quad \\quad \\sqrt{12}=[3;(2,6)]$, period=$2$<br>\n$\\quad \\quad \\sqrt{13}=[3;(1,1,1,1,6)]$, period=$5$\n</p>\n<p>Exactly four continued fractions, for $N \\le 13$, have an odd period.</p>\n<p>How many continued fractions for $N \\le 10\\,000$ have an odd period?</p>\n\n\n\n\n\n\n", "solution": "# \n# Solution to Project Euler problem 64\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, math\n\n\ndef compute():\n\tans = sum(1 for i in range(1, 10001) if (not eulerlib.is_square(i) and get_sqrt_continued_fraction_period(i) % 2 == 1))\n\treturn str(ans)\n\n\n# Returns the period of the continued fraction of sqrt(n)\ndef get_sqrt_continued_fraction_period(n):\n\tseen = {}\n\tval = QuadraticSurd(0, 1, 1, n)\n\twhile True:\n\t\tseen[val] = len(seen)\n\t\tval = (val - QuadraticSurd(val.floor(), 0, 1, val.d)).reciprocal()\n\t\tif val in seen:\n\t\t\treturn len(seen) - seen[val]\n\n\n\n# Represents (a + b * sqrt(d)) / c. d must not be a perfect square.\nclass QuadraticSurd:\n\t\n\tdef __init__(self, a, b, c, d):\n\t\tif c == 0:\n\t\t\traise ValueError()\n\t\t\n\t\t# Simplify\n\t\tif c < 0:\n\t\t\ta = -a\n\t\t\tb = -b\n\t\t\tc = -c\n\t\tgcd = math.gcd(a, b, c)\n\t\tif gcd != 1:\n\t\t\ta //= gcd\n\t\t\tb //= gcd\n\t\t\tc //= gcd\n\t\t\n\t\tself.a = a\n\t\tself.b = b\n\t\tself.c = c\n\t\tself.d = d\n\t\n\t\n\tdef __sub__(self, other):\n\t\tif self.d != other.d:\n\t\t\traise ValueError()\n\t\treturn QuadraticSurd(\n\t\t\tself.a * other.c - other.a * self.c,\n\t\t\tself.b * other.c - other.b * self.c,\n\t\t\tself.c * other.c,\n\t\t\tself.d)\n\t\n\t\n\tdef reciprocal(self):\n\t\treturn QuadraticSurd(\n\t\t\t-self.a * self.c,\n\t\t\tself.b * self.c,\n\t\t\tself.b * self.b * self.d - self.a * self.a,\n\t\t\tself.d)\n\t\n\t\n\tdef floor(self):\n\t\ttemp = math.isqrt(self.b * self.b * self.d)\n\t\tif self.b < 0:\n\t\t\ttemp = -(temp + 1)\n\t\ttemp += self.a\n\t\tif temp < 0:\n\t\t\ttemp -= self.c - 1\n\t\treturn temp // self.c\n\t\n\t\n\tdef __eq__(self, other):\n\t\treturn self.a == other.a and self.b == other.b \\\n\t\t   and self.c == other.c and self.d == other.d\n\t\n\tdef __ne__(self, other):\n\t\treturn not (self == other)\n\t\n\t\n\tdef __hash__(self):\n\t\treturn hash(self.a) + hash(self.b) + hash(self.c) + hash(self.d)\n\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1322"}
{"number": 35, "problem": "<p>The number, $197$, is called a circular prime because all rotations of the digits: $197$, $971$, and $719$, are themselves prime.</p>\n<p>There are thirteen such primes below $100$: $2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79$, and $97$.</p>\n<p>How many circular primes are there below one million?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 35\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\ndef compute():\n\tisprime = eulerlib.list_primality(999999)\n\tdef is_circular_prime(n):\n\t\ts = str(n)\n\t\treturn all(isprime[int(s[i : ] + s[ : i])] for i in range(len(s)))\n\t\n\tans = sum(1\n\t\tfor i in range(len(isprime))\n\t\tif is_circular_prime(i))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "55"}
{"number": 186, "problem": "<p>Here are the records from a busy telephone system with one million users:</p>\n<div class=\"center\">\n<table class=\"grid\" style=\"margin:0 auto;\"><tr><th>RecNr</th><th width=\"60\" align=\"center\">Caller</th><th width=\"60\" align=\"center\">Called</th></tr>\n<tr><td align=\"center\">$1$</td><td align=\"center\">$200007$</td><td align=\"center\">$100053$</td></tr><tr><td align=\"center\">$2$</td><td align=\"center\">$600183$</td><td align=\"center\">$500439$</td></tr><tr><td align=\"center\">$3$</td><td align=\"center\">$600863$</td><td align=\"center\">$701497$</td></tr><tr><td align=\"center\">$\\cdots$</td><td align=\"center\">$\\cdots$</td><td align=\"center\">$\\cdots$</td></tr></table></div>\n<p>The telephone number of the caller and the called number in record $n$ are $\\operatorname{Caller}(n) = S_{2n-1}$ and $\\operatorname{Called}(n) = S_{2n}$ where $S_{1,2,3,\\dots}$ come from the \"Lagged Fibonacci Generator\":</p>\n\n<p>For $1 \\le k \\le 55$, $S_k = [100003 - 200003k + 300007k^3] \\pmod{1000000}$.<br>\nFor $56 \\le k$, $S_k = [S_{k-24} + S_{k-55}] \\pmod{1000000}$.</p>\n\n<p>If $\\operatorname{Caller}(n) = \\operatorname{Called}(n)$ then the user is assumed to have misdialled and the call fails; otherwise the call is successful.</p>\n\n<p>From the start of the records, we say that any pair of users $X$ and $Y$ are friends if $X$ calls $Y$ or vice-versa. Similarly, $X$ is a friend of a friend of $Z$ if $X$ is a friend of $Y$ and $Y$ is a friend of $Z$; and so on for longer chains.</p>\n\n<p>The Prime Minister's phone number is $524287$. After how many successful calls, not counting misdials, will $99\\%$ of the users (including the PM) be a friend, or a friend of a friend etc., of the Prime Minister?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 186\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tds = DisjointSet(1000000)\n\trand = LfgRandom()\n\tans = 0\n\twhile ds.size(524287) < 990000:\n\t\tcaller = rand.next()\n\t\tcallee = rand.next()\n\t\tif caller != callee:\n\t\t\tds.union(caller, callee)\n\t\t\tans += 1\n\treturn str(ans)\n\n\nclass DisjointSet:\n\t\n\tdef __init__(self, size):\n\t\tself.nodes = [DisjointSet.Node() for _ in range(size)]\n\t\n\tdef _find(self, i):\n\t\treturn self.nodes[i].find()\n\t\n\tdef union(self, i, j):\n\t\tx = self._find(i)\n\t\ty = self._find(j)\n\t\tif x == y:\n\t\t\treturn\n\t\tif x.rank == y.rank:\n\t\t\tx.rank += 1\n\t\telif x.rank < y.rank:\n\t\t\tx, y = y, x\n\t\ty.parent = x\n\t\tx.size += y.size\n\t\ty.size = 0\n\t\n\tdef size(self, i):\n\t\treturn self._find(i).size\n\t\n\t\n\tclass Node:\n\t\tdef __init__(self):\n\t\t\tself.parent = self\n\t\t\tself.rank = 0\n\t\t\tself.size = 1\n\t\t\n\t\tdef find(self):\n\t\t\tif self.parent != self:\n\t\t\t\tself.parent = self.parent.find()  # Path compression\n\t\t\treturn self.parent\n\n\nclass LfgRandom:\n\t\n\tdef __init__(self):\n\t\tself.k = 1\n\t\tself.history = [0] * 55\n\t\tself.index = 0\n\t\n\tdef next(self):\n\t\tk = self.k\n\t\tif k <= 55:\n\t\t\tresult = (100003 - 200003 * k + 300007 * k * k * k) % 1000000\n\t\t\tself.k += 1\n\t\telse:\n\t\t\tresult = (self.history[-24] + self.history[-55]) % 1000000\n\t\tdel self.history[0]\n\t\tself.history.append(result)\n\t\treturn result\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "2325629"}
{"number": 357, "problem": "<p>\nConsider the divisors of $30$: $1,2,3,5,6,10,15,30$.<br>\nIt can be seen that for every divisor $d$ of $30$, $d + 30 / d$ is prime.\n</p>\n<p>\nFind the sum of all positive integers $n$ not exceeding $100\\,000\\,000$<br>such that for every divisor $d$ of $n$, $d + n / d$ is prime.\n</p>\n\n", "solution": "# \n# Solution to Project Euler problem 357\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, math\n\n\n# From the problem statement, we are given the search range of 1 <= n <= 10^8.\n# For a given integer n, we know that every divisor d of n is in the range [1, n].\n# \n# It is beneficial to precompute a table of primes in this application, but what is\n# the maximum value of f(d) = d + n/d for an arbitrary divisor d for 1 <= n <= 10^8?\n# Clearly both d and n/d are in the range [1, n], so an upper bound is 2n.\n# \n# We can do better; in fact the maximum value of f(d) is n + 1, achieved at the endpoints d = {1, n}.\n# The interior values of d yield a smaller value of f(d) because the derivative f'(d) = 1 - n/d^2\n# is negative on the interval (1, sqrt(d)) and positive on the interval (sqrt(d), n). Hence on\n# the domain [1, n], the function f(d) has a minimum at d = sqrt(n) which is 2*sqrt(n).\n# \n# As a sanity check, will 2*sqrt(n) ever be greater than n + 1?\n#   (n - 1)^2 >= 0      (because it's a square) (true for all n in reals)\n#   n^2 - 2n + 1 >= 0   (expand the multiplication)\n#   n^2 + 2n + 1 >= 4n  (add 4n to both sides)\n#   (n + 1)^2 >= 4n     (factor)\n#   n + 1 >= 2*sqrt(n)  (take square root on both sides, valid for n >= 0)\n# Therefore for n >= 1, it is true that for all d in [1, n], we have f(d) <= n + 1.\n# \n# Thus we go ahead and precompute a table of primeness for the domain [1, 10^8 + 1],\n# and it will be valid for f(d) = d + n/d for any n and d in the appropriate ranges.\n# \n# Now we discuss how to test whether an integer n is \"prime-generating\" or not.\n# Every integer n trivially has 1 as a factor. As an optimization, we test whether\n# f(1) = 1 + n/1 = 1 + n is prime or not. If it isn't prime then we skip this n.\n# If it is prime, then we only need to examine all of n's factors in the range (1, sqrt(n)].\n# This is because every factor in the remaining upper range of (sqrt(n), n] can be computed by\n# n/d for values of d in the lower range [1, sqrt(n)]. But in this problem, we don't even\n# need to look at these complementary upper factors because f(d) has the same value as f(n/d).\ndef compute():\n\tLIMIT = 10**8\n\t\n\tisprime = eulerlib.list_primality(LIMIT + 1)\n\t\n\tdef is_prime_generating(n):\n\t\treturn all(\n\t\t\t(n % d != 0 or isprime[d + n // d])\n\t\t\tfor d in range(2, math.isqrt(n) + 1))\n\t\n\tans = sum(n for n in range(LIMIT + 1)\n\t\tif isprime[n + 1] and is_prime_generating(n))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1739023853137"}
{"number": 97, "problem": "<p>The first known prime found to exceed one million digits was discovered in 1999, and is a Mersenne prime of the form $2^{6972593} - 1$; it contains exactly $2\\,098\\,960$ digits. Subsequently other Mersenne primes, of the form $2^p - 1$, have been found which contain more digits.</p>\n<p>However, in 2004 there was found a massive non-Mersenne prime which contains $2\\,357\\,207$ digits: $28433 \\times 2^{7830457} + 1$.</p>\n<p>Find the last ten digits of this prime number.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 97\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tMOD = 10**10\n\tans = (28433 * pow(2, 7830457, MOD) + 1) % MOD\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "8739992577"}
{"number": 1, "problem": "<p>If we list all the natural numbers below $10$ that are multiples of $3$ or $5$, we get $3, 5, 6$ and $9$. The sum of these multiples is $23$.</p>\n<p>Find the sum of all the multiples of $3$ or $5$ below $1000$.</p>\n", "solution": "# \n# Solution to Project Euler problem 1\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# Computers are fast, so we can implement this solution directly without any clever math.\ndef compute():\n\tans = sum(x for x in range(1000) if (x % 3 == 0 or x % 5 == 0))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "233168"}
{"number": 50, "problem": "<p>The prime $41$, can be written as the sum of six consecutive primes:</p>\n$$41 = 2 + 3 + 5 + 7 + 11 + 13.$$\n<p>This is the longest sum of consecutive primes that adds to a prime below one-hundred.</p>\n<p>The longest sum of consecutive primes below one-thousand that adds to a prime, contains $21$ terms, and is equal to $953$.</p>\n<p>Which prime, below one-million, can be written as the sum of the most consecutive primes?</p>\n", "solution": "# \n# Solution to Project Euler problem 50\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\ndef compute():\n\tans = 0\n\tisprime = eulerlib.list_primality(999999)\n\tprimes = eulerlib.list_primes(999999)\n\tconsecutive = 0\n\tfor i in range(len(primes)):\n\t\tsum = primes[i]\n\t\tconsec = 1\n\t\tfor j in range(i + 1, len(primes)):\n\t\t\tsum += primes[j]\n\t\t\tconsec += 1\n\t\t\tif sum >= len(isprime):\n\t\t\t\tbreak\n\t\t\tif isprime[sum] and consec > consecutive:\n\t\t\t\tans = sum\n\t\t\t\tconsecutive = consec\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "997651"}
{"number": 203, "problem": "<p>The binomial coefficients $\\displaystyle \\binom n k$ can be arranged in triangular form, Pascal's triangle, like this:</p>\n\n<div class=\"center\">\n<table align=\"center\"><tr><td colspan=\"7\"></td><td>1</td><td colspan=\"7\"></td></tr><tr><td colspan=\"6\"></td><td>1</td><td></td><td>1</td><td colspan=\"6\"></td></tr><tr><td colspan=\"5\"></td><td>1</td><td></td><td>2</td><td></td><td>1</td><td colspan=\"5\"></td></tr><tr><td colspan=\"4\"></td><td>1</td><td></td><td>3</td><td></td><td>3</td><td></td><td>1</td><td colspan=\"4\"></td></tr><tr><td colspan=\"3\"></td><td>1</td><td></td><td>4</td><td></td><td>6</td><td></td><td>4</td><td></td><td>1</td><td colspan=\"3\"></td></tr><tr><td colspan=\"2\"></td><td>1</td><td></td><td>5</td><td></td><td>10</td><td></td><td>10</td><td></td><td>5</td><td></td><td>1</td><td colspan=\"2\"></td></tr><tr><td colspan=\"1\"></td><td>1</td><td></td><td>6</td><td></td><td>15</td><td></td><td>20</td><td></td><td>15</td><td></td><td>6</td><td></td><td>1</td><td colspan=\"1\"></td></tr><tr><td>1</td><td></td><td>7</td><td></td><td>21</td><td></td><td>35</td><td></td><td>35</td><td></td><td>21</td><td></td><td>7</td><td></td><td>1</td></tr></table>\n.........\n</div>\n\n<p>It can be seen that the first eight rows of Pascal's triangle contain twelve distinct numbers: 1,\u00a02,\u00a03,\u00a04,\u00a05,\u00a06,\u00a07,\u00a010,\u00a015,\u00a020,\u00a021\u00a0and\u00a035.</p>\n\n<p>A positive integer <var>n</var> is called squarefree if no square of a prime divides <var>n</var>.\nOf the twelve distinct numbers in the first eight rows of Pascal's triangle, all except 4 and 20 are squarefree.\nThe sum of the distinct squarefree numbers in the first eight rows is 105.</p>\n\n<p>Find the sum of the distinct squarefree numbers in the first 51 rows of Pascal's triangle.</p>\n", "solution": "# \n# Solution to Project Euler problem 203\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, math\n\n\ndef compute():\n\t# Collect unique numbers in Pascal's triangle\n\tnumbers = set(math.comb(n, k) for n in range(51) for k in range(n + 1))\n\tmaximum = max(numbers)\n\t\n\t# Prepare list of squared primes\n\tprimes = eulerlib.list_primes(math.isqrt(maximum))\n\tprimessquared = [p * p for p in primes]\n\t\n\tdef is_squarefree(n):\n\t\tfor p2 in primessquared:\n\t\t\tif p2 > n:\n\t\t\t\tbreak\n\t\t\tif n % p2 == 0:\n\t\t\t\treturn False\n\t\treturn True\n\t\n\t# Sum up the squarefree numbers\n\tans = sum(n for n in numbers if is_squarefree(n))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "34029210557338"}
{"number": 70, "problem": "<p>Euler's totient function, $\\phi(n)$ [sometimes called the phi function], is used to determine the number of positive numbers less than or equal to $n$ which are relatively prime to $n$. For example, as $1, 2, 4, 5, 7$, and $8$, are all less than nine and relatively prime to nine, $\\phi(9)=6$.<br>The number $1$ is considered to be relatively prime to every positive number, so $\\phi(1)=1$. </p>\n<p>Interestingly, $\\phi(87109)=79180$, and it can be seen that $87109$ is a permutation of $79180$.</p>\n<p>Find the value of $n$, $1 \\lt n \\lt 10^7$, for which $\\phi(n)$ is a permutation of $n$ and the ratio $n/\\phi(n)$ produces a minimum.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 70\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\ndef compute():\n\ttotients = eulerlib.list_totients(10**7 - 1)\n\tminnumer = 1\n\tmindenom = 0\n\tfor (i, tot) in enumerate(totients[2 : ], 2):\n\t\tif i * mindenom < minnumer * tot and sorted(str(i)) == sorted(str(tot)):\n\t\t\tminnumer = i\n\t\t\tmindenom = totients[i]\n\treturn str(minnumer)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "8319823"}
{"number": 130, "problem": "<p>A number consisting entirely of ones is called a repunit. We shall define $R(k)$ to be a repunit of length $k$; for example, $R(6) = 111111$.</p>\n<p>Given that $n$ is a positive integer and $\\gcd(n, 10) = 1$, it can be shown that there always exists a value, $k$, for which $R(k)$ is divisible by $n$, and let $A(n)$ be the least such value of $k$; for example, $A(7) = 6$ and $A(41) = 5$.</p>\n<p>You are given that for all primes, $p \\gt 5$, that $p - 1$ is divisible by $A(p)$. For example, when $p = 41$, $A(41) = 5$, and $40$ is divisible by $5$.</p>\n<p>However, there are rare composite values for which this is also true; the first five examples being $91$, $259$, $451$, $481$, and $703$.</p>\n<p>Find the sum of the first twenty-five composite values of $n$ for which $\\gcd(n, 10) = 1$ and $n - 1$ is divisible by $A(n)$.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 130\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, itertools\n\n\ndef compute():\n\tcond = lambda i: (i % 5 != 0) and (not eulerlib.is_prime(i)) \\\n\t\tand ((i - 1) % find_least_divisible_repunit(i) == 0)\n\tans = sum(itertools.islice(filter(cond, itertools.count(7, 2)), 25))\n\treturn str(ans)\n\n\n# Returns the smallest k such that R(k) is divisible by n.\ndef find_least_divisible_repunit(n):\n\tif n % 2 == 0 or n % 5 == 0:\n\t\treturn 0\n\tsum = 1  # Equal to R(k) mod n\n\tpow = 1  # Equal to 10^k mod n\n\tk = 1\n\twhile sum % n != 0:\n\t\tk += 1\n\t\tpow = pow * 10 % n\n\t\tsum = (sum + pow) % n\n\treturn k\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "149253"}
{"number": 21, "problem": "<p>Let $d(n)$ be defined as the sum of proper divisors of $n$ (numbers less than $n$ which divide evenly into $n$).<br>\nIf $d(a) = b$ and $d(b) = a$, where $a \\ne b$, then $a$ and $b$ are an amicable pair and each of $a$ and $b$ are called amicable numbers.</p>\n<p>For example, the proper divisors of $220$ are $1, 2, 4, 5, 10, 11, 20, 22, 44, 55$ and $110$; therefore $d(220) = 284$. The proper divisors of $284$ are $1, 2, 4, 71$ and $142$; so $d(284) = 220$.</p>\n<p>Evaluate the sum of all the amicable numbers under $10000$.</p>\n", "solution": "# \n# Solution to Project Euler problem 21\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# We first compute a table of sum-of-proper-divisors, then we use it to test which numbers are amicable.\n# This approach differs from the Java implementation because trying to directly compute\n# the proper-divisor-sum of each number by brute force is unacceptably slow in Python.\ndef compute():\n\t# Compute sum of proper divisors for each number\n\tdivisorsum = [0] * 10000\n\tfor i in range(1, len(divisorsum)):\n\t\tfor j in range(i * 2, len(divisorsum), i):\n\t\t\tdivisorsum[j] += i\n\t\n\t# Find all amicable pairs within range\n\tans = 0\n\tfor i in range(1, len(divisorsum)):\n\t\tj = divisorsum[i]\n\t\tif j != i and j < len(divisorsum) and divisorsum[j] == i:\n\t\t\tans += i\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "31626"}
{"number": 155, "problem": "<p>An electric circuit uses exclusively identical capacitors of the same value $C$.\n<br>\nThe capacitors can be connected in series or in parallel to form sub-units, which can then be connected in series or in parallel with other capacitors or other sub-units to form larger sub-units, and so on up to a final circuit.</p>\n<p>Using this simple procedure and up to $n$ identical capacitors, we can make circuits having a range of different total capacitances. For example, using up to $n=3$ capacitors of $\\pu{60 \\mu F}$ each, we can obtain the following $7$ distinct total capacitance values: </p>\n<div class=\"center\"><img src=\"resources/images/0155_capacitors1.gif?1678992055\" class=\"dark_img\" alt=\"\"></div>\n<p>If we denote by $D(n)$ the number of distinct total capacitance values we can obtain when using up to $n$ equal-valued capacitors and the simple procedure described above, we have: $D(1)=1$, $D(2)=3$, $D(3)=7$, $\\dots$</p>\n<p>Find $D(18)$.</p>\n<p><i>Reminder:</i> When connecting capacitors $C_1, C_2$ etc in parallel, the total capacitance is $C_T = C_1 + C_2 + \\cdots$,\n<br>\nwhereas when connecting them in series, the overall capacitance is given by: $\\dfrac{1}{C_T} = \\dfrac{1}{C_1} + \\dfrac{1}{C_2} + \\cdots$</p>\n\n", "solution": "# \n# Solution to Project Euler problem 155\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\n# Warning: Running this solution requires about 1 GiB of memory\ndef compute():\n\tSIZE = 18\n\t# possible[i] holds all the possible capacitance values of a series/parallel\n\t# capacitor network that uses exactly i capacitors of 60 uF each\n\tpossible = []\n\tall = set()  # Union of every possible[i]\n\t# Note: Each fraction is represented as a pair (num, den), where den > 0 and gcd(num, den) = 1.\n\t# This approach is much faster than using the fractions.Fraction class.\n\tpossible.append(set())\n\tpossible.append({(60, 1)})\n\tall.update(possible[1])\n\tfor i in range(2, SIZE + 1):\n\t\tposs = set()\n\t\tfor j in range(1, i // 2 + 1):\n\t\t\tfor (n0, d0) in possible[j]:\n\t\t\t\tfor (n1, d1) in possible[i - j]:\n\t\t\t\t\tpseudosum = n0 * d1 + n1 * d0\n\t\t\t\t\tnumerprod = n0 * n1\n\t\t\t\t\tdenomprod = d0 * d1\n\t\t\t\t\tnpgcd = math.gcd(pseudosum, numerprod)\n\t\t\t\t\tdpgcd = math.gcd(pseudosum, denomprod)\n\t\t\t\t\tposs.add((pseudosum // dpgcd, denomprod // dpgcd))  # Parallel\n\t\t\t\t\tposs.add((numerprod // npgcd, pseudosum // npgcd))  # Series\n\t\tpossible.append(poss)\n\t\tall.update(poss)\n\treturn str(len(all))\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "3857447"}
{"number": 15, "problem": "<p>Starting in the top left corner of a $2 \\times 2$ grid, and only being able to move to the right and down, there are exactly $6$ routes to the bottom right corner.</p>\n<div class=\"center\">\n<img src=\"resources/images/0015.png?1678992052\" class=\"dark_img\" alt=\"\"></div>\n<p>How many such routes are there through a $20 \\times 20$ grid?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 15\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\n# This is a classic combinatorics problem. To get from the top left corner to the bottom right corner of an N*N grid,\n# it involves making exactly N moves right and N moves down in some order. Because each individual down or right move\n# is indistinguishable, there are exactly 2N choose N (binomial coefficient) ways of arranging these moves.\ndef compute():\n\treturn str(math.comb(40, 20))\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "137846528820"}
{"number": 104, "problem": "<p>The Fibonacci sequence is defined by the recurrence relation:</p>\n<blockquote>$F_n = F_{n - 1} + F_{n - 2}$, where $F_1 = 1$ and $F_2 = 1$.</blockquote>\n<p>It turns out that $F_{541}$, which contains $113$ digits, is the first Fibonacci number for which the last nine digits are $1$-$9$ pandigital (contain all the digits $1$ to $9$, but not necessarily in order). And $F_{2749}$, which contains $575$ digits, is the first Fibonacci number for which the first nine digits are $1$-$9$ pandigital.</p>\n<p>Given that $F_k$ is the first Fibonacci number for which the first nine digits AND the last nine digits are $1$-$9$ pandigital, find $k$.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 104\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\ndef compute():\n\tMOD = 10**9\n\ta = 0\n\tb = 1\n\tfor i in itertools.count():\n\t\t# Loop invariants: a == fib(i) % MOD, b == fib(i+1) % MOD\n\t\tif \"\".join(sorted(str(a))) == \"123456789\":  # If suffix is pandigital\n\t\t\tf = fibonacci(i)[0]\n\t\t\tif \"\".join(sorted(str(f)[ : 9])) == \"123456789\":  # If prefix is pandigital\n\t\t\t\treturn str(i)\n\t\ta, b = b, (a + b) % MOD\n\treturn str(ans)\n\n\n# Returns the tuple (F(n), F(n+1)), computed by the fast doubling method.\ndef fibonacci(n):\n    if n == 0:\n        return (0, 1)\n    else:\n        a, b = fibonacci(n // 2)\n        c = a * (b * 2 - a)\n        d = a * a + b * b\n        if n % 2 == 0:\n            return (c, d)\n        else:\n            return (d, c + d)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "329468"}
{"number": 44, "problem": "<p>Pentagonal numbers are generated by the formula, $P_n=n(3n-1)/2$. The first ten pentagonal numbers are:\n$$1, 5, 12, 22, 35, 51, 70, 92, 117, 145, \\dots$$</p>\n<p>It can be seen that $P_4 + P_7 = 22 + 70 = 92 = P_8$. However, their difference, $70 - 22 = 48$, is not pentagonal.</p>\n<p>Find the pair of pentagonal numbers, $P_j$ and $P_k$, for which their sum and difference are pentagonal and $D = |P_k - P_j|$ is minimised; what is the value of $D$?</p>\n", "solution": "# \n# Solution to Project Euler problem 44\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\ndef compute():\n\tpentanum = PentagonalNumberHelper()\n\tmin_d = None  # None means not found yet, positive number means found a candidate\n\t# For each upper pentagonal number index, going upward\n\tfor i in itertools.count(2):\n\t\tpent_i = pentanum.term(i)\n\t\t# If the next number down is at least as big as a found difference, then conclude searching\n\t\tif min_d is not None and pent_i - pentanum.term(i - 1) >= min_d:\n\t\t\tbreak\n\t\t\n\t\t# For each lower pentagonal number index, going downward\n\t\tfor j in range(i - 1, 0, -1):\n\t\t\tpent_j = pentanum.term(j)\n\t\t\tdiff = pent_i - pent_j\n\t\t\t# If the difference is at least as big as a found difference, then stop testing lower pentagonal numbers\n\t\t\tif min_d is not None and diff >= min_d:\n\t\t\t\tbreak\n\t\t\telif pentanum.is_term(pent_i + pent_j) and pentanum.is_term(diff):\n\t\t\t\tmin_d = diff  # Found a smaller difference\n\treturn str(min_d)\n\n\n# Provides memoization for generating and testing pentagonal numbers.\nclass PentagonalNumberHelper:\n\tdef __init__(self):\n\t\tself.term_list = [0]\n\t\tself.term_set = set()\n\t\n\tdef term(self, x):\n\t\tassert x > 0\n\t\twhile len(self.term_list) <= x:\n\t\t\tn = len(self.term_list)\n\t\t\tterm = (n * (n * 3 - 1)) >> 1\n\t\t\tself.term_list.append(term)\n\t\t\tself.term_set.add(term)\n\t\treturn self.term_list[x]\n\t\n\tdef is_term(self, y):\n\t\tassert y > 0\n\t\twhile self.term_list[-1] < y:\n\t\t\tn = len(self.term_list)\n\t\t\tterm = (n * (n * 3 - 1)) >> 1\n\t\t\tself.term_list.append(term)\n\t\t\tself.term_set.add(term)\n\t\treturn y in self.term_set\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "5482660"}
{"number": 429, "problem": "<p>\nA unitary divisor $d$ of a number $n$ is a divisor of $n$ that has the property $\\gcd(d, n/d) = 1$.<br>\nThe unitary divisors of $4! = 24$ are $1, 3, 8$ and $24$.<br>\nThe sum of their squares is $1^2 + 3^2 + 8^2 + 24^2 = 650$.\n</p>\n<p>\nLet $S(n)$ represent the sum of the squares of the unitary divisors of $n$. Thus $S(4!)=650$.\n</p>\n<p>\nFind $S(100\\,000\\,000!)$ modulo $1\\,000\\,000\\,009$.\n</p>\n", "solution": "# \n# Solution to Project Euler problem 429\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\n# Let n be an arbitrary positive integer. Suppose n is factorized as p1^k1 * p2^k2 * ... * {p_m}^{k_m},\n# where the p's are prime and distinct (thus the k's are as large as possible).\n# Let {p1^k1, p2^k2, ..., {p_m}^{k_m}} be the set of \"maximal prime powers\".\n# Then all the unitary divisors of n are exactly all the subsets of maximal prime powers,\n# where each subset is viewed as a product of its elements.\n# \n# For n!, its prime factorization uses and only uses all prime numbers from 1 to n (inclusive).\n# For each prime p, the number n! has exactly floor(n/p) + floor(n/p^2) + floor(n/p^3) + ... factors of p.\n# Thus we can calculate the p's and k's quite easily.\n# \n# To solve the remaining parts of the problem, we use dynamic programming.\n# Suppose we have found all the unitary divisors that are products of maximal prime powers less than {p_i}^{k_i},\n# and suppose this set is {a, b, c}. Then when we include {p_i}^{k_i} into consideration, we double the size of the set\n# because now {a * {p_i}^{k_i}, b * {p_i}^{k_i}, c * {p_i}^{k_i}} are also unitary divisors.\ndef compute():\n\tLIMIT = 10**8\n\tMOD = 1000000009\n\tans = 1\n\tfor p in eulerlib.prime_generator(LIMIT):\n\t\tpower = count_factors(LIMIT, p)\n\t\tans *= 1 + pow(p, power * 2, MOD)\n\t\tans %= MOD\n\treturn str(ans)\n\n\n# Returns the number of factors of p (prime) in factorial(n).\ndef count_factors(n, p):\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn n // p + count_factors(n // p, p)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "98792821"}
{"number": 114, "problem": "<p>A row measuring seven units in length has red blocks with a minimum length of three units placed on it, such that any two red blocks (which are allowed to be different lengths) are separated by at least one grey square. There are exactly seventeen ways of doing this.</p>\n\n<div class=\"center\">\n<img src=\"resources/images/0114.png?1678992052\" alt=\"0114.png\">\n</div>\n\n<p>How many ways can a row measuring fifty units in length be filled?</p>\n<p class=\"note\">NOTE: Although the example above does not lend itself to the possibility, in general it is permitted to mix block sizes. For example, on a row measuring eight units in length you could use red (3), grey (1), and red (4).</p>\n", "solution": "# \n# Solution to Project Euler problem 114\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n\t\n# How many ways can a row n units long be filled? Denote this quantity as ways[n].\n# Compute n = 0, 1, 2 manually as base cases.\n# \n# Now assume n >= 3. Look at the leftmost item and sum up the possibilities.\n# - If the item is a grey square, then the rest of the row is allowed\n#   to be anything of length n-1. Add ways[n-1].\n# - If the item is a red block with length k where k >= 3, then:\n#   - If k = n, then the whole row is filled by this red block. Add 1.\n#   - Otherwise k < n, this red block is followed by a grey square, then followed\n#     by anything of length n-k-1. So add ways[n-4] + ways[n-5] + ... + ways[0].\ndef compute():\n\t# Dynamic programming\n\tLENGTH = 50\n\tways = [0] * (LENGTH + 1)\n\tfor n in range(len(ways)):\n\t\tif n < 3:\n\t\t\tways[n] = 1\n\t\telse:\n\t\t\tways[n] = ways[n - 1] + sum(ways[ : n - 3]) + 1\n\treturn str(ways[-1])\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "16475640049"}
{"number": 5, "problem": "<p>$2520$ is the smallest number that can be divided by each of the numbers from $1$ to $10$ without any remainder.</p>\n<p>What is the smallest positive number that is <strong class=\"tooltip\">evenly divisible<span class=\"tooltiptext\">divisible with no remainder</span></strong> by all of the numbers from $1$ to $20$?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 5\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\ndef compute():\n\tans = math.lcm(*range(1, 21))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "232792560"}
{"number": 145, "problem": "<p>Some positive integers $n$ have the property that the sum $[n + \\operatorname{reverse}(n)]$ consists entirely of odd (decimal) digits. For instance, $36 + 63 = 99$ and $409 + 904 = 1313$. We will call such numbers <dfn>reversible</dfn>; so $36$, $63$, $409$, and $904$ are reversible. Leading zeroes are not allowed in either $n$ or $\\operatorname{reverse}(n)$.</p>\n\n<p>There are $120$ reversible numbers below one-thousand.</p>\n\n<p>How many reversible numbers are there below one-billion ($10^9$)?</p>\n", "solution": "# \n# Solution to Project Euler problem 145\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# First we define an n-digit number as a number beginning with the digit 1 to 9 (i.e. not 0) and having (n-1)\n# of any digit thereafter. For example, 10652 is a 5-digit number, but 08913 = 8913 is a 4-digit number.\n# \n# Lucky for us, the problem bound of 10^9 means that we examine all 1-to-9-digit numbers and not need\n# to exclude some subrange. Note that we need to exclude all numbers ending in 0, so that the\n# reversed number does not have leading zeros.\n# \n# Consider different cases for the number of digits n (from 1 to 9, but the arguments apply generally):\n# - n = 1:\n#   Clearly there are no solutions because the last digit is always even.\n# \n# - n = 0 mod 2:\n#   We begin by proving that when a number is \"reversible\", the process of adding\n#   the number to the reverse of itself will involve no carries in the arithmetic.\n#   Normally a rigorous proof would require the use of mathematical induction,\n#   but instead we will do illustratively with the specific case of n = 6.\n#   A 6-digit number looks like abcdef, where each of 0 <= {a,b,c,d,e,f} <= 9, except a != 0.\n#   When we add the number to its reverse, we get a structure like this:\n#       abcdef\n#     + fedcba\n#     --------\n#      tuvwxyz\n#   For the number to be considered reversible, every digit in\n#   the sum tuvwxyz needs to be odd, i.e. in the set {1,3,5,7,9}.\n#   \n#   First look at the middle two columns. If the 4th column d + c = x generates a carry-out, then\n#   the 3rd column c + d + 1 = w receives a carry-in. But this would in turn require the 4th column to\n#   have a carry-in, because otherwise x and w would have opposite evenness/oddness. Conversely if the\n#   4th column has no carry-out, then the 3rd column has no carry-in and also must have no carry-out.\n#     We can extend this argument outward from the middle. If the 5th column has a carry-out, then by\n#   the above argument it would cause the 4th and 3rd columns to have a carry-out, which implies\n#   the 2nd column has a carry-in, which would require the 5th column to have a carry-in.\n#     But once we get to the rightmost column, we know by definition that it has no carry-in.\n#   Hence the leftmost column has no carry-in, which implies the 2nd column has no carry-out.\n#     Therefore the whole sum has no carries at all. This lemma is good news because\n#   it means we can treat each column separately without worrying about their interactions.\n#   \n#   Let's look at the first column with a + f = u (with u < 10 because there is no carry-out). When we\n#   choose a digit value for 'a', there is a set of values we can choose for 'f' so that their sum is odd.\n#   'a' cannot be 0. When 'a' is 1, 'f' can be {2, 4, 6, 8} (not 0) and not produce a carry. When 'a' is 2,\n#   'f' can be {1, 3, 5, 7} (not 9) and not produce a carry. We can list all the possibilities for (a, f):\n#     (1,2), (1,4), (1,6), (1,8),\n#     (2,1), (2,3), (2,5), (2,7),\n#     (3,2), (3,4), (3,6),\n#     (4,1), (4,3), (4,5),\n#     (5,2), (5,4),\n#     (6,1), (6,3),\n#     (7,2),\n#     (8,1).\n#   We see above that there are 20 choices for (a,f). For the middle digits\n#   (not first or last digit), we can use 0 so there are 30 choices:\n#     (0,1), (0,3), (0,5), (0,7), (0,9),\n#     (1,0), (1,2), (1,4), (1,6), (1,8),\n#     (2,1), (2,3), (2,5), (2,7),\n#     (3,0), (3,2), (3,4), (3,6),\n#     (4,1), (4,3), (4,5),\n#     (5,0), (5,2), (5,4),\n#     (6,1), (6,3),\n#     (7,0), (7,2),\n#     (8,1),\n#     (9,0).\n#   Therefore by combinatorics, there are 20 * 30^(n/2 - 1) reversible n-digit numbers when n is even.\n#   \n# - n = 1 mod 2:\n#   Let's illustrate what happens with a 7-digit number abcdefg:\n#     0101010\n#     abcdefg\n#   + gfedcba\n#   ---------\n#    stuvwxyz\n#   The middle column d + d = w will be even unless it has a carry-in from its right neighbor, so this\n#   carry is required. Hence the 4th column has a carry-in, which means the 5th column has a carry-out.\n#   By symmetry since 5th column carries out, then the 3rd column c + e = v must carry out as well.\n#   (This is true even in the worst case if 5th column has a carry-in but the 3rd column has no carry-in,\n#   because the sum must be odd and at least 11 so even if it drops to 10 there will still be a carry-out.)\n#   Because the 2nd column receives a carry-in, the 6th column must receive a carry-in to maintain parity.\n#     What this shows is that when the number of digits is odd, the middle column must have a carry-in,\n#   and columns that are an even distance away from it must have a carry-in. This means it is impossible\n#   to have a reversible number of length n = 1 mod 4, because that would force the rightmost column\n#   to have a carry-in, which is impossible by definition. Thus we require n = 3 mod 4.\n#     Let's analyze a bit further. The rightmost (7th) column has no carry-in by definition.\n#   So the leftmost (1st) column must have no carry-in to ensure that both t and z are odd.\n#   Then the 2nd column must have no carry-out, which implies the 6th column has no carry-out.\n#   This is why we get the alternating pattern of carries in the adding process.\n#   \n#   The rest of the work is to enumerate the possibilities for each type of digit(s) in the number:\n#   - Pairs of digits which take no carry and must generate a carry (20 choices):\n#     (9,8), (9,6), (9,4), (9,2),\n#     (8,9), (8,7), (8,5), (8,3),\n#     (7,8), (7,6), (7,4),\n#     (6,9), (6,7), (6,5),\n#     (5,8), (5,6),\n#     (4,9), (4,7),\n#     (3,8),\n#     (2,9).\n#     Note that the first and last digits fall into this category, and there are no 0s at all.\n#   - Non-middle pairs of digits which take a carry and generate no carry (25 choices):\n#     (0,0), (0,2), (0,4), (0,6), (0,8),\n#     (1,1), (1,3), (1,5), (1,7),\n#     (2,0), (2,2), (2,4), (2,6),\n#     (3,1), (3,3), (3,5),\n#     (4,0), (4,2), (4,4),\n#     (5,1), (5,3),\n#     (6,0), (6,2),\n#     (7,1),\n#     (8,0).\n#   - Middle single digit, which takes a carry and generates no carry (5 choices): 0, 1, 2, 3, 4.\n#   All in all, there are 5 * 20^((n + 1)/4) * 25^((n - 3)/4) = 100 * 500^((n - 3)/4)\n#   reversible n-digit numbers when n = 3 mod 4.\ndef compute():\n\tdef count_reversibles(numdigits):\n\t\tif numdigits % 2 == 0:\n\t\t\treturn 20 * 30**(numdigits // 2 - 1)\n\t\telif numdigits % 4 == 3:\n\t\t\treturn 100 * 500**((numdigits - 3) // 4)\n\t\telif numdigits % 4 == 1:\n\t\t\treturn 0\n\t\telse:\n\t\t\traise AssertionError()\n\t\n\tans = sum(count_reversibles(d) for d in range(2, 10))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "608720"}
{"number": 171, "problem": "<p>For a positive integer $n$, let $f(n)$ be the sum of the squares of the digits (in base $10$) of $n$, e.g.</p>\n\\begin{align}\nf(3) &amp;= 3^2 = 9,\\\\\nf(25) &amp;= 2^2 + 5^2 = 4 + 25 = 29,\\\\\nf(442) &amp;= 4^2 + 4^2 + 2^2 = 16 + 16 + 4 = 36\\\\\n\\end{align}\n<p>Find the last nine digits of the sum of all $n$, $0 \\lt n \\lt 10^{20}$, such that $f(n)$ is a perfect square.</p>\n", "solution": "# \n# Solution to Project Euler problem 171\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools, math\n\n\n# The key insight is to use dynamic programming to build up the answer one digit at a time.\n# \n# Let Num(n, s) denote the set of numbers of length n (with leading zeros) whose squared digits sum to s.\n# For example, Num(2, 25) = {05, 34, 43, 50}.\n# Then for any particular n and s, we know that Num(n, s) = union of\n#   (prepend 0 to each of Num(n-1, s - 0*0)),\n#   (prepend 1 to each of Num(n-1, s - 1*1)),\n#   ...,\n#   (prepend 9 to each of Num(n-1, s - 9*9)).\n# \n# However, keeping track of these sets of numbers explicitly is just as slow as iterating over\n# all the numbers by brute force. So instead, we only store the sums and counts of these sets,\n# and these two pieces of information are enough to determine the final answer.\n# (Furthermore, these can be reduced by the modulus.)\ndef compute():\n\tLENGTH = 20\n\tBASE = 10\n\tMODULUS = 10**9\n\t\n\t# Maximum possible squared digit sum (for 99...99)\n\tMAX_SQR_DIGIT_SUM = (BASE - 1)**2 * LENGTH\n\t\n\t# sqsum[n][s] is the sum of all length-n numbers with a square digit sum of s, modulo MODULUS\n\t# count[n][s] is the count of all length-n numbers with a square digit sum of s, modulo MODULUS\n\tsqsum = []\n\tcount = []\n\t\n\tfor i in range(LENGTH + 1):\n\t\tsqsum.append([0] * (MAX_SQR_DIGIT_SUM + 1))\n\t\tcount.append([0] * (MAX_SQR_DIGIT_SUM + 1))\n\t\tif i == 0:\n\t\t\tcount[0][0] = 1\n\t\telse:\n\t\t\tfor j in range(BASE):\n\t\t\t\tfor k in itertools.count():\n\t\t\t\t\tindex = k + j**2\n\t\t\t\t\tif index > MAX_SQR_DIGIT_SUM:\n\t\t\t\t\t\tbreak\n\t\t\t\t\tsqsum[i][index] = (sqsum[i][index] + sqsum[i - 1][k] + pow(BASE, i - 1, MODULUS) * j * count[i - 1][k]) % MODULUS\n\t\t\t\t\tcount[i][index] = (count[i][index] + count[i - 1][k]) % MODULUS\n\t\n\tans = sum(sqsum[LENGTH][i**2] for i in range(1, math.isqrt(MAX_SQR_DIGIT_SUM)))\n\treturn f\"{ans%MODULUS:09}\"\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "142989277"}
{"number": 31, "problem": "<p>In the United Kingdom the currency is made up of pound (\u00a3) and pence (p). There are eight coins in general circulation:</p>\n<blockquote>1p, 2p, 5p, 10p, 20p, 50p, \u00a31 (100p), and \u00a32 (200p).</blockquote>\n<p>It is possible to make \u00a32 in the following way:</p>\n<blockquote>1\u00d7\u00a31 + 1\u00d750p + 2\u00d720p + 1\u00d75p + 1\u00d72p + 3\u00d71p</blockquote>\n<p>How many different ways can \u00a32 be made using any number of coins?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 31\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# We use the standard dynamic programming algorithm to solve the subset sum problem over integers.\n# The order of the coin values does not matter, but the values need to be unique.\ndef compute():\n\tTOTAL = 200\n\t\n\t# At the start of each loop iteration, ways[i] is the number of ways to use {any copies\n\t# of the all the coin values seen before this iteration} to form an unordered sum of i\n\tways = [1] + [0] * TOTAL\n\tfor coin in [1, 2, 5, 10, 20, 50, 100, 200]:\n\t\tfor i in range(len(ways) - coin):\n\t\t\tways[i + coin] += ways[i]\n\treturn str(ways[-1])\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "73682"}
{"number": 120, "problem": "<p>Let $r$ be the remainder when $(a - 1)^n + (a + 1)^n$ is divided by $a^2$.</p>\n<p>For example, if $a = 7$ and $n = 3$, then $r = 42$: $6^3 + 8^3 = 728 \\equiv 42 \\mod 49$. And as $n$ varies, so too will $r$, but for $a = 7$ it turns out that $r_{\\mathrm{max}} = 42$.</p>\n<p>For $3 \\le a \\le 1000$, find $\\sum r_{\\mathrm{max}}$.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 120\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# For a given a, what is the n that maximizes the remainder, and what is the value of this remainder?\n# \n# Let's simplify one term, mod a^2:\n#   (a+1)^n = 1^n + (n choose 1) a 1^(n-1) + (n choose 2) a^2 1^(n-2) + ...  (by the binomial theorem)\n#           = 1 + an + 0.  (remaining addends are 0 because they have a to the power of 2 or more, mod a^2)\n# Similarly for the other term, mod a^2:\n#   (a-1)^n = (-1)^n + (n choose 1) a (-1)^(n-1) + ...\n#           = (-1)^(n-1) (-1 + an + 0)\n#           = if n is even then (1 - an) else (an - 1).\n# Therefore, adding the two terms:\n#   (a+1)^n + (a-1)^n\n#   = if n is even then 2 else 2an.\n# \n# We can always make 2an >= 2 by taking n=1, for example. So we can disregard the \"n is even\" case.\n# Maximizing 2an mod a^2 for n is the same as maximizing 2n mod a for n.\n#   If a is even,  then the maximum achievable value is a - 2 by setting n = a/2 - 1.\n#   Else a is odd, then the maximum achievable value is a - 1 by setting n = (a - 1) / 2.\n# \n# In conclusion, if a is even, the maximum remainder is a(a-2);\n# otherwise a is odd, the maximum remainder is a(a-1).\ndef compute():\n\tans = sum(i * (i - (2 if i % 2 == 0 else 1)) for i in range(3, 1001))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "333082500"}
{"number": 60, "problem": "<p>The primes $3$, $7$, $109$, and $673$, are quite remarkable. By taking any two primes and concatenating them in any order the result will always be prime. For example, taking $7$ and $109$, both $7109$ and $1097$ are prime. The sum of these four primes, $792$, represents the lowest sum for a set of four primes with this property.</p>\n<p>Find the lowest sum for a set of five primes for which any two primes concatenate to produce another prime.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 60\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, functools, math\n\n\ndef compute():\n\tPRIME_LIMIT = 100000  # Arbitrary initial cutoff\n\tprimes = eulerlib.list_primes(PRIME_LIMIT)\n\t\n\t\n\t# Tries to find any suitable set and return its sum, or None if none is found.\n\t# A set is suitable if it contains only primes, its size is targetsize,\n\t# its sum is less than or equal to sumlimit, and each pair concatenates to a prime.\n\t# 'prefix' is an array of ascending indices into the 'primes' array,\n\t# which describes the set found so far.\n\t# The function blindly assumes that each pair of primes in 'prefix' concatenates to a prime.\n\t# \n\t# For example, find_set_sum([1, 3, 28], 5, 10000) means \"find the sum of any set\n\t# where the set has size 5, consists of primes with the lowest elements being [3, 7, 109],\n\t# has sum 10000 or less, and has each pair concatenating to form a prime\".\n\tdef find_set_sum(prefix, targetsize, sumlimit):\n\t\tif len(prefix) == targetsize:\n\t\t\treturn sum(primes[i] for i in prefix)\n\t\telse:\n\t\t\tistart = 0 if (len(prefix) == 0) else (prefix[-1] + 1)\n\t\t\tfor i in range(istart, len(primes)):\n\t\t\t\tif primes[i] > sumlimit:\n\t\t\t\t\tbreak\n\t\t\t\tif all((is_concat_prime(i, j) and is_concat_prime(j, i)) for j in prefix):\n\t\t\t\t\tprefix.append(i)\n\t\t\t\t\tresult = find_set_sum(prefix, targetsize, sumlimit - primes[i])\n\t\t\t\t\tprefix.pop()\n\t\t\t\t\tif result is not None:\n\t\t\t\t\t\treturn result\n\t\t\treturn None\n\t\n\t\n\t# Tests whether concat(primes[x], primes[y]) is a prime number, with memoization.\n\t@functools.cache\n\tdef is_concat_prime(x, y):\n\t\treturn is_prime(int(str(primes[x]) + str(primes[y])))\n\t\n\t\n\t# Tests whether the given integer is prime. The implementation performs trial division,\n\t# first using the list of primes named 'primes', then switching to simple incrementation.\n\t# This requires the last number in 'primes' (if any) to be an odd number.\n\tdef is_prime(x):\n\t\tif x < 0:\n\t\t\traise ValueError()\n\t\telif x in (0, 1):\n\t\t\treturn False\n\t\telse:\n\t\t\tend = math.isqrt(x)\n\t\t\tfor p in primes:\n\t\t\t\tif p > end:\n\t\t\t\t\tbreak\n\t\t\t\tif x % p == 0:\n\t\t\t\t\treturn False\n\t\t\tfor i in range(primes[-1] + 2, end + 1, 2):\n\t\t\t\tif x % i == 0:\n\t\t\t\t\treturn False\n\t\t\treturn True\n\t\n\t\n\tsumlimit = PRIME_LIMIT\n\twhile True:\n\t\tsetsum = find_set_sum([], 5, sumlimit - 1)\n\t\tif setsum is None:  # No smaller sum found\n\t\t\treturn str(sumlimit)\n\t\tsumlimit = setsum\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "26033"}
{"number": 93, "problem": "<p>By using each of the digits from the set, $\\{1, 2, 3, 4\\}$, exactly once, and making use of the four arithmetic operations ($+, -, \\times, /$) and brackets/parentheses, it is possible to form different positive integer targets.</p>\n<p>For example,</p>\n\\begin{align}\n8 &amp;= (4 \\times (1 + 3)) / 2\\\\\n14 &amp;= 4 \\times (3 + 1 / 2)\\\\\n19 &amp;= 4 \\times (2 + 3) - 1\\\\\n36 &amp;= 3 \\times 4 \\times (2 + 1)\n\\end{align}\n<p>Note that concatenations of the digits, like $12 + 34$, are not allowed.</p>\n<p>Using the set, $\\{1, 2, 3, 4\\}$, it is possible to obtain thirty-one different target numbers of which $36$ is the maximum, and each of the numbers $1$ to $28$ can be obtained before encountering the first non-expressible number.</p>\n<p>Find the set of four distinct digits, $a \\lt b \\lt c \\lt d$, for which the longest set of consecutive positive integers, $1$ to $n$, can be obtained, giving your answer as a string: <i>abcd</i>.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 93\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, fractions, itertools\n\n\ndef compute():\n\tans = max(((a, b, c, d)\n\t\tfor a in range(1, 10)\n\t\tfor b in range(a + 1, 10)\n\t\tfor c in range(b + 1, 10)\n\t\tfor d in range(c + 1, 10)),\n\t\tkey=longest_consecutive)\n\treturn \"\".join(str(x) for x in ans)\n\n\ndef longest_consecutive(abcd):\n\ta, b, c, d = abcd\n\texpressible = set()\n\t\n\t# Try all possible orderings of operands and operators\n\tops = [0, 0, 0, a, b, c, d]  # 0 = operator slot, 1 to 9 = literal operand\n\twhile True:\n\t\t\n\t\t# Try all possibilities for the 3 operators\n\t\tfor i in range(64):\n\t\t\tstack = []\n\t\t\tj = 0  # Operator index\n\t\t\t\n\t\t\tstackunderflow = False\n\t\t\tdivbyzero = False\n\t\t\tfor op in ops:\n\t\t\t\tif 1 <= op <= 9:  # Operand\n\t\t\t\t\tstack.append(fractions.Fraction(op))\n\t\t\t\telif op == 0:  # Operator\n\t\t\t\t\tif len(stack) < 2:\n\t\t\t\t\t\tstackunderflow = True\n\t\t\t\t\t\tbreak\n\t\t\t\t\tright = stack.pop()\n\t\t\t\t\tleft = stack.pop()\n\t\t\t\t\toper = (i >> (j * 2)) & 3\n\t\t\t\t\tif oper == 0:\n\t\t\t\t\t\tstack.append(left + right)\n\t\t\t\t\telif oper == 1:\n\t\t\t\t\t\tstack.append(left - right)\n\t\t\t\t\telif oper == 2:\n\t\t\t\t\t\tstack.append(left * right)\n\t\t\t\t\telif oper == 3:\n\t\t\t\t\t\tif right.numerator == 0:\n\t\t\t\t\t\t\tdivbyzero = True\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tstack.append(left / right)\n\t\t\t\t\telse:\n\t\t\t\t\t\traise AssertionError()\n\t\t\t\t\tj += 1  # Consume an operator\n\t\t\t\telse:\n\t\t\t\t\traise AssertionError()\n\t\t\t\n\t\t\tif stackunderflow:\n\t\t\t\tbreak\n\t\t\tif divbyzero:\n\t\t\t\tcontinue\n\t\t\tif len(stack) != 1:\n\t\t\t\traise AssertionError()\n\t\t\t\n\t\t\tresult = stack.pop()\n\t\t\tif result.denominator == 1:\n\t\t\t\texpressible.add(result.numerator)\n\t\t\n\t\tif not eulerlib.next_permutation(ops):\n\t\t\tbreak\n\t\n\t# Find largest set of consecutive expressible integers starting from 1\n\treturn next(i for i in itertools.count(1) if (i not in expressible)) - 1\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1258"}
{"number": 182, "problem": "<p>The RSA encryption is based on the following procedure:</p>\n<p>Generate two distinct primes $p$ and $q$.<br>Compute $n = pq$ and $\\phi = (p - 1)(q - 1)$.<br>\nFind an integer $e$, $1 \\lt e \\lt \\phi$, such that $\\gcd(e, \\phi) = 1$.</p>\n<p>A message in this system is a number in the interval $[0, n - 1]$.<br>\nA text to be encrypted is then somehow converted to messages (numbers in the interval $[0, n - 1]$).<br>\nTo encrypt the text, for each message, $m$, $c = m^e \\bmod n$ is calculated.</p>\n<p>To decrypt the text, the following procedure is needed: calculate $d$ such that $ed = 1 \\bmod \\phi$, then for each encrypted message, $c$, calculate $m = c^d \\bmod n$.</p>\n<p>There exist values of $e$ and $m$ such that $m^e \\bmod n = m$.<br>We call messages $m$ for which $m^e \\bmod n = m$ unconcealed messages.</p>\n<p>An issue when choosing $e$ is that there should not be too many unconcealed messages.<br>For instance, let $p = 19$ and $q = 37$.<br>\nThen $n = 19 \\cdot 37 = 703$ and $\\phi = 18 \\cdot 36 = 648$.<br>\nIf we choose $e = 181$, then, although $\\gcd(181,648) = 1$ it turns out that all possible messages $m$ ($0 \\le m \\le n - 1$) are unconcealed when calculating $m^e \\bmod n$.<br>\nFor any valid choice of $e$ there exist some unconcealed messages.<br>\nIt's important that the number of unconcealed messages is at a minimum.</p>\n<p>Choose $p = 1009$ and $q = 3643$.<br>\nFind the sum of all values of $e$, $1 \\lt e \\lt \\phi(1009,3643)$ and $\\gcd(e, \\phi) = 1$, so that the number of unconcealed messages for this value of $e$ is at a minimum.</p>\n", "solution": "# \n# Solution to Project Euler problem 182\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\ndef compute():\n\tP = 1009\n\tQ = 3643\n\tTOTIENT = (P - 1) * (Q - 1)\n\tnumunconcealedp = count_all_unconcealed(P)\n\tnumunconcealedq = count_all_unconcealed(Q)\n\tminunconcealedp = min(numunconcealedp)\n\tminunconcealedq = min(numunconcealedq)\n\t\n\tans = sum(e for e in range(TOTIENT) if\n\t\tnumunconcealedp[e % (P - 1)] == minunconcealedp and\n\t\tnumunconcealedq[e % (Q - 1)] == minunconcealedq)\n\treturn str(ans)\n\n\ndef count_all_unconcealed(prime):\n\tresult = []\n\tfor e in range(prime - 1):\n\t\tif math.gcd(e, prime - 1) == 1:\n\t\t\tresult.append(count_unconcealed(prime, e))\n\t\telse:\n\t\t\tresult.append(10**20)  # Sentinel\n\treturn result\n\n\ndef count_unconcealed(modulus, e):\n\tresult = 0\n\tfor m in range(modulus):\n\t\tif pow(m, e, modulus) == m:\n\t\t\tresult += 1\n\treturn result\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "399788195976"}
{"number": 71, "problem": "<p>Consider the fraction, $\\dfrac n d$, where $n$ and $d$ are positive integers. If $n \\lt d$ and $\\operatorname{HCF}(n,d)=1$, it is called a reduced proper fraction.</p>\n<p>If we list the set of reduced proper fractions for $d \\le 8$ in ascending order of size, we get:\n$$\\frac 1 8, \\frac 1 7, \\frac 1 6, \\frac 1 5, \\frac 1 4, \\frac 2 7, \\frac 1 3, \\frac 3 8, \\mathbf{\\frac 2 5}, \\frac 3 7, \\frac 1 2, \\frac 4 7, \\frac 3 5, \\frac 5 8, \\frac 2 3, \\frac 5 7, \\frac 3 4, \\frac 4 5, \\frac 5 6, \\frac 6 7, \\frac 7 8$$</p>\n<p>It can be seen that $\\dfrac 2 5$ is the fraction immediately to the left of $\\dfrac 3 7$.</p>\n<p>By listing the set of reduced proper fractions for $d \\le 1\\,000\\,000$ in ascending order of size, find the numerator of the fraction immediately to the left of $\\dfrac 3 7$.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 71\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# We consider each (integer) denominator d from 1 to 1000000 by brute force.\n# For a given d, what is the largest integer n such that n/d < 3/7?\n# \n# - If d is a multiple of 7, then the integer n' = (d / 7) * 3 satisfies n'/d = 3/7.\n#   Hence we choose n = n' - 1 = (d / 7) * 3 - 1, so that n/d < 3/7.\n#   Since (d / 7) * 3 is already an integer, it is equal to floor(d * 3 / 7),\n#   which will unifie with the next case. Thus n = floor(d * 3 / 7) - 1.\n# - Otherwise d is not a multiple of 7, so choosing n = floor(d * 3 / 7)\n#   will automatically satisfy n/d < 3/7, and be the largest possible n\n#   due to the definition of the floor function.\n# \n# When we choose n in this manner, it might not be coprime with d. In other words,\n# the simplified form of the fraction n/d might have a denominator smaller than d.\n# \n# Let's process denominators in ascending order. Each denominator generates a pair\n# of integers (n, d) that conceptually represents a fraction, without simplification.\n# Whenever the current value of n/d is strictly larger than the previously saved value,\n# we save this current value of (n, d).\n# \n# If we handle denominators in this way - starting from 1, counting up consecutively -\n# then it is guaranteed that our final saved pair (n, d) is in lowest terms. This is\n# because if (n, d) is not in lowest terms, then its reduced form (n', d') would have\n# been saved when the smaller denominator d' was processed, and because n/d is\n# not larger than n'/d' (they are equal), the saved value would not be overwritten.\n# Hence in this entire computation we can avoid explicitly simplifying any fraction at all.\ndef compute():\n\tLIMIT = 1000000\n\tmaxnumer = 0\n\tmaxdenom = 1\n\tfor d in range(1, LIMIT + 1):\n\t\tn = d * 3 // 7\n\t\tif d % 7 == 0:\n\t\t\tn -= 1\n\t\tif n * maxdenom > d * maxnumer:  # n/d > maxdenom/maxnumer\n\t\t\tmaxnumer = n\n\t\t\tmaxdenom = d\n\treturn str(maxnumer)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "428570"}
{"number": 20, "problem": "<p>$n!$ means $n \\times (n - 1) \\times \\cdots \\times 3 \\times 2 \\times 1$.</p>\n<p>For example, $10! = 10 \\times 9 \\times \\cdots \\times 3 \\times 2 \\times 1 = 3628800$,<br>and the sum of the digits in the number $10!$ is $3 + 6 + 2 + 8 + 8 + 0 + 0 = 27$.</p>\n<p>Find the sum of the digits in the number $100!$.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 20\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\n# We do a straightforward computation thanks to Python's built-in arbitrary precision integer type.\ndef compute():\n\tn = math.factorial(100)\n\tans = sum(int(c) for c in str(n))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "648"}
{"number": 160, "problem": "<p>For any $N$, let $f(N)$ be the last five digits before the trailing zeroes in $N!$.<br>\nFor example,</p>\n<ul style=\"list-style-type:none;\">\n<li>$9! = 362880$ so $f(9)=36288$</li>\n<li>$10! = 3628800$ so $f(10)=36288$</li>\n<li>$20! = 2432902008176640000$ so $f(20)=17664$</li></ul>\n<p>Find $f(1\\,000\\,000\\,000\\,000)$.</p>\n", "solution": "# \n# Solution to Project Euler problem 160\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tans = factorial_suffix(10**12)\n\treturn str(ans)\n\n\n# The last 5 digits of n!, excluding trailing zeros.\ndef factorial_suffix(n):\n\ttwos = count_factors(n, 2) - count_factors(n, 5)  # Always non-negative for every n\n\t# We can reduce 'twos' because there is a cycle: 2^5 = 2^2505 = 32 mod 100000\n\tif twos >= 2505:\n\t\ttwos = (twos - 5) % 2500 + 5\n\treturn factorialish(n) * pow(2, twos, 100000) % 100000\n\n\n# Equal to n! but with all factors of 2 and 5 removed and then modulo 10^5.\n# The identity factorialIsh(n) = odd_factorialish(n) * even_factorialish(n) (mod 10^5) is true by definition.\ndef factorialish(n):\n\treturn even_factorialish(n) * odd_factorialish(n) % 100000\n\n\n# The product of {all even numbers from 1 to n}, but with all factors of 2 and 5 removed and then modulo 10^5.\n# For example, even_factorialish(9) only considers the numbers {2, 4, 6, 8}. Divide each number by 2 to get {1, 2, 3, 4}. Thus even_factorialish(9) = factorialish(4).\ndef even_factorialish(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn factorialish(n // 2)\n\n\n# The product of {all odd numbers from 1 to n}, but with all factors of 2 and 5 removed and then modulo 10^5.\n# By definition, odd_factorialish() never considers any number that has a factor of 2. The product of the numbers that not a multiple of 5 are accumulated by factorial_coprime().\n# Those that are a multiple of 5 are handled recursively by odd_factorialish(), noting that they are still odd after dividing by 5.\ndef odd_factorialish(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn odd_factorialish(n // 5) * factorial_coprime(n) % 100000\n\n\n# The product of {all numbers from 1 to n that are coprime with 10}, modulo 10^5.\n# The input argument can be taken modulo 10^5 because factorialoid(10^5) = 1, and each block of 10^5 numbers behaves the same.\ndef factorial_coprime(n):\n\tn %= 100000\n\tproduct = 1\n\tfor i in range(1, n + 1):\n\t\tif i % 2 != 0 and i % 5 != 0:\n\t\t\tproduct = i * product % 100000\n\treturn product\n\n\n# Counts the number of factors of n in the set of integers {1, 2, ..., end}.\n# For example, count_factors(25, 5) = 6 because {5, 10, 15, 20} each has one factor of 5, and 25 has two factors of 5.\ndef count_factors(end, n):\n\tif end == 0:\n\t\treturn 0\n\telse:\n\t\treturn end // n + count_factors(end // n, n)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "16576"}
{"number": 267, "problem": "<p>You are given a unique investment opportunity.</p>\n<p>Starting with \u00a31 of capital, you can choose a fixed proportion, <var>f</var>, of your capital to bet on a fair coin toss repeatedly for 1000 tosses.</p>\n<p>Your return is double your bet for heads and you lose your bet for tails.</p>\n<p>For example, if <var>f</var>\u2009=\u20091/4,  for the first toss you bet \u00a30.25, and if heads comes up you win \u00a30.5 and so then have \u00a31.5. You then bet \u00a30.375 and if the second toss is tails, you have \u00a31.125.</p>\n<p>Choosing <var>f</var> to maximize your chances of having at least \u00a31,000,000,000 after 1,000 flips, what is the chance that you become a billionaire?</p>\n<p>All computations are assumed to be exact (no rounding), but give your answer rounded to 12 digits behind the decimal point in the form 0.abcdefghijkl.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 267\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport fractions, math\n\n\n# When you win a coin toss, your capital is multiplied by (1 + 2f).\n# Whenever you lose, your capital is multiplied by (1 - f).\n# Thus the game's result is independent of the order of wins and losses;\n# what matters is only the total numbers of each outcome.\n# \n# Suppose you have n tosses and w wins. Then there are n - w losses.\n# By the binomial theorem, this outcome happens (n choose w) times out of 2^n.\n# Moreover, the final capital is 1 * (1 + 2f)^w * (1 - f)^(n - w).\n# \n# Some parts of this algorithm use accurate computations:\n# - Sum of binomial coefficients in bigint, for the probability.\n# - Conversion of the probability bigint fraction to decimal string.\n# Some parts are inaccurate or are based on heuristics:\n# - Calculating the final capital using floating-point arithmetic,\n#   for each bet proportion and number of wins+losses.\n# - Sampling the continuous input interval of [0.0, 1.0]\n#   to try to maximize the value of the function.\n# Overall this solution is not provably mathematically correct.\ndef compute():\n\t# Heuristic sampling algorithm.\n\t# At level 1 we test {1/2}. At level 2 we test {1/4, 3/4}.\n\t# At level 3 we test {1/8, 3/8, 5/8, 7/8}. Et cetera.\n\tTRIALS = 1000\n\tmaxindex = -1\n\tprevchangelevel = 1\n\tlevel = 1\n\twhile level - prevchangelevel <= 8:\n\t\tscaler = 0.5**level\n\t\tfor i in range(1, 1 << level, 2):\n\t\t\tindex = calc_billionaire_probability(i * scaler, TRIALS)\n\t\t\tif index > maxindex:\n\t\t\t\tmaxindex = index\n\t\t\t\tprevchangelevel = level\n\t\tlevel += 1\n\t\n\t# Calculate the cumulative probability: binomialSum = sum (n choose k) for 0 <= k < maxIndex\n\tbinomialsum = sum(math.comb(TRIALS, i) for i in range(maxindex))\n\treturn round_to_decimal(fractions.Fraction(binomialsum, 1 << TRIALS), 12)\n\n\n# Returns the cumulative binomial probability index.\ndef calc_billionaire_probability(betproportion, trials):\n\tinitcapital = 1.0\n\tlogbillionaire = math.log(1.0e9)\n\ti = 0\n\twhile i <= trials:  # Number of losses\n\t\t# Need to take logarithms because Python's ** operator and math.pow()\n\t\t# would raise an exception on overflow instead of returning infinity\n\t\tlogfinalcapital = math.log(initcapital)\n\t\tlogfinalcapital += math.log(1.0 - betproportion) * i\n\t\tlogfinalcapital += math.log(1.0 + betproportion * 2) * (trials - i)\n\t\tif logfinalcapital < logbillionaire:\n\t\t\tbreak\n\t\ti += 1\n\treturn i  # Range [0, TRIALS + 1]\n\n\n# Converts a fraction to a correctly rounded decimal string.\ndef round_to_decimal(val, digits):\n\tif digits <= 0:\n\t\traise ValueError()\n\tif val < 0:\n\t\treturn \"-\" + round_to_decimal(-val, digits)\n\ts = str(round(val * 10**digits)).zfill(digits + 1)\n\treturn f\"{s[:-digits]}.{s[-digits:]}\"\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "0.999992836187"}
{"number": 14, "problem": "<p>The following iterative sequence is defined for the set of positive integers:</p>\n<ul style=\"list-style-type:none;\">\n<li>$n \\to n/2$ ($n$ is even)</li>\n<li>$n \\to 3n + 1$ ($n$ is odd)</li></ul>\n<p>Using the rule above and starting with $13$, we generate the following sequence:\n$$13 \\to 40 \\to 20 \\to 10 \\to 5 \\to 16 \\to 8 \\to 4 \\to 2 \\to 1.$$</p>\n<p>It can be seen that this sequence (starting at $13$ and finishing at $1$) contains $10$ terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at $1$.</p>\n<p>Which starting number, under one million, produces the longest chain?</p>\n<p class=\"note\"><b>NOTE:</b> Once the chain starts the terms are allowed to go above one million.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 14\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport functools, sys\n\n\n# We compute the Collatz chain length for every integer in the range according to the iteration rule.\n# Also, we cache the Collatz value for all integer arguments to speed up the computation.\ndef compute():\n\tsys.setrecursionlimit(3000)\n\tans = max(range(1, 1000000), key=collatz_chain_length)\n\treturn str(ans)\n\n\n@functools.cache\ndef collatz_chain_length(x):\n\tif x == 1:\n\t\treturn 1\n\tif x % 2 == 0:\n\t\ty = x // 2\n\telse:\n\t\ty = x * 3 + 1\n\treturn collatz_chain_length(y) + 1\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "837799"}
{"number": 45, "problem": "<p>Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:</p>\n<table><tr><td>Triangle</td>\n<td>\u00a0</td>\n<td>$T_n=n(n+1)/2$</td>\n<td>\u00a0</td>\n<td>$1, 3, 6, 10, 15, \\dots$</td>\n</tr><tr><td>Pentagonal</td>\n<td>\u00a0</td>\n<td>$P_n=n(3n - 1)/2$</td>\n<td>\u00a0</td>\n<td>$1, 5, 12, 22, 35, \\dots$</td>\n</tr><tr><td>Hexagonal</td>\n<td>\u00a0</td>\n<td>$H_n=n(2n - 1)$</td>\n<td>\u00a0</td>\n<td>$1, 6, 15, 28, 45, \\dots$</td>\n</tr></table><p>It can be verified that $T_{285} = P_{165} = H_{143} = 40755$.</p>\n<p>Find the next triangle number that is also pentagonal and hexagonal.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 45\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\ti = 286\n\tj = 166\n\tk = 144\n\twhile True:\n\t\ttriangle = i * (i + 1) // 2\n\t\tpentagon = j * (j * 3 - 1) // 2\n\t\thexagon  = k * (k * 2 - 1)\n\t\tminimum = min(triangle, pentagon, hexagon)\n\t\tif minimum == max(triangle, pentagon, hexagon):\n\t\t\treturn str(triangle)\n\t\tif minimum == triangle: i += 1\n\t\tif minimum == pentagon: j += 1\n\t\tif minimum == hexagon : k += 1\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1533776805"}
{"number": 55, "problem": "<p>If we take $47$, reverse and add, $47 + 74 = 121$, which is palindromic.</p>\n<p>Not all numbers produce palindromes so quickly. For example,</p>\n\\begin{align}\n349 + 943 &amp;= 1292\\\\\n1292 + 2921 &amp;= 4213\\\\\n4213 + 3124 &amp;= 7337\n\\end{align}\n<p>That is, $349$ took three iterations to arrive at a palindrome.</p>\n<p>Although no one has proved it yet, it is thought that some numbers, like $196$, never produce a palindrome. A number that never forms a palindrome through the reverse and add process is called a Lychrel number. Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise. In addition you are given that for every number below ten-thousand, it will either (i) become a palindrome in less than fifty iterations, or, (ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome. In fact, $10677$ is the first number to be shown to require over fifty iterations before producing a palindrome: $4668731596684224866951378664$ ($53$ iterations, $28$-digits).</p>\n<p>Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is $4994$.</p>\n<p>How many Lychrel numbers are there below ten-thousand?</p>\n<p class=\"smaller\">NOTE: Wording was modified slightly on 24 April 2007 to emphasise the theoretical nature of Lychrel numbers.</p>\n", "solution": "# \n# Solution to Project Euler problem 55\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tans = sum(1 for i in range(10000) if is_lychrel(i))\n\treturn str(ans)\n\n\ndef is_lychrel(n):\n\tfor i in range(50):\n\t\tn += int(str(n)[ : : -1])\n\t\tif str(n) == str(n)[ : : -1]:\n\t\t\treturn False\n\treturn True\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "249"}
{"number": 115, "problem": "<p class=\"note\">NOTE: This is a more difficult version of <a href=\"problem=114\">Problem 114</a>.</p>\n<p>A row measuring $n$ units in length has red blocks with a minimum length of $m$ units placed on it, such that any two red blocks (which are allowed to be different lengths) are separated by at least one black square.</p>\n<p>Let the fill-count function, $F(m, n)$, represent the number of ways that a row can be filled.</p>\n<p>For example, $F(3, 29) = 673135$ and $F(3, 30) = 1089155$.</p>\n<p>That is, for $m = 3$, it can be seen that $n = 30$ is the smallest value for which the fill-count function first exceeds one million.</p>\n<p>In the same way, for $m = 10$, it can be verified that $F(10, 56) = 880711$ and $F(10, 57) = 1148904$, so $n = 57$ is the least value for which the fill-count function first exceeds one million.</p>\n<p>For $m = 50$, find the least value of $n$ for which the fill-count function first exceeds one million.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 115\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\n# How many ways can a row n units long be filled, where red blocks are\n# at least m units long? Denote this quantity as ways[n].\n# Compute n = 0 manually as a base case.\n# \n# Now assume n >= 1. Look at the leftmost item and sum up the possibilities.\n# - If the item is a black square, then the rest of the row is allowed\n#   to be anything of length n-1. Add ways[n-1].\n# - If the item is a red block with length k where k >= m, then:\n#   - If k = n, then the whole row is filled by this red block. Add 1.\n#   - Otherwise k < n, this red block is followed by a black square, then followed\n#     by anything of length n-k-1. So add ways[n-m-1] + ways[n-m-2] + ... + ways[0].\ndef compute():\n\t# Dynamic programming\n\tM = 50\n\tways = [1]\n\tfor n in itertools.count(1):\n\t\ts = ways[n - 1] + sum(ways[ : max(n - M, 0)])\n\t\tif n >= M:\n\t\t\ts += 1\n\t\tways.append(s)\n\t\tif s > 1000000:\n\t\t\treturn str(n)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "168"}
{"number": 4, "problem": "<p>A palindromic number reads the same both ways. The largest palindrome made from the product of two $2$-digit numbers is $9009 = 91 \\times 99$.</p>\n<p>Find the largest palindrome made from the product of two $3$-digit numbers.</p>\n\n", "solution": "#\n# Solution to Project Euler problem 4\n# Copyright (c) Project Nayuki. All rights reserved.\n#\n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n#\n\n\n# Computers are fast, so we can implement this solution directly without any clever math.\ndef compute():\n\tans = max(i * j\n\t\tfor i in range(100, 1000)\n\t\tfor j in range(100, 1000)\n\t\tif str(i * j) == str(i * j)[ : : -1])\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "906609"}
{"number": 30, "problem": "<p>Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:\n\\begin{align}\n1634 &amp;= 1^4 + 6^4 + 3^4 + 4^4\\\\\n8208 &amp;= 8^4 + 2^4 + 0^4 + 8^4\\\\\n9474 &amp;= 9^4 + 4^4 + 7^4 + 4^4\n\\end{align}\n</p><p class=\"smaller\">As $1 = 1^4$ is not a sum it is not included.</p>\n<p>The sum of these numbers is $1634 + 8208 + 9474 = 19316$.</p>\n<p>Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 30\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\t# As stated in the problem, 1 = 1^5 is excluded.\n\t# If a number has at least n >= 7 digits, then even if every digit is 9,\n\t# n * 9^5 is still less than the number (which is at least 10^n).\n\tans = sum(i for i in range(2, 1000000) if i == fifth_power_digit_sum(i))\n\treturn str(ans)\n\n\ndef fifth_power_digit_sum(n):\n\treturn sum(int(c)**5 for c in str(n))\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "443839"}
{"number": 121, "problem": "<p>A bag contains one red disc and one blue disc. In a game of chance a player takes a disc at random and its colour is noted. After each turn the disc is returned to the bag, an extra red disc is added, and another disc is taken at random.</p>\n<p>The player pays \u00a31 to play and wins if they have taken more blue discs than red discs at the end of the game.</p>\n<p>If the game is played for four turns, the probability of a player winning is exactly 11/120, and so the maximum prize fund the banker should allocate for winning in this game would be \u00a310 before they would expect to incur a loss. Note that any payout will be a whole number of pounds and also includes the original \u00a31 paid to play the game, so in the example given the player actually wins \u00a39.</p>\n<p>Find the maximum prize fund that should be allocated to a single game in which fifteen turns are played.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 121\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\n# At the beginning of turn number k (0-based), there are k + 2 discs to choose from.\n# Hence a game that has n turns has (n+1) * n * ... * 1 = (n + 1)! outcomes.\n# \n# Let f(k, b) be the number of ways to accumulate exactly b blue discs after k turns.\n# We can see that:\n# - f(0, 0) = 1.\n# - f(0, b) = 0, for b > 0.\n# - f(k, 0) = k * f(k - 1, 0), for k > 0.\n#   (Add a red disc, where there are k ways)\n# - f(k, b) = f(k - 1, b - 1) + k * f(k - 1, b), for k > 0, b > 0.\n#   (Add a blue disc (1 way) or add a red disc (k ways))\n# \n# Next, we calculate the sum f(n, j) + f(n, j+1) + ... + f(n, n),\n# where j is the smallest number of blue discs accumulated that exceeds\n# the number of red discs accumulated (which is n - j). So j = ceil((n + 1) / 2).\n# \n# Finally, the probability of winning is that sum divided by (n + 1)!.\n# For any game where the cost of playing is 1 and the probability of winning is p,\n# the maximum sustainable prize is 1 / p, therefore the maximum sustainable integer prize is floor(1 / p).\ndef compute():\n\tTURNS = 15\n\t# Dynamic programming\n\tways = [[1]]\n\tfor i in range(1, TURNS + 1):\n\t\trow = []\n\t\tfor j in range(i + 1):\n\t\t\ttemp = 0\n\t\t\tif j < i:\n\t\t\t\ttemp = ways[i - 1][j] * i\n\t\t\tif j > 0:\n\t\t\t\ttemp += ways[i - 1][j - 1]\n\t\t\trow.append(temp)\n\t\tways.append(row)\n\t\n\tnumer = sum(ways[TURNS][i] for i in range(TURNS // 2 + 1, TURNS + 1))\n\tdenom = math.factorial(TURNS + 1)\n\treturn str(denom // numer)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "2269"}
{"number": 61, "problem": "<p>Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:</p>\n<table><tr><td>Triangle</td>\n<td>\u00a0</td>\n<td>$P_{3,n}=n(n+1)/2$</td>\n<td>\u00a0</td>\n<td>$1, 3, 6, 10, 15, \\dots$</td>\n</tr><tr><td>Square</td>\n<td>\u00a0</td>\n<td>$P_{4,n}=n^2$</td>\n<td>\u00a0</td>\n<td>$1, 4, 9, 16, 25, \\dots$</td>\n</tr><tr><td>Pentagonal</td>\n<td>\u00a0</td>\n<td>$P_{5,n}=n(3n-1)/2$</td>\n<td>\u00a0</td>\n<td>$1, 5, 12, 22, 35, \\dots$</td>\n</tr><tr><td>Hexagonal</td>\n<td>\u00a0</td>\n<td>$P_{6,n}=n(2n-1)$</td>\n<td>\u00a0</td>\n<td>$1, 6, 15, 28, 45, \\dots$</td>\n</tr><tr><td>Heptagonal</td>\n<td>\u00a0</td>\n<td>$P_{7,n}=n(5n-3)/2$</td>\n<td>\u00a0</td>\n<td>$1, 7, 18, 34, 55, \\dots$</td>\n</tr><tr><td>Octagonal</td>\n<td>\u00a0</td>\n<td>$P_{8,n}=n(3n-2)$</td>\n<td>\u00a0</td>\n<td>$1, 8, 21, 40, 65, \\dots$</td>\n</tr></table><p>The ordered set of three $4$-digit numbers: $8128$, $2882$, $8281$, has three interesting properties.</p>\n<ol><li>The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).</li>\n<li>Each polygonal type: triangle ($P_{3,127}=8128$), square ($P_{4,91}=8281$), and pentagonal ($P_{5,44}=2882$), is represented by a different number in the set.</li>\n<li>This is the only set of $4$-digit numbers with this property.</li>\n</ol><p>Find the sum of the only ordered set of six cyclic $4$-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 61\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\ndef compute():\n\t# Build table of numbers\n\t# numbers[i][j] is the set of figurate numbers of i sides (3 <= i <= 8), having 4 digits, beginning with the 2 digits equal to j\n\tnumbers = [[set() for j in range(100)] for i in range(9)]\n\tfor sides in range(3, 9):\n\t\tfor n in itertools.count(1):\n\t\t\tnum = figurate_number(sides, n)\n\t\t\tif num >= 10000:\n\t\t\t\tbreak\n\t\t\tif num >= 1000:\n\t\t\t\tnumbers[sides][num // 100].add(num)\n\t\n\t# Note: sidesused is a bit set\n\tdef find_solution_sum(begin, current, sidesused, sum):\n\t\tif sidesused == 0b111111000:\n\t\t\tif current % 100 == begin // 100:\n\t\t\t\treturn sum\n\t\telse:\n\t\t\tfor sides in range(4, 9):\n\t\t\t\tif (sidesused >> sides) & 1 != 0:\n\t\t\t\t\tcontinue\n\t\t\t\tfor num in numbers[sides][current % 100]:\n\t\t\t\t\ttemp = find_solution_sum(begin, num, sidesused | (1 << sides), sum + num)\n\t\t\t\t\tif temp is not None:\n\t\t\t\t\t\treturn temp\n\t\t\treturn None\n\t\n\t# Do search\n\tfor i in range(10, 100):\n\t\tfor num in numbers[3][i]:\n\t\t\ttemp = find_solution_sum(num, num, 1 << 3, num)\n\t\t\tif temp is not None:\n\t\t\t\treturn str(temp)\n\traise AssertionError(\"No solution\")\n\n\ndef figurate_number(sides, n):\n\treturn n * ((sides - 2) * n - (sides - 4)) // 2\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "28684"}
{"number": 243, "problem": "<p>A positive fraction whose numerator is less than its denominator is called a proper fraction.<br>\nFor any denominator, $d$, there will be $d - 1$ proper fractions; for example, with $d = 12$:<br>$1 / 12, 2 / 12, 3 / 12, 4 / 12, 5 / 12, 6 / 12, 7 / 12, 8 / 12, 9 / 12, 10 / 12, 11 / 12$.\n</p>\n\n<p>We shall call a fraction that cannot be cancelled down a <dfn>resilient fraction</dfn>.<br>\nFurthermore we shall define the <dfn>resilience</dfn> of a denominator, $R(d)$, to be the ratio of its proper fractions that are resilient; for example, $R(12) = 4/11$.<br>\nIn fact, $d = 12$ is the smallest denominator having a resilience $R(d) \\lt 4/10$.</p>\n\n<p>Find the smallest denominator $d$, having a resilience $R(d) \\lt 15499/94744$.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 243\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, fractions\n\n\n# == Introduction ==\n# \n# From the problem statement, a fraction n/d is resilient if and only if n and d are coprime.\n# The value totient(i) equals the number of i's in the range [1, d-1] such that i and d are coprime.\n# We can see this value is useful because the resilience of a denominator d,\n# denoted as R(d), is equal to totient(d) / (d - 1).\n# The problem gives us a target value and asks us to find the smallest d such that R(d) < target.\n# \n# We know that totient(d) can be calculated from d's prime factorization.\n# Namely if d = p1^k1 * p2^k2 * ... p_m^k_m where each p_i is unique and k_i >= 1,\n# then totient(d) = (p1 - 1) p1^(k1 - 1) * ... * (p_m - 1) p_m^(k_m - 1).\n# \n# \n# == Contiguous prime factors ==\n# \n# In the context of this problem, we argue that it is never advantageous to skip a prime factor when\n# searching for the smallest d. To phrase it formally, if we have some d = c * p^0 * q^k, where\n# {p < q, k >= 1, and c >= 1 is coprime with p and q (i.e. c consists of the other prime factors)},\n# then let d' = c * p^k * q^0 and so d' < d, and we shall show that R(d') <= R(d). Here's a long proof:\n# \n# We examine the two values\n#   R(d') = (totient(c) * (p - 1) * p^(k - 1)) / (c * p^k - 1) = constant * f(p, c, k) and\n#   R(d ) = (totient(c) * (q - 1) * q^(k - 1)) / (c * q^k - 1) = constant * f(q, c, k),\n#   where f(x, c, k) = (x - 1) x^(k - 1) / (c * x^k - 1).\n# \n# Given the crucial fact that p < q, if we want to show that R(d') <= R(d) then it is\n# sufficient to show that f(x, c, k) is a non-strictly increasing function with respect to x\n# (with c and k being fixed). To achieve this, we take the partial derivative with respect\n# to x and derive the fact that it is always non-negative. So we begin:\n# \n#   d/dx f(x, c, k) = [x^(k - 2) * (c*x^k - x*k + k - 1)] / [(c*x^k - 1)^2].\n#   (omitting a tedious but elementary algebraic derivation)\n# \n# Because x >= 2 and c >= 1, clearly the part of the denominator (c*x^k - 1) > 0.\n# Also, clearly part of the numerator x^(k - 2) > 0.\n# So next we tackle the (c*x^k - x*k + k - 1) part indirectly.\n# \n# The following lemma is a special case of Bernoulli's inequality.\n# For all k >= 0, x^k >= 1 + k*(x - 1). Proof by induction:\n#   Base case, k = 0:\n#     x^k = x^0 = 1.  (left-hand side)\n#     1 + k*(x - 1) = 1 + 0*(x - 1) + 1.  (RHS)\n#     1 >= 1.\n#   Induction step, k >= 0:\n#     x^k >= 1 + k*(x - 1).  (by assumption)\n#     x * x^k >= x * (1 + k*(x - 1)).\n#     x^(k + 1) >= x + x*k*(x - 1).  (a)\n#     (x - 1)^2 >= 0.  (squares are non-negative)\n#     x^2 - 2*x + 1 >= 0.\n#     k*x^2 - 2*k*x + k >= 0.\n#     k*x^2 - k*x >= k*x - k.\n#     x + k*x^2 - k*x >= x + k*x - k\n#                      = 1 + x + k*x - k - 1\n#                      = 1 + (k + 1)(x - 1).\n#     x + x*k*(x - 1) >= 1 + (k + 1)(x - 1).  (b)\n#     x^(k + 1) >= 1 + (k + 1)(x - 1).  (combine (a) and (b))\n# \n# Now we deduce: c*x^k - x*k + k - 1\n#   >= x^k - x*k + k - 1  (because c >= 1)\n#   >= (1 + k*(x - 1)) - x*k + k - 1 = 0.  (using the x^k inequality lemma)\n# \n# To summarize: x^(k - 2) > 0, (c*x^k - x*k + k - 1) >= 0, and (c x^k - 1)^2 > 0. Therefore we\n# conclude that f'(x, c, k) >= 0 for all real x > 1, which means the function is non-strictly increasing\n# when x increases. Hence with p < q, we have f(p, c, k) <= f(q, c, k), and finally that R(d') <= R(d).\n# \n# The consequence of this lemma is that for any particular target, {the minimum value of d\n# satisfying R(d) < target} will have the property that d uses all of the smallest prime factors\n# up to a certain point (with at least 1 copy of each factor). For example, d = 2 * 3 * 5 could be\n# a minimum value, and d = 2^4 * 3^2 * 5 * 7 might be one. But d = 2 * 5^8 cannot be a minimum value\n# because it skips the prime number 3; the alternative d = 2 * 3^8 would be a smaller candidate.\n# \n# \n# == Pseudo-resilience ==\n# \n# For the sake of the mathematical argument, let's define a related value called the pseudo-resilience:\n# \n#   R'(d) = totient(d) / d  (we divide by d instead of d-1)\n#         = ((p1 - 1) p1^(k1 - 1) * ... * (p_m - 1) p_m^(k_m - 1)) / (p1^k1 * ... * p_m^k_m)\n#         = (p1 - 1)/p1 * (p2 - 1)/p2 * ... (p_m - 1)/p_m.\n# \n# Notice that this value is independent of the exponents k_i (as long as each k_i >= 1)!\n# Hence the value R'(d) only depends on d's set of unique prime factors, not the multiplicity of\n# each factor. Each new prime factor p decreases the pseudo-resilience R'(d) by a factor of (p - 1) / p\n# (equivalent to 1 - 1/p). Note that smaller values of p cause a larger decrease.\n# \n# The pseudo-resilience is always smaller than the resilience, i.e. R'(d) < R(d), so we\n# can use it as a lower bound. For an arbitrary number d, if d is composed entirely of\n# copies of the first n primes (e.g. d = 2^4 * 3^2 * 5 is composed of the first 3 primes),\n# then R'(p1 * p2 * ... * p_n) = R'(d) < R(d). This means that if we restrict ourselves to\n# only using the first n primes to build up d, then R(d) can never be smaller than the value\n# R'(p1 * p2 * ... * p_n). So if we look at R'(...) for products of primes (namely primorials),\n# we can derive a lower bound on at least how many distinct prime factors d must contain in\n# order to make R(d) possibly fall below the target.\n# \n# Suppose d's prime factorization contains all of the first n prime numbers (i.e. one or more\n# copies of each), and b is another integer such that the set of the first n prime numbers contains\n# all of the factors of b. (For example: n = 3, d = 2^4 * 3^2 * 5, b = 2 * 5^9.) Then it is easy\n# to show that R'(b*d) = R'(d) (the extra factors have no effect), and then R(b*d) <= R(d) because:\n# \n#   R(b*d) = b * totient(d) / (b*d - 1).\n#   R(d)   = totient(d) / (d - 1).\n#   R(b*d) / R(d) = (b * (d - 1)) / (b*d - 1)\n#                 = (b*d - b) / (b*d - 1)\n#                 = 1 - (b - 1) / (b*d - 1)\n#                <= 1.  (because b >= 1)\n# \n# We could make b arbitrary large (e.g. by setting b = 2^k), and this will make R(b*d)\n# asymptotically approach R'(b*d) (equivalently R'(d)) from above. But there is no benefit\n# to making b larger past a certain point, because multiplying d by the next prime factor q\n# will decrease the resilience by more than any value of b ever could. This is because:\n# \n#   d > 1. -d < -1.\n#   q*d - d < q*d - 1.\n#   (q - 1)*d < (q*d - 1).\n#   (q - 1) / (q*d - 1) < 1 / d.\n#   (q - 1) * totient(d) / (q*d - 1) < totient(d) / d.\n#   R(q*d) < R'(d).  (by substitution)\n#   Also, R'(d) = R'(b*d) < R(b*d) = b * totient(d) / (b*d - 1).\n#   Therefore R(q*d) < R(b*d) for any b whose set of prime factors is already contained in d.\n# \n# \n# == The algorithm ==\n# \n# First we compute R'(primorial(n)) for n = 1, 2, 3, ... until R'(primorial(n)) < target.\n# This gives us a lower bound, telling us that {the answer d}'s factorization needs to\n# contain at least all of the first n prime numbers in order to achieve R(d) < target\n# (this is a necessary but not sufficient condition). We let d = primorial(n).\n# \n# With this lower bound in hand, we test values of b = 1, 2, ..., prime(n+1)-1 (inclusive)\n# and try to find the smallest b (if any) such that R(b*d) < target.\n# If we succeed, then b*d is the answer. Otherwise we increment n and try again.\ndef compute():\n\tTARGET = fractions.Fraction(15499, 94744)\n\ttotient = 1\n\tdenominator = 1\n\tp = 2\n\twhile True:\n\t\ttotient *= p - 1\n\t\tdenominator *= p\n\t\t# Note: At this point in the code, denominator is the product of one copy of each\n\t\t# prime number up to and including p, totient is equal to totient(denominator),\n\t\t# and totient/denominator = R'(2 * 3 * ... * p) (the pseudo-resilience).\n\t\t\n\t\t# Advance to the next prime\n\t\twhile True:\n\t\t\tp += 1\n\t\t\tif eulerlib.is_prime(p):\n\t\t\t\tbreak\n\t\t\n\t\t# If the lower bound is below the target, there might be a suitable solution d such that\n\t\t# d's factorization only contains prime factors strictly below the current (advanced) value of p\n\t\tif fractions.Fraction(totient, denominator) < TARGET:\n\t\t\t# Try to find the lowest factor i such that R(i*d) < TARGET, if any.\n\t\t\t# Note that over this range of i, we have R'(d) = R'(i*d) < R(i*d).\n\t\t\tfor i in range(1, p):\n\t\t\t\tnumer = i * totient\n\t\t\t\tdenom = i * denominator\n\t\t\t\tif fractions.Fraction(numer, denom - 1) < TARGET:\n\t\t\t\t\treturn str(denom)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "892371480"}
{"number": 303, "problem": "<p>\nFor a positive integer $n$, define $f(n)$ as the least positive multiple of $n$ that, written in base $10$, uses only digits $\\le 2$.</p>\n<p>Thus $f(2)=2$, $f(3)=12$, $f(7)=21$, $f(42)=210$, $f(89)=1121222$.</p>\n<p>Also, $\\sum \\limits_{n = 1}^{100} {\\dfrac{f(n)}{n}} = 11363107$.</p>\n<p>\nFind $\\sum \\limits_{n=1}^{10000} {\\dfrac{f(n)}{n}}$.\n</p>\n\n", "solution": "# \n# Solution to Project Euler problem 303\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\t# This function computes and returns the smallest positive multiple of n such that the result\n\t# uses only the digits 0, 1, 2 in base 10. For example, fmm(2) = 2, fmm(3) = 12, fmm(5) = 10.\n\t# \n\t# As an overview, the algorithm has two phases:\n\t# 0. Determine whether a k-digit solution is possible, for increasing values of k.\n\t# 1. Knowing that a k-digit solution exists, construct the minimum solution.\n\t# \n\t# Let n >= 1 be an arbitrary integer that will remain constant for the rest of the explanation.\n\t# \n\t# When we look at the set of all k-digit numbers using only the digits {0, 1, 2}\n\t# (with possible leading zeros), each number will have a particular remainder modulo n.\n\t# For example, the set of 3-digit numbers is {000, 001, 002, 010, ..., 120, ..., 221, 222} (having 3^3 = 27 elements).\n\t# If one of these numbers is congruent to 0 mod n, then a solution to the original problem exists.\n\t# If not, then we prepend the digits 0, 1, 2 to all the numbers to get the set of all 4-digit numbers.\n\t# \n\t# The size of the set of k-digit numbers grows exponentially with the length k, but we can avoid constructing and\n\t# working with the explicit set of numbers. Instead, we only need to keep track of whether each remainder modulo n has\n\t# a number that generates it or not. But we also need to exclude 0 as a solution, even though it is a multiple of n.\n\t# \n\t# For 0-digit numbers, the only possible remainder is 0. All other remainders modulo n are impossible.\n\t# For 1-digit numbers, we look at all the possible 0-digit number remainders. If a remainder m is possible, then:\n\t# - By prepending the digit 0, a remainder of (m + 0*1 mod n) is possible for 1-digit numbers.\n\t# - By prepending the digit 1, a remainder of (m + 1*1 mod n) is possible for 1-digit numbers.\n\t# - By prepending the digit 2, a remainder of (m + 2*1 mod n) is possible for 1-digit numbers.\n\t# We keep iterating this process of tracking possible remainders for k-digit\n\t# numbers until the remainder of 0 mod n is possible in a non-zero number.\n\t# \n\t# Now we know that a k-digit solution exists, such that the k-digit number consists of only {0, 1, 2},\n\t# and the number is congruent to 0 modulo n. To construct the minimum solution, we start at the most significant\n\t# digit of the result, choose the lowest possible value, and work backward toward the least significant digit.\n\t# \n\t# The leading digit must be 1 or 2, because if it were 0 then it would contradict the fact that\n\t# no solution shorter than k digits exists. All subsequent digits can possibly be 0, 1, or 2.\n\t# \n\t# At each value place, we choose the lowest digit value out of {0, 1, 2} such that there still\n\t# exists a solution for the remaining suffix of the number. When we choose a value at a certain\n\t# digit position, say 2 at the 8th place, we subtract 2 * 10^8 mod n from the ongoing remainder.\n\tdef find_minimum_multiple(n):\n\t\t# feasible[i][j] indicates whether there exists an i-digit number that consists of\n\t\t# only the digits {0, 1, 2} (with possible leading zeros) having a remainder of j modulo n:\n\t\t# - 0: No i-digit number can form this remainder\n\t\t# - 1: Only zero can form this remainder\n\t\t# - 2: Some non-zero number can form this remainder\n\t\t\n\t\t# Initialization and base case\n\t\tfeasible = [[1] + [0] * (n - 1)]\n\t\t\n\t\t# Add digits on the left side until a solution exists, using dynamic programming\n\t\ti = 0\n\t\twhile feasible[i][0] != 2:  # Unbounded loop\n\t\t\tassert i == len(feasible) - 1\n\t\t\tprev = feasible[i]\n\t\t\tcur = list(prev)  # Clone\n\t\t\tdigitmod = pow(10, i, n)\n\t\t\tfor j in range(n):  # Run time of O(n)\n\t\t\t\tif prev[j] > 0:\n\t\t\t\t\tcur[(j + digitmod * 1) % n] = 2\n\t\t\t\t\tcur[(j + digitmod * 2) % n] = 2\n\t\t\tfeasible.append(cur)\n\t\t\ti += 1\n\t\t\n\t\t# Construct the smallest solution using the memoized table\n\t\t# Run time of O(len(feasible)) bigint operations\n\t\tresult = 0\n\t\tremainder = 0  # Modulo n\n\t\t# Pick digit values from left (most significant) to right\n\t\tfor i in reversed(range(len(feasible) - 1)):\n\t\t\tdigitmod = pow(10, i, n)\n\t\t\t# Leading digit must start searching at 1; subsequent digits start searching at 0\n\t\t\tfor j in range((1 if (i == len(feasible) - 2) else 0), 3):\n\t\t\t\tnewrem = (remainder - digitmod * j) % n\n\t\t\t\tif feasible[i][newrem] > 0:\n\t\t\t\t\tresult = result * 10 + j\n\t\t\t\t\tremainder = newrem\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\traise AssertionError()\n\t\treturn result\n\t\n\tans = sum(find_minimum_multiple(n) // n for n in range(1, 10001))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1111981904675169"}
{"number": 92, "problem": "<p>A number chain is created by continuously adding the square of the digits in a number to form a new number until it has been seen before.</p>\n<p>For example,\n\\begin{align}\n&amp;44 \\to 32 \\to 13 \\to 10 \\to \\mathbf 1 \\to \\mathbf 1\\\\\n&amp;85 \\to \\mathbf{89} \\to 145 \\to 42 \\to 20 \\to 4 \\to 16 \\to 37 \\to 58 \\to \\mathbf{89}\n\\end{align}\n</p><p>Therefore any chain that arrives at $1$ or $89$ will become stuck in an endless loop. What is most amazing is that EVERY starting number will eventually arrive at $1$ or $89$.</p>\n<p>How many starting numbers below ten million will arrive at $89$?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 92\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tans = sum(1\n\t\tfor i in range(1, 10000000)\n\t\tif get_terminal(i) == 89)\n\treturn str(ans)\n\n\nTERMINALS = (1, 89)\n\ndef get_terminal(n):\n\twhile n not in TERMINALS:\n\t\tn = square_digit_sum(n)\n\treturn n\n\n\ndef square_digit_sum(n):\n\tresult = 0\n\twhile n > 0:\n\t\tresult += SQUARE_DIGITS_SUM[n % 1000]\n\t\tn //= 1000\n\treturn result\n\nSQUARE_DIGITS_SUM = [sum(int(c)**2 for c in str(i)) for i in range(1000)]\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "8581146"}
{"number": 323, "problem": "<p>Let $y_0, y_1, y_2, \\dots$ be a sequence of random unsigned $32$-bit integers<br>\n(i.e. $0 \\le y_i \\lt 2^{32}$, every value equally likely).</p>\n<p>For the sequence $x_i$ the following recursion is given:<br></p><ul><li>$x_0 = 0$ and</li>\n<li>$x_i = x_{i - 1} \\boldsymbol \\mid y_{i - 1}$, for $i \\gt 0$. ($\\boldsymbol \\mid$ is the bitwise-OR operator).</li>\n</ul><p>It can be seen that eventually there will be an index $N$ such that $x_i = 2^{32} - 1$ (a bit-pattern of all ones) for all $i \\ge N$.</p>\n\n<p>Find the expected value of $N$. <br>\nGive your answer rounded to $10$ digits after the decimal point.</p>\n", "solution": "# \n# Solution to Project Euler problem 323\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport fractions, math\n\n\n# Define a sequence of random variables:\n# - Let X0 be 0. (This will become apparent when we define X_n.)\n# - Let X1 to represent how many trials it takes for a uniformly random bit to see\n#   the first 1 (a positive integer). For example, if the random bit experiences\n#   the sequence (1, 0, ...), then X1 = 1 because it took 1 trial. For example,\n#   the sequence (0, 0, 0, 1, 1, 0, 1, ...) implies X1 = 4, because it took 4 trials.\n# - For any integer n >= 1, let X_n represent how many trials it takes for a sequence\n#   of n uniformly random bits to see at least one 1 in each bit. For example, if\n#   two random bits experience the sequence (01, 01, 10, 00, 11, ...), then X2 = 3\n#   because it took 3 trials for the running bitwise OR to become 11.\n# \n# Now consider the expected value of each random variable:\n# - E[X0] is obviously 0.\n# - E[X1] is the expected value of the geometric distribution with p=0.5, with a\n#   well-known answer of 2. But we can go through a more elementary derivation\n#   by considering a single trial of the single bit:\n#   - It has a half chance of being 0. In this case, the expected value equals the\n#     probability (half) times {one plus the same unknown expected value} (because we\n#     performed one trial, ended up in the same state, and the process is memoryless).\n#   - It has a half chance of being 1. In this case, the expected value equals the\n#     probability (half) multiplied by one (because we performed one trial).\n#   Altogether, we have that E[X1] = 1/2 * (1 + E[X1]) + 1/2 * 1 = 1 + E[X1]/2.\n#   Rearrange to get E[X1]/2 = 1, thus E[X1] = 2 as wanted.\n# \n# - As for E[X2], look at what happens in a single trial of the two bits:\n#   - If none of the bits are 1, then we have performed one trial and are back to\n#     the same situation. There is a 1 in 4 chance of this happening (bit string 00).\n#   - If one of the bits is 1, then we have performed one trial and the remaining calculation\n#     equals E[X1]. There is a 2 in 4 chance of this happening (bit strings 01 and 10).\n#   - If both of the bits are 1, then we have performed one trial and the remaining calculation\n#     equals E[X0] which is 0. There is a 1 in 4 chance of this happening (bit string 11).\n#   All in all, we have that E[X2] = 1/4 * (1 + E[X2]) + 1/2 * (1 + E[X1]) + 1/4 * (1 + E[X0]).\n#   Simplifying, we get 3/4 * E[X2] = 1 + 1/2 * E[X1] + 1/4 * E[X0].\n#   Since we know the values of E[X0] and E[X1], we can solve that E[X2] = 8/3.\n# - In general for E[X_n], performing one trial results in k (0 <= k <= n) bits\n#   being set to 1, with probability (n choose k) / 2^n, and the rest of the\n#   expected value calculation reduces to the value of E[X_{n-k}]. Therefore:\n#   E[X_n] = sum((n choose k) * (1 + E[X_{n-k}]) / 2^n for k in [0, n]).\n#   Simplifying further so that E[X_n] only appears on the left side, we get:\n#   (2^n - 1) * E[X_n] = 2^n + sum((n choose k) * E[X_{n-k}] for k in [0, n-1]).\n#   E[X_n] = (2^n + sum((n choose k) * E[X_{n-k}] for k in [0, n-1])) / (2^n - 1).\n# \n# Finally, E[X32] is the number that we want as the answer.\n# Note that this solution algorithm carefully uses entirely integer arithmetic,\n# even though it is tempting to use floating-point numbers as a shortcut.\n\ndef compute():\n\tSIZE = 32\n\tDECIMALS = 10\n\tassert SIZE >= 0\n\tassert DECIMALS > 0\n\t\n\t# Calculate the answer\n\texpect = [fractions.Fraction(0)]\n\tfor n in range(1, SIZE + 1):\n\t\ttemp = sum(math.comb(n, k) * expect[k] for k in range(n))\n\t\texpect.append((2**n + temp) / (2**n - 1))\n\tans = expect[-1]\n\t\n\t# Round the fraction properly. This is the pedantically\n\t# correct version of doing f\"{float(ans):.10f}\"\n\tassert ans >= 0\n\ts = str(round(ans * 10**DECIMALS)).zfill(DECIMALS + 1)\n\treturn f\"{s[:-DECIMALS]}.{s[-DECIMALS:]}\"\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "6.3551758451"}
{"number": 101, "problem": "<p>If we are presented with the first $k$ terms of a sequence it is impossible to say with certainty the value of the next term, as there are infinitely many polynomial functions that can model the sequence.</p>\n<p>As an example, let us consider the sequence of cube numbers. This is defined by the generating function,<br>$u_n = n^3$: $1, 8, 27, 64, 125, 216, \\dots$</p>\n<p>Suppose we were only given the first two terms of this sequence. Working on the principle that \"simple is best\" we should assume a linear relationship and predict the next term to be $15$ (common difference $7$). Even if we were presented with the first three terms, by the same principle of simplicity, a quadratic relationship should be assumed.</p>\n<p>We shall define $\\operatorname{OP}(k, n)$ to be the $n$<sup>th</sup> term of the optimum polynomial generating function for the first $k$ terms of a sequence. It should be clear that $\\operatorname{OP}(k, n)$ will accurately generate the terms of the sequence for $n \\le k$, and potentially the <dfn>first incorrect term</dfn> (FIT) will be $\\operatorname{OP}(k, k+1)$; in which case we shall call it a <dfn>bad OP</dfn> (BOP).</p>\n<p>As a basis, if we were only given the first term of sequence, it would be most sensible to assume constancy; that is, for $n \\ge 2$, $\\operatorname{OP}(1, n) = u_1$.</p>\n<p>Hence we obtain the following $\\operatorname{OP}$s for the cubic sequence:</p>\n<div class=\"margin_left\">\n<table><tr><td>$\\operatorname{OP}(1, n) = 1$</td>\n<td>$1, {\\color{red}\\mathbf 1}, 1, 1, \\dots$</td>\n</tr><tr><td>$\\operatorname{OP}(2, n) = 7n - 6$</td>\n<td>$1, 8, {\\color{red}\\mathbf{15}}, \\dots$</td>\n</tr><tr><td>$\\operatorname{OP}(3, n) = 6n^2 - 11n + 6$\u00a0\u00a0\u00a0\u00a0\u00a0</td>\n<td>$1, 8, 27, {\\color{red}\\mathbf{58}}, \\dots$</td>\n</tr><tr><td>$\\operatorname{OP}(4, n) = n^3$</td>\n<td>$1, 8, 27, 64, 125, \\dots$</td>\n</tr></table></div>\n<p>Clearly no BOPs exist for $k \\ge 4$.</p>\n<p>By considering the sum of FITs generated by the BOPs (indicated in <span class=\"red\"><b>red</b></span> above), we obtain $1 + 15 + 58 = 74$.</p>\n<p>Consider the following tenth degree polynomial generating function:\n$$u_n = 1 - n + n^2 - n^3 + n^4 - n^5 + n^6 - n^7 + n^8 - n^9 + n^{10}.$$</p>\n<p>Find the sum of FITs for the BOPs.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 101\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\nfrom fractions import Fraction\n\n\n# The generating function u(n) is a polynomial of degree 10.\n# OP(k, n) is a polynomial of degree at most k-1, which can be obtained\n# by the Lagrange interpolating polynomial (or other methods).\n# Any polynomial P(n) of degree k has at most k roots (i.e. points where P(n) = 0).\n# The zero polynomial Z(n) = 0 has negative infinite degree, and has roots everywhere.\n# Now, let E(n) = u(n) - OP(k, n), which is also a polynomial.\n# \n# If k <= 10, then OP(k, n) has degree less than k <= 10, so E(n) has degree 10. So E(n) has at most 10 roots.\n# By construction, OP(k, n) = u(n) for n = 1, 2, ..., k, thus E(n) already has k roots at {1, 2, ..., k}.\n# E(n) has at most 10 - k roots remaining, hence among the 11 - k values {k+1, k+2, ..., 11},\n# there must be an n where E(n) != 0 (i.e. an incorrect term where OP(k, n) != u(n)).\n# \n# If k > 10, E(n) has k roots at {1, 2, ..., k}, and possibly others.\n# So either E(n) has degree at least k, or it's the zero polynomial.\n# Now, u(n) has degree 10 and OP(k, n) has degree at most k-1,\n# so their difference E(n) has at most degree max(10, k-1) = k-1.\n# This means E(n) does not have degree k, so it is the zero polynomial.\n# Hence u(n) = OP(k, n), and there are no incorrect terms.\n# \n# In conclusion, BOPs exist for and only for 1 <= k <= 10. For each k in that range,\n# the first incorrect term (FIT) of OP(k, n) exists for some n in {k+1, k+2, ..., 11}.\nDEGREE = 10\ndef compute():\n\tans = Fraction(0, 1)\n\tfor k in range(1, DEGREE + 1):\n\t\tfor n in itertools.count(k + 1):\n\t\t\tif n == DEGREE + 2:\n\t\t\t\traise AssertionError()\n\t\t\treference = Fraction(generating_function(n), 1)\n\t\t\tterm = optimum_polynomial(k, n)\n\t\t\tif term != reference:\n\t\t\t\tans += term\n\t\t\t\tbreak\n\treturn str(ans.numerator) + (\"\" if ans.denominator == 1 else \"/\" + str(ans.denominator))\n\n\ndef optimum_polynomial(k, n):\n\t# Lagrange interpolation\n\tsum = Fraction(0, 1)\n\tfor i in range(k + 1):\n\t\tproduct = Fraction(generating_function(i), 1)\n\t\tfor j in range(1, k + 1):\n\t\t\tif j != i:\n\t\t\t\tproduct *= Fraction(n - j, i - j)\n\t\tsum += product\n\treturn sum\n\n\ndef generating_function(n):\n\treturn sum((-n)**i for i in range(DEGREE + 1))\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "37076114526"}
{"number": 41, "problem": "<p>We shall say that an $n$-digit number is pandigital if it makes use of all the digits $1$ to $n$ exactly once. For example, $2143$ is a $4$-digit pandigital and is also prime.</p>\n<p>What is the largest $n$-digit pandigital prime that exists?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 41\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\ndef compute():\n\t# Note: The only 1-digit pandigital number is 1, which is not prime. Thus we require n >= 2.\n\tfor n in reversed(range(2, 10)):\n\t\tarr = list(reversed(range(1, n + 1)))\n\t\twhile True:\n\t\t\tif arr[-1] not in NONPRIME_LAST_DIGITS:\n\t\t\t\tn = int(\"\".join(str(x) for x in arr))\n\t\t\t\tif eulerlib.is_prime(n):\n\t\t\t\t\treturn str(n)\n\t\t\tif not prev_permutation(arr):\n\t\t\t\tbreak\n\traise AssertionError()\n\nNONPRIME_LAST_DIGITS = {0, 2, 4, 5, 6, 8}\n\n\ndef prev_permutation(arr):\n\ti = len(arr) - 1\n\twhile i > 0 and arr[i - 1] <= arr[i]:\n\t\ti -= 1\n\tif i <= 0:\n\t\treturn False\n\tj = len(arr) - 1\n\twhile arr[j] >= arr[i - 1]:\n\t\tj -= 1\n\tarr[i - 1], arr[j] = arr[j], arr[i - 1]\n\tarr[i : ] = arr[len(arr) - 1 : i - 1 : -1]\n\treturn True\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "7652413"}
{"number": 150, "problem": "<p>In a triangular array of positive and negative integers, we wish to find a sub-triangle such that the sum of the numbers it contains is the smallest possible.</p>\n<p>In the example below, it can be easily verified that the marked triangle satisfies this condition having a sum of \u221242.</p>\n<div class=\"center\">\n<img src=\"resources/images/0150.gif?1678992055\" class=\"dark_img\" alt=\"\"></div>\n<p>We wish to make such a triangular array with one thousand rows, so we generate 500500 pseudo-random numbers <span style=\"font-style:italic;\">s<sub>k</sub></span> in the range \u00b12<sup>19</sup>, using a type of random number generator (known as a Linear Congruential Generator) as follows:</p>\n<p class=\"margin_left\"><span style=\"font-style:italic;\">t</span> := 0\n<br>\nfor k = 1 up to k = 500500:\n<br>\n\u00a0 \u00a0 <span style=\"font-style:italic;\">t</span> := (615949*<span style=\"font-style:italic;\">t</span> + 797807) modulo 2<sup>20</sup><br>\n\u00a0 \u00a0 <span style=\"font-style:italic;\">s<sub>k</sub></span> := <span style=\"font-style:italic;\">t</span>\u22122<sup>19</sup></p>\n<p>Thus: <span style=\"font-style:italic;\">s<sub>1</sub></span> = 273519, <span style=\"font-style:italic;\">s<sub>2</sub></span> = \u2212153582, <span style=\"font-style:italic;\">s<sub>3</sub></span> = 450905 etc</p>\n<p>Our triangular array is then formed using the pseudo-random numbers thus:</p>\n<div style=\"text-align:center;font-style:italic;\">\ns<sub>1</sub><br>\ns<sub>2</sub>\u00a0 s<sub>3</sub><br>\ns<sub>4</sub>\u00a0 s<sub>5</sub>\u00a0 s<sub>6</sub>\u00a0 \n<br>\ns<sub>7</sub>\u00a0 s<sub>8</sub>\u00a0 s<sub>9</sub>\u00a0 s<sub>10</sub><br>\n...\n</div>\n<p>Sub-triangles can start at any element of the array and extend down as far as we like (taking-in the two elements directly below it from the next row, the three elements directly below from the row after that, and so on).\n<br>\nThe \"sum of a sub-triangle\" is defined as the sum of all the elements it contains.\n<br>\nFind the smallest possible sub-triangle sum.</p>\n", "solution": "# \n# Solution to Project Euler problem 150\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\t# Generate the triangle\n\tROWS = 1000\n\trand = lcg_random()\n\ttriangle = [[next(rand) for j in range(i + 1)] for i in range(ROWS)]\n\ttry:\n\t\tans = compute_numpy(triangle)\n\texcept ImportError:\n\t\tans = compute_plain(triangle)\n\treturn str(ans)\n\n\ndef compute_plain(triangle):\n\t# Calculate cumulative sums for each row\n\trowsums = []\n\tfor row in triangle:\n\t\trowsum = [0]\n\t\tfor j in range(len(row)):\n\t\t\trowsum.append(rowsum[j] + row[j])\n\t\trowsums.append(rowsum)\n\t\n\t# Calculate minimum subtriangle sum for each apex position\n\tresult = 0\n\tfor i in range(len(triangle)):\n\t\tfor j in range(len(triangle[i])):\n\t\t\t# Apex element selected at triangle[i][j]\n\t\t\tcursum = 0\n\t\t\tfor k in range(i, len(triangle)):  # Ending row (inclusive)\n\t\t\t\tcursum += rowsums[k][k - i + 1 + j] - rowsums[k][j]\n\t\t\t\tresult = min(cursum, result)\n\treturn result\n\n\ndef compute_numpy(triangle):\n\t# Calculate cumulative sums for each row\n\timport numpy\n\tROWS = len(triangle)\n\trowsums = numpy.zeros([ROWS, ROWS + 2], dtype=numpy.int64)\n\tfor (i, row) in enumerate(triangle):\n\t\trowsums[i, : i + 2] = numpy.cumsum([0] + row, dtype=numpy.int64)\n\t\n\t# Calculate minimum subtriangle sum for each apex position\n\tresult = 0\n\tfor i in range(len(triangle)):\n\t\tfor j in range(len(triangle[i])):\n\t\t\t# Apex element selected at triangle[i][j]\n\t\t\tks = numpy.arange(i, ROWS, dtype=numpy.uint32)\n\t\t\tterms = rowsums[ks, ks - i + 1 + j] - rowsums[ks, j]\n\t\t\tsums = numpy.cumsum(terms, dtype=numpy.int64)\n\t\t\tresult = min(numpy.min(sums), result)\n\treturn result\n\n\ndef lcg_random():\n\tstate = 0\n\twhile True:\n\t\tstate = (615949 * state + 797807) & ((1 << 20) - 1)\n\t\tyield state - (1 << 19)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "-271248680"}
{"number": 381, "problem": "<p>\nFor a prime $p$ let $S(p) = (\\sum (p-k)!) \\bmod (p)$ for $1 \\le k \\le 5$.\n</p>\n<p>\nFor example, if $p=7$,<br>\n$(7-1)! + (7-2)! + (7-3)! + (7-4)! + (7-5)! = 6! + 5! + 4! + 3! + 2! = 720+120+24+6+2 = 872$.<br> \nAs $872 \\bmod (7) = 4$, $S(7) = 4$.\n</p>\n<p>\nIt can be verified that $\\sum S(p) = 480$ for $5 \\le p \\lt 100$.\n</p>\n<p>\nFind $\\sum S(p)$ for $5 \\le p \\lt 10^8$.\n</p>\n\n\n\n", "solution": "# \n# Solution to Project Euler problem 381\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\ndef compute():\n\t# Note about the mathematical simplification:\n\t# (p-5)! + (p-4)! + (p-3)! + (p-2)! + (p-1)!\n\t# = (p-5)! * (1 + (p-4) + (p-4)(p-3) + (p-4)(p-3)(p-2) + (p-4)(p-3)(p-2)(p-1))\n\t# = (p-5)! * (1 + (-4) + (-4)(-3) + (-4)(-3)(-2) + (-4)(-3)(-2)(-1))\n\t# = (p-5)! * (1 + -4 + 12 + -24 + 24)\n\t# = (p-5)! * 9\n\t# = (p-1)! / ((p-1)(p-2)(p-3)(p-4)) * 9\n\t# = (p-1)! / ((-1)(-2)(-3)(-4)) * 9\n\t# = (p-1)! / 24 * 9\n\t# = (p-1)! * (3 * 3) / (3 * 8)\n\t# = (p-1)! * 3 / 8\n\t# = -1 * 3 / 8  (by Wilson's theorem)\n\t# = -3/8 mod p.\n\t# Every part of the equation is modulo a prime p > 4.\n\tdef s(p):\n\t\treturn (p - 3) * pow(8, -1, p) % p\n\t\n\tans = sum(s(p) for p in eulerlib.prime_generator(10**8) if p >= 5)\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "139602943319822"}
{"number": 10, "problem": "<p>The sum of the primes below $10$ is $2 + 3 + 5 + 7 = 17$.</p>\n<p>Find the sum of all the primes below two million.</p>\n\n\n\n", "solution": "#\n# Solution to Project Euler problem 10\n# Copyright (c) Project Nayuki. All rights reserved.\n#\n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n#\n\nimport eulerlib\n\n\n# Call the sieve of Eratosthenes and sum the primes found.\ndef compute():\n\tans = sum(eulerlib.list_primes(1999999))\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "142913828922"}
{"number": 86, "problem": "<p>A spider, S, sits in one corner of a cuboid room, measuring $6$ by $5$ by $3$, and a fly, F, sits in the opposite corner. By travelling on the surfaces of the room the shortest \"straight line\" distance from S to F is $10$ and the path is shown on the diagram.</p>\n<div class=\"center\">\n<img src=\"resources/images/0086.png?1678992052\" class=\"dark_img\" alt=\"\"><br></div>\n<p>However, there are up to three \"shortest\" path candidates for any given cuboid and the shortest route doesn't always have integer length.</p>\n<p>It can be shown that there are exactly $2060$ distinct cuboids, ignoring rotations, with integer dimensions, up to a maximum size of $M$ by $M$ by $M$, for which the shortest route has integer length when $M = 100$. This is the least value of $M$ for which the number of solutions first exceeds two thousand; the number of solutions when $M = 99$ is $1975$.</p>\n<p>Find the least value of $M$ such that the number of solutions first exceeds one million.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 86\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math, itertools\n\n\ndef compute():\n\t# solutions[k] is the set of all solutions where the largest side has length k.\n\t# A solution is a triple (x, y, z) such that 0 < x <= y <= z, and in the rectangular prism with dimensions x * y * z,\n\t# the shortest surface path from one vertex to the opposite vertex has an integral length.\n\tsolutions = []\n\t\n\t\n\t# Generates all solutions where the largest side has length less than 'limit'.\n\tdef generate_solutions():\n\t\t# Pythagorean triples theorem:\n\t\t#   Every primitive Pythagorean triple with a odd and b even can be expressed as\n\t\t#   a = st, b = (s^2-t^2)/2, c = (s^2+t^2)/2, where s > t > 0 are coprime odd integers.\n\t\t# Now generate all Pythagorean triples, including non-primitive ones.\n\t\tfor s in itertools.count(3, 2):\n\t\t\tfor t in range(s - 2, 0, -2):\n\t\t\t\tif s * s // 2 >= limit * 3:\n\t\t\t\t\treturn\n\t\t\t\t\n\t\t\t\tif math.gcd(s, t) == 1:\n\t\t\t\t\tfor k in itertools.count(1):\n\t\t\t\t\t\ta = s * t * k\n\t\t\t\t\t\tb = (s * s - t * t) // 2 * k\n\t\t\t\t\t\tc = (s * s + t * t) // 2 * k\n\t\t\t\t\t\tif a >= limit and b >= limit:\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tfind_splits(a, b, c)\n\t\t\t\t\t\tfind_splits(b, a, c)\n\t\n\t\n\t# Assumes that a^2 + b^2 = c^2.\n\tdef find_splits(a, b, c):\n\t\tz = b\n\t\tfor x in range(1, a):\n\t\t\ty = a - x\n\t\t\tif y < x:\n\t\t\t\tbreak\n\t\t\tif c * c == min(\n\t\t\t\t\t(x + y) * (x + y) + z * z,\n\t\t\t\t\t(y + z) * (y + z) + x * x,\n\t\t\t\t\t(z + x) * (z + x) + y * y):\n\t\t\t\ttemp = max(x, y, z)\n\t\t\t\tif temp < limit:\n\t\t\t\t\t# Add canonical solution\n\t\t\t\t\titem = tuple(sorted((x, y, z)))\n\t\t\t\t\tsolutions[temp].add(item)\n\t\n\t\n\t# cumulativesolutions[m] = len(solutions[0]) + len(solutions[1]) + ... + len(solutions[m]).\n\tcumulativesolutions = [0]\n\t\n\tlimit = 1\n\twhile True:\n\t\t# Extend the solutions list with blank sets\n\t\twhile len(solutions) < limit:\n\t\t\tsolutions.append(set())\n\t\t\n\t\tgenerate_solutions()\n\t\t\n\t\t# Compute the number of cumulative solutions up to and including a certain maximum size\n\t\tfor i in range(len(cumulativesolutions), limit):\n\t\t\tsum = cumulativesolutions[i - 1] + len(solutions[i])\n\t\t\tcumulativesolutions.append(sum)\n\t\t\tif sum > 1000000:\n\t\t\t\treturn str(i)\n\t\t\n\t\t# Raise the limit and keep searching\n\t\tlimit *= 2\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1818"}
{"number": 346, "problem": "<p>\nThe number $7$ is special, because $7$ is $111$ written in base $2$, and $11$ written in base $6$ (i.e. $7_{10} = 11_6 = 111_2$). In other words, $7$ is a repunit in at least two bases $b \\gt 1$. \n</p>\n<p>\nWe shall call a positive integer with this property a strong repunit. It can be verified that there are $8$ strong repunits below $50$: $\\{1,7,13,15,21,31,40,43\\}$.<br>\nFurthermore, the sum of all strong repunits below $1000$ equals $15864$.\n</p>\nFind the sum of all strong repunits below $10^{12}$.\n\n\n\n", "solution": "# \n# Solution to Project Euler problem 346\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\n# 1 is a strong repunit because in every base b >= 2, its representation is \"1\", which is a repunit.\n# 2 is not a strong repunit because in base 2 it is \"10\", but in every base b >= 3 it is \"2\".\n# \n# As for other numbers, first assume that n is an arbitrary integer at least 3.\n# It is trivially a repunit in base b = n - 1 (which is at least 2), where its representation is \"11\".\n# For this n to be a strong repunit, it needs to be a repunit in at least one other base.\n# Obviously it can't be \"11\" in another base. So it must be {\"111\",\n# \"1111\", \"11111\", or some longer string} in some base smaller than b.\n# \n# Phrased differently, if an integer n >= 3 has the representation {\"111\", \"1111\", or some longer string}\n# in some base b >= 2, then it is automatically a strong repunit because firstly, its value is\n# at least 7 (\"111\" in base 2), and secondly it is equal to \"11\" in some base b' >= 2.\n# \n# Hence all we need to do is for each repunit length 3, 4, 5, etc., we generate the string (e.g. \"111\"),\n# then evaluate its value at base 2, 3, etc. as long as the value stays within the limit,\n# and add these values to the set of known strong repunits (to catch possible duplicates).\n# \n# Note that the longest repunit length we need to test is at most the bit length of the limit.\n# For example, because the limit is 10^12 = 1110100011010100101001010001000000000000 (base 2),\n# any repunit longer than \"1111111111111111111111111111111111111111\" is guaranteed\n# to exceed the limit in every base.\ndef compute():\n\tLIMIT = 10**12\n\t\n\t# Collect all generated numbers to eliminate duplicates\n\tstrongrepunits = {1}  # Special case\n\t\n\t# For each possible length of strong repunits (ignoring the trivial length of 2)\n\tfor length in range(3, LIMIT.bit_length() + 1):\n\t\t\n\t\t# For each base to evaluate the repunit in, until the value exceeds the limit\n\t\tfor base in itertools.count(2):\n\t\t\t\n\t\t\t# Evaluate value = base^(length-1) + base^(length-2) + ... + base^1 + base^0\n\t\t\t# Due to the geometric series, value = (base^length - 1) / (base - 1)\n\t\t\tvalue = (base**length - 1) // (base - 1)\n\t\t\tif value >= LIMIT:\n\t\t\t\tbreak\n\t\t\tstrongrepunits.add(value)\n\t\n\t# Sum all the numbers generated\n\tans = sum(strongrepunits)\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "336108797689259276"}
{"number": 206, "problem": "<p>Find the unique positive integer whose square has the form 1_2_3_4_5_6_7_8_9_0,<br /> where each \u201c_\u201d is a single digit.</p>\n", "solution": "# \n# Solution to Project Euler problem 206\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# The major optimization is to do arithmetic in base 10 in the main loop, avoiding division and modulo\ndef compute():\n\t# Initialize\n\tn = 1000000000  # The pattern is greater than 10^18, so start searching at 10^9\n\t\n\tndigits = [0] * 10  # In base 10, little-endian\n\ttemp = n\n\tfor i in range(len(ndigits)):\n\t\tndigits[i] = temp % 10\n\t\ttemp //= 10\n\t\n\tn2digits = [0] * 19  # Based on length of pattern\n\ttemp = n * n\n\tfor i in range(len(n2digits)):\n\t\tn2digits[i] = temp % 10\n\t\ttemp //= 10\n\t\n\t# Increment and search\n\twhile not is_concealed_square(n2digits):\n\t\t# Add 20n + 100 so that n2digits = (n + 10)^2\n\t\tadd_20n(ndigits, n2digits)\n\t\tadd_10pow(n2digits, 2)\n\t\t\n\t\t# Since n^2 ends with 0, n must end with 0\n\t\tn += 10\n\t\tadd_10pow(ndigits, 1)\n\t\t# Now n2digits = n^2\n\treturn str(n)\n\n\ndef is_concealed_square(n):\n\tfor i in range(1, 10):  # Scan for 1 to 9\n\t\tif n[20 - i * 2] != i:\n\t\t\treturn False\n\treturn n[0] == 0  # Special case for 0\n\n\ndef add_10pow(n, i):\n\twhile n[i] == 9:\n\t\tn[i] = 0\n\t\ti += 1\n\tn[i] += 1\n\n\ndef add_20n(n, n2):\n\tcarry = 0\n\ti = 0\n\twhile i < len(n):\n\t\tsum = n[i] * 2 + n2[i + 1] + carry\n\t\tn2[i + 1] = sum % 10\n\t\tcarry = sum // 10\n\t\ti += 1\n\ti += 1\n\twhile carry > 0:\n\t\tsum = n2[i] + carry\n\t\tn2[i] = sum % 10\n\t\tcarry = sum // 10\n\t\ti += 1\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1389019170"}
{"number": 197, "problem": "<p>Given is the function $f(x) = \\lfloor 2^{30.403243784 - x^2}\\rfloor \\times 10^{-9}$ ($\\lfloor \\, \\rfloor$ is the floor-function),<br>\nthe sequence $u_n$ is defined by $u_0 = -1$ and $u_{n + 1} = f(u_n)$.</p>\n\n<p>Find $u_n + u_{n + 1}$ for $n = 10^{12}$.<br>\nGive your answer with $9$ digits after the decimal point.</p>\n", "solution": "# \n# Solution to Project Euler problem 197\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\ndef compute():\n\tdef f(x):\n\t\treturn math.floor(2.0 ** (30.403243784 - x * x)) / 1.0e9\n\t\n\tITERATIONS = 10**12\n\t\n\t# Floyd's cycle-finding algorithm\n\tx = -1.0\n\ty = -1.0\n\ti = 0\n\twhile i < ITERATIONS:\n\t\t# Here at the top of the loop, x = f^i(-1) and y = f^{2i}(-1)\n\t\t\n\t\tif i > 0 and x == y:  # This means index i is part of the cycle, and (2i - i) = i is some multiple of the true cycle length\n\t\t\tbreak\n\t\t\n\t\t# Advance the states at different speeds\n\t\tx = f(x)\n\t\ty = f(f(y))\n\t\ti += 1\n\t\n\t# Advance by many multiples of the cycle length, then deal with the remaining iterations\n\tremain = (ITERATIONS - i) % i\n\tfor i in range(remain):\n\t\tx = f(x)\n\t\n\tans = x + f(x)\n\tans = math.floor(ans * 1.0e9) / 1.0e9  # Truncate to 9 digits after the decimal point\n\treturn f\"{ans:.9f}\"\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1.710637717"}
{"number": 24, "problem": "<p>A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:</p>\n<p class=\"center\">012\u00a0 \u00a0021\u00a0 \u00a0102\u00a0 \u00a0120\u00a0 \u00a0201\u00a0 \u00a0210</p>\n<p>What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 24\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\n# We initialize a list as the lowest permutation of the given digits, which is the sequence\n# (0,1,2,3,4,5,6,7,8,9). Then we call a Python library function that generates a stream of\n# all permutations of the values, seek to the 999 999th element (0-based indexing), and stringify it.\ndef compute():\n\tarr = list(range(10))\n\ttemp = itertools.islice(itertools.permutations(arr), 999999, None)\n\treturn \"\".join(str(x) for x in next(temp))\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "2783915460"}
{"number": 164, "problem": "<p>How many $20$ digit numbers $n$ (without any leading zero) exist such that no three consecutive digits of $n$ have a sum greater than $9$?</p>\n", "solution": "# \n# Solution to Project Euler problem 164\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# Let ways[d][p] be the number of ways that a d-digit number (with possible leading zeros)\n# whose first 'consecutive' (i.e. 3) digits are the same as the digits of p (padding with\n# leading zeros up to 'consecutive' digits) and where each of the ways does not have\n# 'consecutive' consecutive digits whose sum exceeds 'maxSum'.\n# \n# For example, ways[5][27] is the number of ways that a 5-digit number starts with 027 and has\n# no 3 consecutive digits summing to more than 9. This set of ways includes only {02700, 02701, 02702}\n# and not {02703, 02710, 02799, etc}.\n# \n# For each d (from 0 to anything) and p (from 0 to (10^consecutive - 1)), ways[d][p] is equal\n# to the sum of ways[d-1][p'] for 10 choices of p'. To explain by example, suppose p = 555.\n# Clearly these 3 digits sum to more than 9, so ways[d][555] = 0. To give another example,\n# suppose p = 421. We strip off the first digit and try all possibilities for the last digit,\n# giving the set {210, 211, ..., 219}. Now we add up the ways with one fewer digit with these\n# prefixes: ways[d][421] = ways[d-1][210] + ways[d-1][211] + ... + ways[d-1][219].\n# \n# The final number of ways wanted is for strict 20-digit numbers (i.e. with no leading zeros),\n# which is equal to the number of ways for non-strict 23-digit numbers that start with 000 minus\n# the number of non-strict 22-digit numbers that start with 000, leaving only 22-digit numbers\n# that start with 001 to 009, which are exactly the 20-digit numbers that start with 1 to 9.\ndef compute():\n\tBASE = 10\n\tDIGITS = 20\n\tCONSECUTIVE = 3\n\tMAX_SUM = 9\n\t\n\t# Dynamic programming array, with base case (ways for 0-digit numbers)\n\tinnerlen = BASE ** CONSECUTIVE\n\tways = [[1] + [0] * (innerlen - 1)]\n\t\n\t# Compute DP table\n\tfor digits in range(1, DIGITS + CONSECUTIVE + 1):\n\t\tnewrow = []\n\t\tfor prefix in range(innerlen):\n\t\t\tsum = 0\n\t\t\tif digit_sum(prefix) <= MAX_SUM:\n\t\t\t\tfor nextdigit in range(BASE):\n\t\t\t\t\tsum += ways[digits - 1][prefix % (BASE ** (CONSECUTIVE - 1)) * BASE + nextdigit]\n\t\t\tnewrow.append(sum)\n\t\tways.append(newrow)\n\t\n\tans = ways[-1][0] - ways[-2][0]\n\treturn str(ans)\n\n\ndef digit_sum(n):\n\treturn sum(int(c) for c in str(n))\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "378158756814587"}
{"number": 75, "problem": "<p>It turns out that $\\pu{12 cm}$ is the smallest length of wire that can be bent to form an integer sided right angle triangle in exactly one way, but there are many more examples.</p>\n<ul style=\"list-style-type:none;\">\n<li>$\\pu{\\mathbf{12} \\mathbf{cm}}$: $(3,4,5)$</li>\n<li>$\\pu{\\mathbf{24} \\mathbf{cm}}$: $(6,8,10)$</li>\n<li>$\\pu{\\mathbf{30} \\mathbf{cm}}$: $(5,12,13)$</li>\n<li>$\\pu{\\mathbf{36} \\mathbf{cm}}$: $(9,12,15)$</li>\n<li>$\\pu{\\mathbf{40} \\mathbf{cm}}$: $(8,15,17)$</li>\n<li>$\\pu{\\mathbf{48} \\mathbf{cm}}$: $(12,16,20)$</li></ul>\n<p>In contrast, some lengths of wire, like $\\pu{20 cm}$, cannot be bent to form an integer sided right angle triangle, and other lengths allow more than one solution to be found; for example, using $\\pu{120 cm}$ it is possible to form exactly three different integer sided right angle triangles.</p>\n<ul style=\"list-style-type:none;\">\n<li>$\\pu{\\mathbf{120} \\mathbf{cm}}$: $(30,40,50)$, $(20,48,52)$, $(24,45,51)$</li></ul>\n\n<p>Given that $L$ is the length of the wire, for how many values of $L \\le 1\\,500\\,000$ can exactly one integer sided right angle triangle be formed?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 75\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\ndef compute():\n\tLIMIT = 1500000\n\t# \n\t# Pythagorean triples theorem:\n\t#   Every primitive Pythagorean triple with a odd and b even can be expressed as\n\t#   a = st, b = (s^2-t^2)/2, c = (s^2+t^2)/2, where s > t > 0 are coprime odd integers.\n\t# \n\ttriples = set()\n\tfor s in range(3, math.isqrt(LIMIT) + 1, 2):\n\t\tfor t in range(s - 2, 0, -2):\n\t\t\tif math.gcd(s, t) == 1:\n\t\t\t\ta = s * t\n\t\t\t\tb = (s * s - t * t) // 2\n\t\t\t\tc = (s * s + t * t) // 2\n\t\t\t\tif a + b + c <= LIMIT:\n\t\t\t\t\ttriples.add((a, b, c))\n\t\n\tways = [0] * (LIMIT + 1)\n\tfor triple in triples:\n\t\tsigma = sum(triple)\n\t\tfor i in range(sigma, len(ways), sigma):\n\t\t\tways[i] += 1\n\t\n\tans = ways.count(1)\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "161667"}
{"number": 135, "problem": "<p>Given the positive integers, $x$, $y$, and $z$, are consecutive terms of an arithmetic progression, the least value of the positive integer, $n$, for which the equation, $x^2 - y^2 - z^2 = n$, has exactly two solutions is $n = 27$:\n$$34^2 - 27^2 - 20^2 = 12^2 - 9^2 - 6^2 = 27.$$</p>\n<p>It turns out that $n = 1155$ is the least value which has exactly ten solutions.</p>\n<p>How many values of $n$ less than one million have exactly ten distinct solutions?</p>\n\n", "solution": "# \n# Solution to Project Euler problem 135\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# Let x = m, y = m - k, z = m - 2k (this is an arithmetic sequence).\n# By tedious but straightforward algebra, x^2 - y^2 - z^2 = (m - k)(5k - m).\n# \n# For the sequence to have positive descending terms, we require m > 0, k > 0, and 2k < m.\n# We know y = m - k > 0, so this term in the product (m - k)(5k - m) is positive.\n# Since we want x^2 - y^2 - z^2 > 0, this means we also require the term (5k - m) > 0, so 5k > m.\n# Putting these facts together, we have m/5 < k < m/2. Note: k > m/5 is equivalent to k >= floor(m/5) + 1.\n# \n# As for the search range of m, since (m - k) and (5k - m) are both positive integers,\n# we know that (m - k)(5k - m) >= m - k > m/2. So m/2 < x^2 - y^2 - z^2 < 10^6.\n# This means we search with 0 < m < 2 * 10^6.\ndef compute():\n\tLIMIT = 10**6\n\tsolutions = [0] * LIMIT\n\tfor m in range(1, LIMIT * 2):\n\t\tfor k in range(m // 5 + 1, (m + 1) // 2):\n\t\t\ttemp = (m - k) * (k * 5 - m)\n\t\t\tif temp >= LIMIT:\n\t\t\t\tbreak\n\t\t\tsolutions[temp] += 1\n\t\n\tans = solutions.count(10)\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "4989"}
{"number": 125, "problem": "<p>The palindromic number $595$ is interesting because it can be written as the sum of consecutive squares: $6^2 + 7^2 + 8^2 + 9^2 + 10^2 + 11^2 + 12^2$.</p>\n<p>There are exactly eleven palindromes below one-thousand that can be written as consecutive square sums, and the sum of these palindromes is $4164$. Note that $1 = 0^2 + 1^2$ has not been included as this problem is concerned with the squares of positive integers.</p>\n<p>Find the sum of all the numbers less than $10^8$ that are both palindromic and can be written as the sum of consecutive squares.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 125\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport itertools\n\n\ndef compute():\n\tnums = set()\n\tfor i in range(1, 10001):\n\t\tsigma = i * i\n\t\tfor j in itertools.count(i + 1):\n\t\t\tsigma += j * j\n\t\t\tif sigma >= 100000000:\n\t\t\t\tbreak\n\t\t\ts = str(sigma)\n\t\t\tif s == s[ : : -1]:  # Is palindrome\n\t\t\t\tnums.add(sigma)\n\treturn str(sum(nums))\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "2906969179"}
{"number": 65, "problem": "<p>The square root of $2$ can be written as an infinite continued fraction.</p>\n<p>$\\sqrt{2} = 1 + \\dfrac{1}{2 + \\dfrac{1}{2 + \\dfrac{1}{2 + \\dfrac{1}{2 + ...}}}}$</p>\n<p>The infinite continued fraction can be written, $\\sqrt{2} = [1; (2)]$, $(2)$ indicates that $2$ repeats <i>ad infinitum</i>. In a similar way, $\\sqrt{23} = [4; (1, 3, 1, 8)]$.</p>\n<p>It turns out that the sequence of partial values of continued fractions for square roots provide the best rational approximations. Let us consider the convergents for $\\sqrt{2}$.</p>\n<p>$\\begin{align}\n&amp;1 + \\dfrac{1}{2} = \\dfrac{3}{2} \\\\\n&amp;1 + \\dfrac{1}{2 + \\dfrac{1}{2}} = \\dfrac{7}{5}\\\\\n&amp;1 + \\dfrac{1}{2 + \\dfrac{1}{2 + \\dfrac{1}{2}}} = \\dfrac{17}{12}\\\\\n&amp;1 + \\dfrac{1}{2 + \\dfrac{1}{2 + \\dfrac{1}{2 + \\dfrac{1}{2}}}} = \\dfrac{41}{29}\n\\end{align}$</p>\n<p>Hence the sequence of the first ten convergents for $\\sqrt{2}$ are:</p>\n<p>$1, \\dfrac{3}{2}, \\dfrac{7}{5}, \\dfrac{17}{12}, \\dfrac{41}{29}, \\dfrac{99}{70}, \\dfrac{239}{169}, \\dfrac{577}{408}, \\dfrac{1393}{985}, \\dfrac{3363}{2378}, ...$</p>\n<p>What is most surprising is that the important mathematical constant,<br>$e = [2; 1, 2, 1, 1, 4, 1, 1, 6, 1, ... , 1, 2k, 1, ...]$.</p>\n<p>The first ten terms in the sequence of convergents for $e$ are:</p>\n<p>$2, 3, \\dfrac{8}{3}, \\dfrac{11}{4}, \\dfrac{19}{7}, \\dfrac{87}{32}, \\dfrac{106}{39}, \\dfrac{193}{71}, \\dfrac{1264}{465}, \\dfrac{1457}{536}, ...$</p>\n<p>The sum of digits in the numerator of the $10$<sup>th</sup> convergent is $1 + 4 + 5 + 7 = 17$.</p>\n<p>Find the sum of digits in the numerator of the $100$<sup>th</sup> convergent of the continued fraction for $e$.</p>\n", "solution": "# \n# Solution to Project Euler problem 65\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tnumer = 1\n\tdenom = 0\n\tfor i in reversed(range(100)):\n\t\tnumer, denom = e_contfrac_term(i) * numer + denom, numer\n\tans = sum(int(c) for c in str(numer))\n\treturn str(ans)\n\n\ndef e_contfrac_term(i):\n\tif i == 0:\n\t\treturn 2\n\telif i % 3 == 2:\n\t\treturn i // 3 * 2 + 2\n\telse:\n\t\treturn 1\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "272"}
{"number": 174, "problem": "<p>We shall define a square lamina to be a square outline with a square \"hole\" so that the shape possesses vertical and horizontal symmetry.</p>\n<p>Given eight tiles it is possible to form a lamina in only one way: $3 \\times 3$ square with a $1 \\times 1$ hole in the middle. However, using thirty-two tiles it is possible to form two distinct laminae.</p>\n<div class=\"center\">\n<img src=\"resources/images/0173_square_laminas.gif?1678992055\" alt=\"\"></div>\n<p>If <var>t</var> represents the number of tiles used, we shall say that $t = 8$ is type $L(1)$ and $t = 32$ is type $L(2)$.</p>\n<p>Let $N(n)$ be the number of $t \\le 1000000$ such that $t$ is type $L(n)$; for example, $N(15) = 832$.</p>\n<p>What is $\\sum\\limits_{n = 1}^{10} N(n)$?</p>\n", "solution": "# \n# Solution to Project Euler problem 174\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\ndef compute():\n\tSIZE_LIMIT = 1000000\n\tTYPE_LIMIT = 10\n\t\n\t# Generate all possible laminae with at most SIZE_LIMIT tiles\n\ttype = [0] * (SIZE_LIMIT + 1)\n\tfor n in range(3, SIZE_LIMIT // 4 + 2):  # Outer square size\n\t\tfor m in range(n - 2, 0, -2):  # Inner square hole size\n\t\t\ttiles = n * n - m * m\n\t\t\tif tiles > SIZE_LIMIT:\n\t\t\t\tbreak\n\t\t\ttype[tiles] += 1\n\t\n\t# Examine the type of each total tiling\n\tans = sum(1 for t in type if 1 <= t <= TYPE_LIMIT)\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "209566"}
{"number": 34, "problem": "<p>$145$ is a curious number, as $1! + 4! + 5! = 1 + 24 + 120 = 145$.</p>\n<p>Find the sum of all numbers which are equal to the sum of the factorial of their digits.</p>\n<p class=\"smaller\">Note: As $1! = 1$ and $2! = 2$ are not sums they are not included.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 34\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport math\n\n\ndef compute():\n\t# As stated in the problem, 1 = 1! and 2 = 2! are excluded.\n\t# If a number has at least n >= 8 digits, then even if every digit is 9,\n\t# n * 9! is still less than the number (which is at least 10^n).\n\tans = sum(i for i in range(3, 10000000) if i == factorial_digit_sum(i))\n\treturn str(ans)\n\n\ndef factorial_digit_sum(n):\n\tresult = 0\n\twhile n >= 10000:\n\t\tresult += FACTORIAL_DIGITS_SUM_WITH_LEADING_ZEROS[n % 10000]\n\t\tn //= 10000\n\treturn result + FACTORIAL_DIGITS_SUM_WITHOUT_LEADING_ZEROS[n]\n\nFACTORIAL_DIGITS_SUM_WITHOUT_LEADING_ZEROS = [sum(math.factorial(int(c)) for c in str(i)) for i in range(10000)]\nFACTORIAL_DIGITS_SUM_WITH_LEADING_ZEROS = [sum(math.factorial(int(c)) for c in str(i).zfill(4)) for i in range(10000)]\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "40730"}
{"number": 187, "problem": "<p>A composite is a number containing at least two prime factors. For example, $15 = 3 \\times 5$; $9 = 3 \\times 3$; $12 = 2 \\times 2 \\times 3$.</p>\n\n<p>There are ten composites below thirty containing precisely two, not necessarily distinct, prime factors:\n$4, 6, 9, 10, 14, 15, 21, 22, 25, 26$.</p>\n\n<p>How many composite integers, $n \\lt 10^8$, have precisely two, not necessarily distinct, prime factors?</p>\n", "solution": "# \n# Solution to Project Euler problem 187\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, math\n\n\n# LIMIT is the highest number that we will test for being semiprime.\n# Make a list of primes: 2, 3, 5, 7, ... . Stop beyond LIMIT/2, because one of the prime factors in the semiprime is at least 2.\n# For each prime p in the list, look at the set of numbers q such that q >= p and pq <= LIMIT.\n# Actually, we can stop when p^2 > LIMIT, as we'll see later.\n# In this algorithm, we find the index 'end' such that primes[i] * primes[end] > LIMIT.\n# So for that p, we have (end - i) different choices for q. Since q >= p, all these pairs are unique.\n# Furthermore, by the fundamental theorem of arithmetic, all the products pq are unique.\ndef compute():\n\tLIMIT = 10**8 - 1\n\tans = 0\n\tprimes = eulerlib.list_primes(LIMIT // 2)\n\tsqrt = math.isqrt(LIMIT)\n\tfor (i, p) in enumerate(primes):\n\t\tif p > sqrt:\n\t\t\tbreak\n\t\tend = binary_search(primes, LIMIT // p)\n\t\tans += (end + 1 if end >= 0 else -end - 1) - i\n\treturn str(ans)\n\n\n# Given a sorted list and a value, this returns an index i such that lst[i] == x if it exists,\n# otherwise this returns (-i - 1) where i is the index that x should be inserted at.\ndef binary_search(lst, x):\n\tstart = 0\n\tend = len(lst)\n\twhile start < end:\n\t\tmid = (start + end) // 2\n\t\tif x < lst[mid]:\n\t\t\tend = mid\n\t\telif x > lst[mid]:\n\t\t\tstart = mid + 1\n\t\telif x == lst[mid]:\n\t\t\treturn mid\n\t\telse:\n\t\t\traise AssertionError()\n\treturn -start - 1\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "17427258"}
{"number": 216, "problem": "<p>Consider numbers $t(n)$ of the form $t(n) = 2n^2 - 1$ with $n \\gt 1$.<br>\nThe first such numbers are $7, 17, 31, 49, 71, 97, 127$ and $161$.<br>\nIt turns out that only $49 = 7 \\cdot 7$ and $161 = 7 \\cdot 23$ are not prime.<br>\nFor $n \\le 10000$ there are $2202$ numbers $t(n)$ that are prime.</p>\n\n<p>How many numbers $t(n)$ are prime for $n \\le 50\\,000\\,000$?</p>\n", "solution": "# \n# Solution to Project Euler problem 216\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\n\n# As per the problem statement, define t(n) = 2n^2 - 1 and assume that always n > 1.\n# Hence t(n) >= 7, and the sequence is strictly increasing (with no repeats).\n# \n# Algorithm statement:\n# 0. Create a mutable sequence of integers, with indices (2, 3, 4, ..., 50000000)\n#    initialized to (t(2), t(3), t(4), ..., t(50000000)).\n# 1. For each index i = (2, 3, ..., 50000000) in ascending order:\n#    a) If seq(i) = t(i) (the original value), then t(i) must be prime (proven below). Continue to (b).\n#    b) If seq(i) > 1, then let p = seq(i) (actually prime but not obvious), and for each choice of index j\n#       with 1 < j = kp +/- i <= 50000000, divide at least one factor of p from seq(j) until they are coprime.\n#    c) Else seq(i) = 1, then do nothing.\n# \n# Lemma: No term t(n) is divisible by 2, 3, or 5.\n# Proof:\n# - For all n, t(n) = 2n^2 - 1 is clearly odd.\n# - Suppose n = {0, 1, 2} mod 3. Then 2n^2 - 1 = {2, 1, 1} mod 3, all of which are nonzero.\n# - Suppose n = {0, 1, 2, 3, 4} mod 5. Then 2n^2 - 1 = {4, 1, 2, 2, 1} mod 5, all of which are nonzero.\n# \n# Lemma:\n#   If some p (can be prime or composite) divides some term t(n), then p also divides t(kp +/- n) for all k\n#   that produces an in-bounds index; furthermore these are the only indices where the term is divisible by p.\n# Proof:\n#   We have the fact that p divides t(n), which means 2n^2 - 1 = 0 mod p.\n#   To find all indices j where p divides t(j), we derive:\n#        t(j) = 0 mod p\n#   <=>  2j^2 - 1 = 0 mod p\n#   <=>  2j^2 - 1 = 2n^2 - 1 mod p\n#   <=>  2j^2 = 2n^2 mod p\n#   <=>  2(j^2 - n^2) = 0 mod p\n#   <=>  2(j - n)(j + n) = 0 mod p\n#   <=>  (j = n mod p) inclusive-or (j = -n mod p).\n#   In fact, the two cases are disjoint because n != 0 mod p, since it would imply\n#   t(n) = 2n^2 - 1 = 0 - 1 mod p, which contradicts the initial assumption that p divides t(n).\n#   The case j = n mod p is satisfied by j = kp + n for any k. The case j = -n mod p is satisfied by j = kp - n for any k.\n#   Thus if j is of the form kp +/- n and j > 1, these are necessary and sufficient conditions for p to divide t(j).\n# \n# Lemma: In the algorithm's main loop, for each index i when it is visited, the value seq(i) is either 1 or a prime number.\n# Proof:\n#   For i = (2, 3, 4) this is clearly true since t(i) is prime. Otherwise:\n#   Suppose some prime p divides seq(i). What can its value be?\n#   - Case p < i: By the second lemma, p also divides t(i - p). We know that i - p >= 1. We argue that i - p = 1\n#     is impossible, because then i = p + 1, and t(i) = 2i^2 - 1 = 2(p + 1)^2 - 1 = 2p^2 + 4p + 1 = 1 mod p,\n#     which is not a multiple of p. Hence i - p >= 2. This means p would have been the value of seq(j) for some j < i,\n#     and factors of p would have been divided out of seq(i) already.\n#   - Case p = i: This is impossible because t(i) = 2i^2 - 1 = -1 mod p. Furthermore,\n#     this is still impossible even if factors are divided out of t(i) to yield seq(i).\n#   - Case i < p < 2i: By the second lemma, p also divides t(p - i). We know that p - i >= 1. We argue that p - i = 1\n#     is impossible, because then i = p - 1, and t(i) = 2i^2 - 1 = 2(p - 1)^2 - 1 = 2p^2 - 4p + 1 = 1 mod p,\n#     which is not a multiple of p. Hence p - i >= 2. This means p would have been the value of seq(j) for some j < i,\n#     and factors of p would have been divided out of seq(i) already.\n#   - Case 2i < p: If seq(i) itself is prime, then there is no problem. Otherwise it would have at least two prime factors\n#     p, q > 2i, but it would mean pq > 4i^2 > 2i^2 (because i > 0) > 2i^2 - 1 = t(i) >= seq(i), which is a contradiction.\n#   Therefore the only non-contradictory case is the one where seq(i) is a prime number.\n# \n# Credits:\n#   My algorithm and proof were written with major help from this document:\n#   https://code.google.com/archive/p/fun-math-problems/source/default/source?page=15 , p216.tex\ndef compute():\n\t# Produce the entire sequence\n\tLIMIT = 50000000\n\tsequence = [(2 * i * i - 1) for i in range(LIMIT + 1)]\n\tsequence[0] = sequence[1] = -1\n\t\n\t# Divide out factors using a kind of sieve\n\tans = 0\n\tfor (i, term) in enumerate(sequence):\n\t\tif i < 2:\n\t\t\tcontinue\n\t\t# We can assert at this point that term == 1 or isPrime(term)\n\t\tif term == 2 * i * i - 1:\n\t\t\tans += 1\n\t\t\n\t\t# We can skip if term > LIMIT * 2 because in the second loop would do nothing. This also avoids overflows because term is a long.\n\t\t# The loop does nothing because: i <= LIMIT < p/2; p/2 - i > 0; p - i > p/2; 2(p - i) > p. Clearly 2(p - i) < 2p.\n\t\t# Hence 2(p - i) % p = p - 2i. Next, the start index j = i + (p - 2i) = p - i > p/2 >= LIMIT, therefore j > LIMIT.\n\t\tif 1 < term <= LIMIT * 2:\n\t\t\t# Visit specific later entries in the sequence and divide out all factors of p\n\t\t\tp = term\n\t\t\t# j starts at the smallest number such that j > i and j = +i mod p\n\t\t\tfor j in range(i + p, LIMIT + 1, p):\n\t\t\t\twhile True:\n\t\t\t\t\tsequence[j] //= p\n\t\t\t\t\tif sequence[j] % p != 0:\n\t\t\t\t\t\tbreak\n\t\t\t# j starts at the smallest number such that j > i and j = -i mod p\n\t\t\tfor j in range(i + (p - i) * 2 % p, LIMIT + 1, p):\n\t\t\t\twhile True:\n\t\t\t\t\tsequence[j] //= p\n\t\t\t\t\tif sequence[j] % p != 0:\n\t\t\t\t\t\tbreak\n\treturn str(ans)\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "5437849"}
{"number": 51, "problem": "<p>By replacing the 1<sup>st</sup> digit of the 2-digit number *3, it turns out that six of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime.</p>\n<p>By replacing the 3<sup>rd</sup> and 4<sup>th</sup> digits of 56**3 with the same digit, this 5-digit number is the first example having seven primes among the ten generated numbers, yielding the family: 56003, 56113, 56333, 56443, 56663, 56773, and 56993. Consequently 56003, being the first member of this family, is the smallest prime with this property.</p>\n<p>Find the smallest prime which, by replacing part of the number (not necessarily adjacent digits) with the same digit, is part of an eight prime value family.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 51\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\ndef compute():\n\tisprime = eulerlib.list_primality(1000000)\n\tfor i in range(len(isprime)):\n\t\tif not isprime[i]:\n\t\t\tcontinue\n\t\t\n\t\tn = [int(c) for c in str(i)]\n\t\tfor mask in range(1 << len(n)):\n\t\t\tdigits = do_mask(n, mask)\n\t\t\tcount = 0\n\t\t\tfor j in range(10):\n\t\t\t\tif digits[0] != 0 and isprime[to_number(digits)]:\n\t\t\t\t\tcount += 1\n\t\t\t\tdigits = add_mask(digits, mask)\n\t\t\t\n\t\t\tif count == 8:\n\t\t\t\tdigits = do_mask(n, mask)\n\t\t\t\tfor j in range(10):\n\t\t\t\t\tif digits[0] != 0 and isprime[to_number(digits)]:\n\t\t\t\t\t\treturn str(to_number(digits))\n\t\t\t\t\tdigits = add_mask(digits, mask)\n\traise AssertionError(\"Not found\")\n\n\ndef do_mask(digits, mask):\n\treturn [d * ((~mask >> i) & 1) for (i, d) in enumerate(digits)]\n\n\ndef add_mask(digits, mask):\n\treturn [d + ((mask >> i) & 1) for (i, d) in enumerate(digits)]\n\n\ndef to_number(digits):\n\tresult = 0\n\tfor d in digits:\n\t\tresult = result * 10 + d\n\treturn result\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "121313"}
{"number": 51, "problem": "<p>By replacing the 1<sup>st</sup> digit of the 2-digit number *3, it turns out that six of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime.</p>\n<p>By replacing the 3<sup>rd</sup> and 4<sup>th</sup> digits of 56**3 with the same digit, this 5-digit number is the first example having seven primes among the ten generated numbers, yielding the family: 56003, 56113, 56333, 56443, 56663, 56773, and 56993. Consequently 56003, being the first member of this family, is the smallest prime with this property.</p>\n<p>Find the smallest prime which, by replacing part of the number (not necessarily adjacent digits) with the same digit, is part of an eight prime value family.</p>\n\n", "solution": "# \n# Solution to Project Euler problem 51\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib\n\n\ndef compute():\n\tisprime = eulerlib.list_primality(1000000)\n\tfor i in range(len(isprime)):\n\t\tif not isprime[i]:\n\t\t\tcontinue\n\t\t\n\t\tn = [int(c) for c in str(i)]\n\t\tfor mask in range(1 << len(n)):\n\t\t\tdigits = do_mask(n, mask)\n\t\t\tcount = 0\n\t\t\tfor j in range(10):\n\t\t\t\tif digits[0] != 0 and isprime[to_number(digits)]:\n\t\t\t\t\tcount += 1\n\t\t\t\tdigits = add_mask(digits, mask)\n\t\t\t\n\t\t\tif count == 8:\n\t\t\t\tdigits = do_mask(n, mask)\n\t\t\t\tfor j in range(10):\n\t\t\t\t\tif digits[0] != 0 and isprime[to_number(digits)]:\n\t\t\t\t\t\treturn str(to_number(digits))\n\t\t\t\t\tdigits = add_mask(digits, mask)\n\traise AssertionError(\"Not found\")\n\n\ndef do_mask(digits, mask):\n\treturn [d * ((~mask >> i) & 1) for (i, d) in enumerate(digits)]\n\n\ndef add_mask(digits, mask):\n\treturn [d + ((mask >> i) & 1) for (i, d) in enumerate(digits)]\n\n\ndef to_number(digits):\n\tresult = 0\n\tfor d in digits:\n\t\tresult = result * 10 + d\n\treturn result\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "121313"}
{"number": 280, "problem": "<p>A laborious ant walks randomly on a $5 \\times 5$ grid. The walk starts from the central square. At each step, the ant moves to an adjacent square at random, without leaving the grid; thus there are $2$, $3$ or $4$ possible moves at each step depending on the ant's position.</p>\n\n<p>At the start of the walk, a seed is placed on each square of the lower row. When the ant isn't carrying a seed and reaches a square of the lower row containing a seed, it will start to carry the seed. The ant will drop the seed on the first empty square of the upper row it eventually reaches.</p>\n\n<p>What's the expected number of steps until all seeds have been dropped in the top row? <br>\nGive your answer rounded to $6$ decimal places.</p>\n", "solution": "# \n# Solution to Project Euler problem 280\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, itertools\n\n\n# Model the problem as a Markov process, and solve using dynamic programming\ndef compute():\n\t# Memoize the successors of each valid state\n\tsuccessors = {}\n\tfor st in State.list_all_states():\n\t\tsuccessors[st.id] = [s.id for s in st.get_successors()]\n\t\n\t# Run the simulation\n\tans = 0.0\n\tprobs = {State.START_STATE.id: 1.0}  # The current probability of being in each state\n\tfor i in itertools.count(1):\n\t\t# Note: The done state has no outgoing neighbors,\n\t\t# so its probability disappears in the next iteration\n\t\tnextprobs = {}\n\t\tfor (j, p) in probs.items():\n\t\t\tsuc = successors[j]\n\t\t\tfor k in suc:\n\t\t\t\tnextprobs[k] = nextprobs.get(k, 0.0) + probs[j] / float(len(suc))\n\t\t\n\t\tdonenow = nextprobs.get(State.DONE_STATE.id, 0.0)\n\t\tif i > 44 and donenow < 1e-20:  # Note: Minimum completion is 44 steps\n\t\t\tbreak\n\t\tans += donenow * i\n\t\tprobs = nextprobs\n\treturn f\"{ans:.6f}\"\n\n\n\n# Represents the global state of the system, including the ant and seeds. Immutable.\nclass State:\n\t\n\t# All valid state IDs are in the range [0, ID_LIMIT). Not every number in the range is a valid state.\n\tID_LIMIT = 5 * 5 * 2**11 + 1\n\t\n\t@staticmethod\n\tdef list_all_states():\n\t\tresult = set()\n\t\t# Try all 2^11 ways for which cells (or ant) hold a seed\n\t\tfor i in range(2**11):\n\t\t\tif eulerlib.popcount(i) != 5:\n\t\t\t\tcontinue  # Invalid state if not 5 things hold a seed\n\t\t\t\t\n\t\t\t# For all 5*5 possible ant positions\n\t\t\tfor y in range(5):\n\t\t\t\tfor x in range(5):\n\t\t\t\t\tseed = [((i >> j) & 1) != 0 for j in range(11)]\n\t\t\t\t\tresult.add(State(False, x, y, seed))\n\t\tresult.add(State.DONE_STATE)\n\t\treturn result\n\t\n\t\n\tdef __init__(self, done, x, y, seed):\n\t\tself.isdone = done\n\t\tself.antx = x\n\t\tself.anty = y\n\t\tself.hasseed = seed\n\t\tif done:\n\t\t\tself.id = 5 * 5 * 2**11\n\t\telse:\n\t\t\ttemp = sum((1 if b else 0) << i for (i, b) in enumerate(seed))\n\t\t\tself.id = x + y * 5 + temp * 25\n\t\n\t\n\t# Returns a set (of size 0 to 4) containing this state's successors.\n\t# Remember that this state transitions to a successor with equal probability.\n\tdef get_successors(self):\n\t\tresult = set()\n\t\tif not self.isdone:\n\t\t\tself.try_add_successor(-1, 0, result)\n\t\t\tself.try_add_successor(+1, 0, result)\n\t\t\tself.try_add_successor(0, -1, result)\n\t\t\tself.try_add_successor(0, +1, result)\n\t\treturn result\n\t\n\t\n\tdef try_add_successor(self, dx, dy, result):\n\t\tx = self.antx + dx\n\t\ty = self.anty + dy\n\t\tif not (0 <= x < 5 and 0 <= y < 5):\n\t\t\treturn  # Ant moves off the grid\n\t\t\n\t\tseed = list(self.hasseed)\n\t\tdone = False\n\t\tif not seed[10] and y == 4 and seed[5 + x]:  # Pick up seed\n\t\t\tseed[5 + x] = False\n\t\t\tseed[10] = True\n\t\telif seed[10] and y == 0 and not seed[x]:  # Drop off seed\n\t\t\tseed[10] = False\n\t\t\tseed[x] = True\n\t\t\tdone = seed[0] & seed[1] & seed[2] & seed[3] & seed[4]\n\t\tresult.add(State(done, x, y, seed))\n\nState.START_STATE = State(False, 2, 2, [False, False, False, False, False, True, True, True, True, True, False])\nState.DONE_STATE  = State(True , 0, 0, [True, True, True, True, True, False, False, False, False, False, False])\n\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "430.088247"}
{"number": 222, "problem": "<p>What is the length of the shortest pipe, of internal radius $\\pu{50 mm}$, that can fully contain $21$ balls of radii $\\pu{30 mm}, \\pu{31 mm}, \\dots, \\pu{50 mm}$?</p>\n\n<p>Give your answer in micrometres ($\\pu{10^{-6} m}$) rounded to the nearest integer.</p>\n", "solution": "# \n# Solution to Project Euler problem 222\n# Copyright (c) Project Nayuki. All rights reserved.\n# \n# https://www.nayuki.io/page/project-euler-solutions\n# https://github.com/nayuki/Project-Euler-solutions\n# \n\nimport eulerlib, math\n\n\ndef compute():\n\tNUM_SPHERES = 21\n\t\n\t\n\tsphereradii = [(i + 30) * 1000 for i in range(NUM_SPHERES)]  # In micrometres\n\tminlength = [[None] * (2**NUM_SPHERES) for _ in range(NUM_SPHERES)]\n\t\n\t# minlength[i][j] is the minimum achievable length for fitting a set of spheres in a cylindrical tube\n\t# of radius 50000 micrometres, where the sphere of radius sphereradii[i] is at the left end,\n\t# the bit vector j represents the set of spheres, and i must be in the set denoted by j.\n\t# (In the integer j, bit k denotes whether the sphere of radius sphereradii[k] is in the set or not.)\n\t# The right-side length of the rightmost sphere is included, the length of the distance between spheres\n\t# (arranged in an optimal way) is included, but the left-side length of the leftmost sphere is excluded.\n\t# \n\t# For example, minlength[3][0x819] is the minimum length of fitting the set of spheres with radii\n\t# {30000, 33000, 34000, 41000} micrometres, where the leftmost sphere has radius 33000\n\t# (and this value is discounted from the total length).\n\tdef find_minimum_length(currentsphereindex, setofspheres):\n\t\tif setofspheres & (1 << currentsphereindex) == 0:\n\t\t\traise ValueError()\n\t\t\n\t\t# Memoization\n\t\tif minlength[currentsphereindex][setofspheres] is None:\n\t\t\tif eulerlib.popcount(setofspheres) == 1:\n\t\t\t\tresult = sphereradii[currentsphereindex]  # This sphere is rightmost\n\t\t\telse:\n\t\t\t\tresult = float(\"inf\")\n\t\t\t\tnewsetofspheres = setofspheres ^ (1 << currentsphereindex)\n\t\t\t\tfor i in range(NUM_SPHERES):  # i is the index of the next sphere\n\t\t\t\t\tif newsetofspheres & (1 << i) == 0:\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t# The sqrt() here is what makes the entire computation not guaranteed to be accurate\n\t\t\t\t\ttemp = math.sqrt((sphereradii[i] + sphereradii[currentsphereindex] - 50000) * 200000)\n\t\t\t\t\ttemp += find_minimum_length(i, newsetofspheres)\n\t\t\t\t\tresult = min(temp, result)\n\t\t\tminlength[currentsphereindex][setofspheres] = result\n\t\treturn minlength[currentsphereindex][setofspheres]\n\t\n\t\n\tans = min((find_minimum_length(i, (1 << NUM_SPHERES) - 1) + sphereradii[i])\n\t\tfor i in range(NUM_SPHERES))\n\treturn str(int(round(ans)))\n\n\nif __name__ == \"__main__\":\n\tprint(compute())\n", "answer": "1590933"}
